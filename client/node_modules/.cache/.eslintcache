[{"C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\index.js":"1","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\reportWebVitals.js":"2","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\index.js":"3","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\TablePanel\\handlers\\scrollSnapHandler\\scrollSnapHandler.js":"4","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\BodyPanel\\BodyPanel.js":"5","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\store\\store.js":"6","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\store\\reducers\\keyboardEventsSlice.js":"7","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\store\\reducers\\selectionSlice.js":"8","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\store\\reducers\\tableDimensionsSlice.js":"9","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\store\\reducers\\historySlice.js":"10","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\data\\data.js":"11","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\data\\groupStyles.js":"12","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\data\\individualEntries.js":"13","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\MenuPanel\\MenuPanel.js":"14","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\TitleInput\\TitleInput.js":"15","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\SpreadSheetPanel\\SpreadSheetPanel.js":"16","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\tests\\sequenceHelpers.js":"17","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\MenuPanel\\tests\\unitTest.js":"18","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\TablePanel\\TablePanel.js":"19","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\TestConsolePanel\\TestConsolePanel.js":"20","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\FormatPanel.js":"21","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\SpreadSheetPanel\\helpers\\API.js":"22","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\SpreadSheetPanel\\tests\\unitTest.js":"23","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\SpreadSheetPanel\\tests\\appTest.js":"24","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\CellViewPanel\\CellViewPanel.js":"25","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\SpreadSheetPanel\\handlers\\keyboardEvents\\keyboardEvents.js":"26","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\MenuPanel\\tests\\MenuInteractionTest.js":"27","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\tests\\endToEnd.js":"28","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\TablePanel\\tests\\unitTest.js":"29","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\SpreadSheetPanel\\handlers\\keyboardEvents\\test.js":"30","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\TablePanel\\handlers\\cellHandler\\cellHandler.js":"31","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\tests\\unitTest.js":"32","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\TablePanel\\handlers\\resizingHandler\\resizingHandler.js":"33","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\TablePanel\\helpers\\buildSheet\\buildSheet.js":"34","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\data\\modifiers\\undoRedo.js":"35","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\components\\FontFamily\\FontFamily.js":"36","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\components\\Bold\\Bold.js":"37","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\components\\CellColor\\CellColor.js":"38","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\components\\Strikethrough\\Strikethrough.js":"39","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\components\\FontSize\\FontSize.js":"40","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\components\\Italic\\Italic.js":"41","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\components\\FontColor\\FontColor.js":"42","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\components\\Borders\\Borders.js":"43","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\components\\HorizontalAlignment\\HorizontalAlignment.js":"44","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\components\\VerticalAlignment\\VerticalAlignment.js":"45","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\tests\\helper.js":"46","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\SpreadSheetPanel\\handlers\\keyboardEvents\\keyMacros.js":"47","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\TablePanel\\handlers\\resizingHandler\\test.js":"48","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\TablePanel\\helpers\\buildSheet\\test.js":"49","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\data\\modifiers\\recordChange.js":"50","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\data\\modifiers\\applyChange.js":"51","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\data\\modifiers\\updateCollectedData.js":"52","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\TablePanel\\handlers\\cellHandler\\selectionHandler\\test.js":"53","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\TablePanel\\handlers\\cellHandler\\textChangeHandler\\test.js":"54","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\components\\Bold\\test.js":"55","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\components\\Italic\\test.js":"56","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\components\\FontFamily\\test.js":"57","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\components\\VerticalAlignment\\test.js":"58","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\components\\FontColor\\test.js":"59","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\components\\FontSize\\test.js":"60","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\components\\CellColor\\test.js":"61","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\components\\HorizontalAlignment\\test.js":"62","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\components\\Borders\\test.js":"63","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\components\\Strikethrough\\test.js":"64","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\misc\\util.js":"65","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\TablePanel\\handlers\\cellHandler\\selectionHandler\\selectionHandler.js":"66","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\TablePanel\\handlers\\cellHandler\\textChangeHandler\\textChangeHandler.js":"67","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\helper.js":"68","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\TablePanel\\helpers\\buildSheet\\helpers\\constructAxes.js":"69","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\TablePanel\\helpers\\buildSheet\\helpers\\util.js":"70","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\TablePanel\\helpers\\buildSheet\\helpers\\assembleTableData.js":"71","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\TablePanel\\helpers\\buildSheet\\helpers\\constructTableModel.js":"72"},{"size":1198,"mtime":1674950384409,"results":"73","hashOfConfig":"74"},{"size":375,"mtime":1663790849587,"results":"75","hashOfConfig":"74"},{"size":73,"mtime":1671857290267,"results":"76","hashOfConfig":"74"},{"size":5382,"mtime":1674953928547,"results":"77","hashOfConfig":"74"},{"size":1916,"mtime":1675573567973,"results":"78","hashOfConfig":"74"},{"size":3478,"mtime":1673827382545,"results":"79","hashOfConfig":"74"},{"size":1329,"mtime":1663790849587,"results":"80","hashOfConfig":"74"},{"size":3528,"mtime":1675543521455,"results":"81","hashOfConfig":"74"},{"size":1188,"mtime":1674870986462,"results":"82","hashOfConfig":"74"},{"size":3398,"mtime":1674953852800,"results":"83","hashOfConfig":"74"},{"size":1503,"mtime":1675475033292,"results":"84","hashOfConfig":"74"},{"size":1316,"mtime":1663790849571,"results":"85","hashOfConfig":"74"},{"size":7082,"mtime":1673827155528,"results":"86","hashOfConfig":"74"},{"size":7366,"mtime":1675549672223,"results":"87","hashOfConfig":"74"},{"size":323,"mtime":1671861472427,"results":"88","hashOfConfig":"74"},{"size":4614,"mtime":1675557437861,"results":"89","hashOfConfig":"74"},{"size":1998,"mtime":1675557636370,"results":"90","hashOfConfig":"74"},{"size":729,"mtime":1675557394025,"results":"91","hashOfConfig":"74"},{"size":2790,"mtime":1675542219410,"results":"92","hashOfConfig":"74"},{"size":599,"mtime":1675546144352,"results":"93","hashOfConfig":"74"},{"size":7102,"mtime":1675549542851,"results":"94","hashOfConfig":"74"},{"size":2064,"mtime":1673828465469,"results":"95","hashOfConfig":"74"},{"size":701,"mtime":1675557366257,"results":"96","hashOfConfig":"74"},{"size":755,"mtime":1675557371552,"results":"97","hashOfConfig":"74"},{"size":985,"mtime":1674933074784,"results":"98","hashOfConfig":"74"},{"size":2165,"mtime":1675215491237,"results":"99","hashOfConfig":"74"},{"size":1396,"mtime":1671772674278,"results":"100","hashOfConfig":"74"},{"size":4376,"mtime":1675319162447,"results":"101","hashOfConfig":"74"},{"size":1464,"mtime":1675557345194,"results":"102","hashOfConfig":"74"},{"size":14290,"mtime":1675315609470,"results":"103","hashOfConfig":"74"},{"size":437,"mtime":1675542227109,"results":"104","hashOfConfig":"74"},{"size":2534,"mtime":1675557423137,"results":"105","hashOfConfig":"74"},{"size":8668,"mtime":1674953975801,"results":"106","hashOfConfig":"74"},{"size":1973,"mtime":1674951105088,"results":"107","hashOfConfig":"74"},{"size":3895,"mtime":1674931204748,"results":"108","hashOfConfig":"74"},{"size":1846,"mtime":1675299893504,"results":"109","hashOfConfig":"74"},{"size":2085,"mtime":1675549842557,"results":"110","hashOfConfig":"74"},{"size":4569,"mtime":1675490698701,"results":"111","hashOfConfig":"74"},{"size":2274,"mtime":1675549853666,"results":"112","hashOfConfig":"74"},{"size":1859,"mtime":1675475527832,"results":"113","hashOfConfig":"74"},{"size":2089,"mtime":1675549848456,"results":"114","hashOfConfig":"74"},{"size":4378,"mtime":1675490265877,"results":"115","hashOfConfig":"74"},{"size":5423,"mtime":1675549873415,"results":"116","hashOfConfig":"74"},{"size":5456,"mtime":1675472435273,"results":"117","hashOfConfig":"74"},{"size":4147,"mtime":1675544765675,"results":"118","hashOfConfig":"74"},{"size":9551,"mtime":1675545965808,"results":"119","hashOfConfig":"74"},{"size":1706,"mtime":1663790849556,"results":"120","hashOfConfig":"74"},{"size":17601,"mtime":1675545763026,"results":"121","hashOfConfig":"74"},{"size":3625,"mtime":1675315524842,"results":"122","hashOfConfig":"74"},{"size":2630,"mtime":1675572423539,"results":"123","hashOfConfig":"74"},{"size":7127,"mtime":1675547661137,"results":"124","hashOfConfig":"74"},{"size":2139,"mtime":1673828013707,"results":"125","hashOfConfig":"74"},{"size":8636,"mtime":1675315585401,"results":"126","hashOfConfig":"74"},{"size":3506,"mtime":1675491361014,"results":"127","hashOfConfig":"74"},{"size":3698,"mtime":1675491244900,"results":"128","hashOfConfig":"74"},{"size":3822,"mtime":1675491293471,"results":"129","hashOfConfig":"74"},{"size":3814,"mtime":1675491270155,"results":"130","hashOfConfig":"74"},{"size":4038,"mtime":1675572423539,"results":"131","hashOfConfig":"74"},{"size":3746,"mtime":1675491260007,"results":"132","hashOfConfig":"74"},{"size":3716,"mtime":1675491279895,"results":"133","hashOfConfig":"74"},{"size":3762,"mtime":1675491241747,"results":"134","hashOfConfig":"74"},{"size":3956,"mtime":1675558961586,"results":"135","hashOfConfig":"74"},{"size":3865,"mtime":1675544239676,"results":"136","hashOfConfig":"74"},{"size":4019,"mtime":1675491305258,"results":"137","hashOfConfig":"74"},{"size":209,"mtime":1663790849587,"results":"138","hashOfConfig":"74"},{"size":4878,"mtime":1675550383385,"results":"139","hashOfConfig":"74"},{"size":1652,"mtime":1674933084528,"results":"140","hashOfConfig":"74"},{"size":240,"mtime":1675490187694,"results":"141","hashOfConfig":"74"},{"size":1989,"mtime":1674875264687,"results":"142","hashOfConfig":"74"},{"size":958,"mtime":1674109742375,"results":"143","hashOfConfig":"74"},{"size":6826,"mtime":1674872805692,"results":"144","hashOfConfig":"74"},{"size":2023,"mtime":1674933087400,"results":"145","hashOfConfig":"74"},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149"},"y2lu55",{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165"},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169"},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179"},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","suppressedMessages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186"},{"filePath":"187","messages":"188","suppressedMessages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":63,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190"},{"filePath":"191","messages":"192","suppressedMessages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194"},{"filePath":"195","messages":"196","suppressedMessages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","suppressedMessages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201"},{"filePath":"202","messages":"203","suppressedMessages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205"},{"filePath":"206","messages":"207","suppressedMessages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209"},{"filePath":"210","messages":"211","suppressedMessages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213"},{"filePath":"214","messages":"215","suppressedMessages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","suppressedMessages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220"},{"filePath":"221","messages":"222","suppressedMessages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224"},{"filePath":"225","messages":"226","suppressedMessages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228"},{"filePath":"229","messages":"230","suppressedMessages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232"},{"filePath":"233","messages":"234","suppressedMessages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236"},{"filePath":"237","messages":"238","suppressedMessages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240"},{"filePath":"241","messages":"242","suppressedMessages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244"},{"filePath":"245","messages":"246","suppressedMessages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248"},{"filePath":"249","messages":"250","suppressedMessages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252"},{"filePath":"253","messages":"254","suppressedMessages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":81,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256"},{"filePath":"257","messages":"258","suppressedMessages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"260","messages":"261","suppressedMessages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263"},{"filePath":"264","messages":"265","suppressedMessages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267"},{"filePath":"268","messages":"269","suppressedMessages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"271","messages":"272","suppressedMessages":"273","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274"},{"filePath":"275","messages":"276","suppressedMessages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"278","messages":"279","suppressedMessages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281"},{"filePath":"282","messages":"283","suppressedMessages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285"},{"filePath":"286","messages":"287","suppressedMessages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289"},{"filePath":"290","messages":"291","suppressedMessages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293"},{"filePath":"294","messages":"295","suppressedMessages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297"},{"filePath":"298","messages":"299","suppressedMessages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301"},{"filePath":"302","messages":"303","suppressedMessages":"304","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305"},{"filePath":"306","messages":"307","suppressedMessages":"308","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309"},{"filePath":"310","messages":"311","suppressedMessages":"312","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313"},{"filePath":"314","messages":"315","suppressedMessages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":65,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317"},{"filePath":"318","messages":"319","suppressedMessages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"321","messages":"322","suppressedMessages":"323","errorCount":0,"fatalErrorCount":0,"warningCount":97,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324"},{"filePath":"325","messages":"326","suppressedMessages":"327","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328"},{"filePath":"329","messages":"330","suppressedMessages":"331","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"332"},{"filePath":"333","messages":"334","suppressedMessages":"335","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336"},{"filePath":"337","messages":"338","suppressedMessages":"339","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340"},{"filePath":"341","messages":"342","suppressedMessages":"343","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344"},{"filePath":"345","messages":"346","suppressedMessages":"347","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348"},{"filePath":"349","messages":"350","suppressedMessages":"351","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"352"},{"filePath":"353","messages":"354","suppressedMessages":"355","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"356"},{"filePath":"357","messages":"358","suppressedMessages":"359","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"360"},{"filePath":"361","messages":"362","suppressedMessages":"363","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"364"},{"filePath":"365","messages":"366","suppressedMessages":"367","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"368"},{"filePath":"369","messages":"370","suppressedMessages":"371","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"372"},{"filePath":"373","messages":"374","suppressedMessages":"375","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"376"},{"filePath":"377","messages":"378","suppressedMessages":"379","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"380"},{"filePath":"381","messages":"382","suppressedMessages":"383","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"384"},{"filePath":"385","messages":"386","suppressedMessages":"387","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"388"},{"filePath":"389","messages":"390","suppressedMessages":"391","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"392"},{"filePath":"393","messages":"394","suppressedMessages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"396"},{"filePath":"397","messages":"398","suppressedMessages":"399","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"400","messages":"401","suppressedMessages":"402","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"403","messages":"404","suppressedMessages":"405","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"406"},{"filePath":"407","messages":"408","suppressedMessages":"409","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"410"},{"filePath":"411","messages":"412","suppressedMessages":"413","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"414"},{"filePath":"415","messages":"416","suppressedMessages":"417","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"418"},"C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\index.js",["419"],[],"import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport { BodyPanel } from './components'\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { updateScrollDimensions } from './components/TablePanel/handlers/scrollSnapHandler/scrollSnapHandler';\r\n\r\nconst DEFAULT_ROWS = 40;\r\nconst DEFAULT_COLS = 16;\r\nconst DEFAULT_ROW_HEIGHT = 22;\r\nconst DEFAULT_COL_WIDTH = 100;\r\nconst STORAGE_URL = null;\r\n\r\nwindow.onresize = () => {\r\n    updateScrollDimensions();\r\n    // update scrollbarLayerDimensions and d\r\n    // document.querySelector('#scrollBarLayer').style.height = store.getState().tableDimensions.height - 22 + 'px';\r\n    // document.querySelector('#scrollBarLayer').style.width = store.getState().tableDimensions.width - 50 + 'px';\r\n};\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(BodyPanel(DEFAULT_ROWS, DEFAULT_COLS, DEFAULT_ROW_HEIGHT, DEFAULT_COL_WIDTH, STORAGE_URL));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\reportWebVitals.js",[],[],"C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\index.js",[],[],"C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\TablePanel\\handlers\\scrollSnapHandler\\scrollSnapHandler.js",[],[],"C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\BodyPanel\\BodyPanel.js",[],[],"C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\store\\store.js",["420"],[],"import { configureStore } from '@reduxjs/toolkit'\r\n\r\nimport { loadSheet, newHistoryState, undo, redo, clearHistory, save, rollBackAndMerge } from './reducers/historySlice.js'\r\nimport { setSelection } from './reducers/selectionSlice.js'\r\nimport { enableTest, trackEvent } from './reducers/keyboardEventsSlice.js'\r\nimport { setTableDimensions } from './reducers/tableDimensionsSlice.js'\r\n\r\nimport historyReducer from './reducers/historySlice.js'\r\nimport selectionReducer from './reducers/selectionSlice.js'\r\nimport keyboardEventsReducer from './reducers/keyboardEventsSlice.js'\r\nimport tableDimensionsReducer from './reducers/tableDimensionsSlice.js'\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        loadedSheet: state.history.loadedSheet,\r\n        changeHistory: state.history.changeHistory,\r\n        changeHistoryIndex: state.history.changeHistoryIndex,\r\n        collectedData: state.history.collectedData,\r\n        sentData: state.history.sentData,\r\n\r\n        selectionEntries: state.selection.entries,\r\n\r\n        inputMode: state.keyboardEvents.inputMode,\r\n        enableTest: state.keyboardEvents.enableTest,\r\n        outcome: state.keyboardEvents.outcome,\r\n        timeTravelCounter: state.keyboardEvents.timeTravelCounter,\r\n\r\n        tableHeight: state.tableDimensions.height,\r\n        tableWidth: state.tableDimensions.width,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        loadSheet: (sheet) => {\r\n            dispatch(loadSheet(sheet));\r\n        },\r\n        newHistoryState: (prevRecordedData, dataAfterChange, collectedData) => {\r\n            dispatch(newHistoryState(prevRecordedData, dataAfterChange, collectedData));\r\n        },\r\n        undo: (collectedData) => {\r\n            dispatch(undo(collectedData));\r\n        },\r\n        redo: (collectedData) => {\r\n            dispatch(redo(collectedData));\r\n        },\r\n        clearHistoryState: () => {\r\n            dispatch(clearHistory());\r\n        },\r\n        save: () => {\r\n            dispatch(save());\r\n        },\r\n        rollBackAndMerge: () => {\r\n            dispatch(rollBackAndMerge());\r\n        },\r\n        setSelection: (entries, categories) => {\r\n            dispatch(setSelection(entries, categories));\r\n        },\r\n        enableTest: (enableTest) => {\r\n            dispatch(enableTest(enableTest));\r\n        },\r\n        trackEvent: (inputMode, outcome, timeTravelCounter) => {\r\n            dispatch(trackEvent(inputMode, outcome, timeTravelCounter))\r\n        },\r\n        setTableDimensions: (height, width) => {\r\n            dispatch(setTableDimensions(height, width));\r\n        },\r\n\r\n    }\r\n};\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        history: historyReducer,\r\n        selection: selectionReducer,\r\n        keyboardEvents: keyboardEventsReducer,\r\n        tableDimensions: tableDimensionsReducer,\r\n    },\r\n    middleware: (getDefaultMiddleware) =>\r\n        getDefaultMiddleware({\r\n            serializableCheck: {\r\n                // Ignore these action types\r\n                ignoredActions: ['history/newHistoryState'],\r\n                // Ignore these field paths in all actions\r\n                ignoredActionPaths: ['payload.prevRecordedData', 'payload.collectedData'],\r\n                // Ignore these paths in the state\r\n                ignoredPaths: ['history.changeHistory', 'history.collectedData', 'history.sentData', 'selection.entries'],\r\n            },\r\n        })\r\n})\r\n\r\nexport { store, mapStateToProps, mapDispatchToProps };","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\store\\reducers\\keyboardEventsSlice.js",["421","422","423","424","425","426"],[],"import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst NO_COMMAND = 'No Command';\r\nconst NO_CHANGE = 'No Change'\r\nexport const keyboardEventsSlice = createSlice({\r\n    name: 'keyboardEvents',\r\n    initialState: {\r\n        inputMode: NO_COMMAND,\r\n        enableTest: true,\r\n        outcome: NO_CHANGE,\r\n        timeTravelCounter: 0 // used only for testing purposes in undo/redo()\r\n    },\r\n    reducers: {\r\n        enableTest(state, action) {\r\n            state.inputMode = state.inputMode;\r\n            state.enableTest = action.enableTest;\r\n            state.outcome = state.outcome;\r\n            state.timeTravelCounter = state.timeTravelCounter;\r\n        },\r\n        trackEvent(state, action) {\r\n            if(action.payload.inputMode!=undefined) state.inputMode = action.payload.inputMode;\r\n            if(action.payload.outcome!=undefined) state.outcome = action.payload.outcome;\r\n            if(action.payload.timeTravelCounter!=undefined) state.timeTravelCounter = action.payload.timeTravelCounter;\r\n        }\r\n    }\r\n})\r\n\r\nexport const { enableTest, trackEvent } = keyboardEventsSlice.actions;\r\nexport const getKeyEventState = state => [state.keyboardEvents.inputMode, state.keyboardEvents.enableTest, state.keyboardEvents.outcome, state.keyboardEvents.timeTravelCounter];\r\n\r\nexport default keyboardEventsSlice.reducer;","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\store\\reducers\\selectionSlice.js",[],[],"C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\store\\reducers\\tableDimensionsSlice.js",[],[],"C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\store\\reducers\\historySlice.js",["427","428","429","430","431","432","433","434","435","436","437","438","439","440","441","442","443","444","445"],[],"import { createSlice } from '@reduxjs/toolkit'\r\nimport Data from '../../data/data.js'\r\n\r\nexport const historySlice = createSlice({\r\n    name: 'history',\r\n    initialState: {\r\n        loadedSheet: null,\r\n        changeHistory: [new Data()],\r\n        changeHistoryIndex: 0,\r\n        collectedData: new Data(),\r\n        sentData: new Data()\r\n    },\r\n    reducers: {\r\n        loadSheet(state, action) {\r\n            state.loadedSheet = action.payload.loadedSheet;\r\n            state.changeHistory = state.changeHistory;\r\n            state.changeHistoryIndex = state.changeHistoryIndex;\r\n            state.collectedData = state.collectedData;\r\n            state.sentData = state.sentData;\r\n        },\r\n        newHistoryState(state, action) {\r\n            state.loadedSheet = state.loadedSheet;\r\n            state.changeHistory = [...state.changeHistory.slice(0, state.changeHistoryIndex), action.payload.prevRecordedData, action.payload.dataAfterChange];\r\n            state.changeHistoryIndex = state.changeHistoryIndex + 1;\r\n            state.collectedData = action.payload.collectedData;\r\n            state.sentData = state.sentData;\r\n        },\r\n        undo(state, action) {\r\n            state.loadedSheet = state.loadedSheet;\r\n            state.changeHistory = state.changeHistory;\r\n            state.changeHistoryIndex = state.changeHistoryIndex - 1;\r\n            state.collectedData = action.payload.collectedData;\r\n            state.sentData = state.sentData;\r\n        },\r\n        redo(state, action) {\r\n            state.loadedSheet = state.loadedSheet;\r\n            state.changeHistory = state.changeHistory;\r\n            state.changeHistoryIndex = state.changeHistoryIndex + 1;\r\n            state.collectedData = action.payload.collectedData;\r\n            state.sentData = state.sentData;\r\n        },\r\n        clearHistory(state, action) {\r\n            state.loadedSheet = state.loadedSheet;\r\n            state.changeHistory = [new Data()];\r\n            state.changeHistoryIndex = 0;\r\n            state.collectedData = new Data();\r\n            state.sentData = new Data();\r\n\r\n        },\r\n        save(state, action) {\r\n            state.loadedSheet = state.loadedSheet;\r\n            state.changeHistory = state.changeHistory;\r\n            state.changeHistoryIndex = state.changeHistoryIndex;\r\n            state.collectedData = new Data();\r\n            state.sentData = state.collectedData;\r\n\r\n        },\r\n        rollBackAndMerge(state, action) {\r\n            state.loadedSheet = state.loadedSheet;\r\n            state.changeHistory = state.changeHistory;\r\n            state.changeHistoryIndex = state.changeHistoryIndex;\r\n            state.collectedData = merge(state.collectedData, state.sentData);\r\n            state.sentData = new Data();\r\n\r\n        }\r\n    }\r\n});\r\n\r\nfunction merge(collectedData, savedData) {\r\n    return savedData; // should merge with collectedData as well\r\n}\r\n\r\nexport const { loadSheet, newHistoryState, undo, redo, clearHistory, save, rollBackAndMerge } = historySlice.actions;\r\nexport const getLoadedSheet = state => state.history.loadedSheet;\r\nexport const getChangeHistory = state => state.history.changeHistory;\r\nexport const getChangeHistoryIndex = state => state.history.changeHistoryIndex;\r\nexport const getCollectedData = state => state.history.collectedData;\r\nexport const getSentData = state => state.history.sentData;\r\nexport default historySlice.reducer;","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\data\\data.js",[],[],"C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\data\\groupStyles.js",["446","447","448","449","450","451"],[],"class GroupStyles {\r\n    #categories;\r\n    constructor() {\r\n        this.#categories = new Map();\r\n    }\r\n    setGroup(group, styleMap) {\r\n        if (group === null || group === undefined || styleMap === null || styleMap === undefined) throw 'GroupStyles:setGroup: group or styleMap is null/undefined';\r\n        if (!styleMapIsValid(styleMap)) throw 'GroupStyles:setGroup: styleMap is not valid:' + styleMap;\r\n        this.#categories.set(group, styleMap);\r\n    }\r\n    hasGroup(group) {\r\n        if (group === null || group === undefined) throw 'GroupStyles:hasGroup: group is null/undefined';\r\n        return this.#categories.has(group);\r\n    }\r\n    getGroup(group) {\r\n        if (group === null || group === undefined) throw 'GroupStyles:getGroup: group is null/undefined';\r\n        return this.#categories.get(group);\r\n    }\r\n    getGroupEntries() {\r\n        return this.#categories.entries();\r\n    }\r\n    clearGroupEntries() {\r\n        this.#categories.clear();\r\n    }\r\n    size() {\r\n        return this.#categories.size;\r\n    }\r\n}\r\n\r\nfunction styleMapIsValid(styleMap) {\r\n    for(const [property, value] of styleMap.entries()){\r\n        if(!(property == 'width' || property == 'height')) return false;\r\n        if(!(/^\\d+$/.test(value))) return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nexport default GroupStyles;","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\data\\individualEntries.js",["452","453","454","455","456","457","458","459","460","461","462","463","464","465","466","467","468","469","470","471","472","473","474","475","476","477","478","479","480","481","482","483","484","485","486","487","488","489","490","491","492","493","494","495","496","497","498","499","500","501","502","503","504","505","506","507","508","509","510","511","512","513","514"],[],"class Table {\r\n    #styleMap;\r\n    constructor(styleMap) {\r\n        if (!(styleMap instanceof Map)) throw 'Data:Table: styleMap param must be a Map()'\r\n        for (const [property, value] of styleMap.entries()) {\r\n            if (property == 'height' || property == 'width') {\r\n                if (isNaN(parseInt(value, 10)) || parseInt(value, 10) !== value) throw 'Data:Table:constructor:styleMap: value of height/width must be valid num';\r\n            } else throw 'Data:Table:constructor:styleMap: found invalid property' + property;\r\n        }\r\n        this.#styleMap = styleMap;\r\n    }\r\n    getStyleMap() {\r\n        return this.#styleMap;\r\n    }\r\n    putStyle(property, value) {\r\n        if (property === null || property === undefined || value === null || value === undefined) throw 'Data:Table:putStyle: property or value is null/undefined';\r\n        if (property == 'width' || property == 'height') {\r\n            if (isNaN(parseInt(value, 10)) || parseInt(value, 10) != value) throw 'Data:Table:putStyle: value for height/width must be valid num';\r\n        } else throw 'Data:Table:putStyle: found invalid property' + property;\r\n        this.#styleMap.set(property, value);\r\n    }\r\n    setStyleMap(styleMap) {\r\n        if (!(styleMap instanceof Map)) throw 'Data:Table: styleMap param must be a Map()';\r\n        this.#styleMap = styleMap;\r\n    }\r\n    clearStyleMap() {\r\n        this.#styleMap.clear();\r\n    }\r\n}\r\n\r\nclass Row {\r\n    #styleMap;\r\n    #row;\r\n    constructor(styleMap, row) {\r\n        if (!(styleMap instanceof Map)) throw 'Data:Row:constructor: styleMap param must be a Map()';\r\n        for (const [property, value] of styleMap.entries()) {\r\n            if (property == 'height') {\r\n                if (isNaN(parseInt(value, 10)) || parseInt(value, 10) !== value) throw 'Data:Row:constructor:styleMap: value of height must be valid num';\r\n            } else throw 'Data:Row:constructor:styleMap: found invalid property' + property;\r\n        }\r\n        if (isNaN(parseInt(row, 10)) || parseInt(row, 10) !== row) throw 'Data:Row:constructor: row param must be valid num';\r\n        this.#styleMap = styleMap;\r\n        this.#row = row;\r\n    }\r\n    getStyleMap() {\r\n        return this.#styleMap;\r\n    }\r\n    getRow() {\r\n        return this.#row;\r\n    }\r\n    putStyle(property, value) {\r\n        if (property === null || property === undefined || value === null || value === undefined) throw 'Data:Row:putStyle: property or value is null/undefined';\r\n        if (property == 'height') {\r\n            if (isNaN(parseInt(value, 10)) || parseInt(value, 10) != value) throw 'Data:Row:putStyle: value for height must be valid num';\r\n        } else throw 'Data:Row:putStyle: found invalid property' + property;\r\n        this.#styleMap.set(property, value);\r\n    }\r\n    setStyleMap(styleMap) {\r\n        if (!(styleMap instanceof Map)) throw 'Data:Row:setStyleMap: styleMap param must be a Map()';\r\n        this.#styleMap = styleMap;\r\n    }\r\n    setRow(row) {\r\n        if (isNaN(parseInt(row, 10)) || parseInt(row, 10) !== row) throw 'Data:Row:setRow: row param must be valid num';\r\n        this.#row = row;\r\n    }\r\n    clearStyleMap() {\r\n        this.#styleMap.clear();\r\n    }\r\n}\r\n\r\nclass Cell {\r\n    #styleMap;\r\n    #cellRow;\r\n    #cellCol;\r\n    #val;\r\n    constructor(styleMap, row, col, val) {\r\n        if (!(styleMap instanceof Map)) throw 'Data:Cell:constructor: styleMap param must be a Map()';\r\n        for (const [property, value] of styleMap.entries()) {\r\n            if (property == 'height' || property == 'width' || property == 'marginLeft' || property == 'fontWeight'|| property == 'fontSize') {\r\n                if (isNaN(parseInt(value, 10)) || parseInt(value, 10) !== value) throw 'Data:Cell:constructor:styleMap: value of ' + property + ' must be valid num';\r\n            } else if (property == 'fontStyle' || property == 'textDecoration' || property == 'cellColor' || property == 'fontColor' || property == 'horizontalAlignment' || property == 'verticalAlignment' || property == 'fontFamily' || property == 'borders') {\r\n            } else throw 'Data:Cell:constructor:styleMap: found invalid property' + property;\r\n        }\r\n        if (isNaN(parseInt(row, 10)) || parseInt(row, 10) !== row) throw 'Data:Cell:constructor: row param must be valid num';\r\n        if (isNaN(parseInt(col, 10)) || parseInt(col, 10) !== col) throw 'Data:Cell:constructor: col param must be valid num';\r\n        this.#styleMap = styleMap;\r\n        this.#cellRow = row;\r\n        this.#cellCol = col;\r\n        this.#val = val;\r\n    }\r\n    getStyleMap() {\r\n        return this.#styleMap;\r\n    }\r\n    getCellRow() {\r\n        return this.#cellRow;\r\n    }\r\n    getCellCol() {\r\n        return this.#cellCol;\r\n    }\r\n    getVal() {\r\n        return this.#val;\r\n    }\r\n    putStyle(property, value) {\r\n        if (property === null || property === undefined || value === null || value === undefined) throw 'Data:Cell:putStyle: property or value is null/undefined';\r\n        if (property == 'width' || property == 'height' || property == 'marginLeft' || property == 'fontWeight'|| property == 'fontSize') {\r\n            if (isNaN(parseInt(value, 10)) || parseInt(value, 10) != value) throw 'Data:Cell:putStyle: value for ' + property + ' must be valid num';\r\n        } else if (property == 'fontStyle' || property == 'textDecoration' || property == 'cellColor' || property == 'fontColor' || property == 'horizontalAlignment' || property == 'verticalAlignment' || property == 'fontFamily' || property == 'borders') {\r\n        } else throw 'Data:Cell:putStyle: found invalid property' + property;\r\n        this.#styleMap.set(property, value);\r\n    }\r\n    setStyleMap(styleMap) {\r\n        if (!(styleMap instanceof Map)) throw 'Data:Cell:setStyleMap: styleMap param must be a Map()';\r\n        this.#styleMap = styleMap;\r\n    }\r\n    setCellRow(row) {\r\n        if (isNaN(parseInt(row, 10)) || parseInt(row, 10) !== row) throw 'Data:Cell:setCellRow: row param must be valid num';\r\n        this.#cellRow = row;\r\n    }\r\n    setCellCol(col) {\r\n        if (isNaN(parseInt(col, 10)) || parseInt(col, 10) !== col) throw 'Data:Cell:setCellCol: col param must be valid num';\r\n        this.#cellCol = col;\r\n    }\r\n    setVal(val) {\r\n        this.#val = val;\r\n    }\r\n    clearStyleMap() {\r\n        this.#styleMap.clear();\r\n    }\r\n}\r\n\r\nclass IndividualEntries {\r\n    #entries;\r\n    constructor() {\r\n        this.#entries = new Map();\r\n    }\r\n    setEntry(entryKey, styleMap, row, col, val) {\r\n        this.#entries.set(entryKey,\r\n            entryKey == 'table' ? new Table(styleMap) :\r\n                !/.col./.test(entryKey) ? new Row(styleMap, row) :\r\n                    new Cell(styleMap, row, col, val)\r\n        );\r\n    }\r\n    hasEntry(entryKey) {\r\n        return this.#entries.has(entryKey);\r\n    }\r\n    getEntry(entryKey) {\r\n        return this.#entries.get(entryKey);\r\n    }\r\n    getEntries() {\r\n        return this.#entries.entries();\r\n    }\r\n    clear() {\r\n        this.#entries.clear();\r\n    }\r\n    size() {\r\n        return this.#entries.size;\r\n    }\r\n}\r\n\r\nexport default IndividualEntries;","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\MenuPanel\\MenuPanel.js",["515"],[],"import React, { useState, useEffect } from 'react';\r\nimport { batchTurn, testSequence } from '../../tests/sequenceHelpers.js';\r\nimport unitTest from './tests/unitTest.js';\r\nimport './MenuPanel.css'\r\n\r\nconst FILE = 'File';\r\nconst EDIT = 'Edit';\r\nconst VIEW = 'View';\r\nconst FORMAT = 'Format';\r\nconst HELP = 'Help';\r\n\r\nfunction MenuPanel() {\r\n    const [options, setOptions] = useState(<div></div>);\r\n    const [marginLeftMap, setMarginLeftMap] = useState();\r\n\r\n    useEffect(() => {\r\n        let delta = 0;\r\n        let deltaMap = new Map();\r\n        let menuButtons = document.querySelectorAll('.menuPanel__button');\r\n        for (const menuButton of menuButtons.values()) {\r\n            deltaMap.set(menuButton.innerText, delta);\r\n            delta += parseInt(menuButton.offsetWidth, 10);\r\n        };\r\n        setMarginLeftMap(deltaMap);\r\n\r\n        let timer = setInterval(() => {\r\n            if (batchTurn.current == testSequence.get('MenuPanel').turnNumber) {\r\n                unitTest(testSequence.get('MenuPanel').tests);\r\n                clearInterval(timer);\r\n            }\r\n        }, 500);\r\n    }, []);\r\n\r\n    let highlightItem = (e) => {\r\n        e.target.style.backgroundColor = 'rgb(235, 235, 235)';\r\n    }\r\n\r\n    let removeHighlightItem = (e) => {\r\n        e.target.style.backgroundColor = 'white';\r\n    }\r\n\r\n    let revealDropdown = (arg) => {\r\n        switch (arg) {\r\n            case FILE:\r\n                setOptions([\r\n                    <div key='0' className='menuPanel__dropdownOption' onMouseEnter={highlightItem} onMouseLeave={removeHighlightItem}>Import</div>,\r\n                    <div key='1' className='menuPanel__dropdownOption' onMouseEnter={highlightItem} onMouseLeave={removeHighlightItem}>Make a copy</div>,\r\n                    <div key='2' className='menuPanel__dropdownOption' onMouseEnter={highlightItem} onMouseLeave={removeHighlightItem}>Download</div>,\r\n                    <div key='3' className='menuPanel__dropdownOption' onMouseEnter={highlightItem} onMouseLeave={removeHighlightItem}>Print</div>,\r\n                    <div key='4' className='menuPanel__dropdownOption' onMouseEnter={highlightItem} onMouseLeave={removeHighlightItem}>Move to trash</div>,\r\n                ]);\r\n                break;\r\n            case EDIT:\r\n                setOptions([\r\n                    <div key='0' className='menuPanel__dropdownOption' onMouseEnter={highlightItem} onMouseLeave={removeHighlightItem}>Undo</div>,\r\n                    <div key='1' className='menuPanel__dropdownOption' onMouseEnter={highlightItem} onMouseLeave={removeHighlightItem}>Redo</div>,\r\n                    <div key='2' className='menuPanel__dropdownOption' onMouseEnter={highlightItem} onMouseLeave={removeHighlightItem}>Cut</div>,\r\n                    <div key='3' className='menuPanel__dropdownOption' onMouseEnter={highlightItem} onMouseLeave={removeHighlightItem}>Copy</div>,\r\n                    <div key='4' className='menuPanel__dropdownOption' onMouseEnter={highlightItem} onMouseLeave={removeHighlightItem}>Paste</div>,\r\n                    <div key='5' className='menuPanel__dropdownOption' onMouseEnter={highlightItem} onMouseLeave={removeHighlightItem}>Delete</div>\r\n                ]);\r\n                break;\r\n            case VIEW:\r\n                setOptions([\r\n                    <div key='1' className='menuPanel__dropdownOption' onMouseEnter={highlightItem} onMouseLeave={removeHighlightItem}>Zoom</div>,\r\n                    <div key='2' className='menuPanel__dropdownOption' onMouseEnter={highlightItem} onMouseLeave={removeHighlightItem}>Fullscreen</div>,\r\n                ]);\r\n                break;\r\n            case FORMAT:\r\n                setOptions([\r\n                    <div key='0' className='menuPanel__dropdownOption' onMouseEnter={highlightItem} onMouseLeave={removeHighlightItem}>Font Family</div>,\r\n                    <div key='1' className='menuPanel__dropdownOption' onMouseEnter={highlightItem} onMouseLeave={removeHighlightItem}>Font Size</div>,\r\n                    <div key='2' className='menuPanel__dropdownOption' onMouseEnter={highlightItem} onMouseLeave={removeHighlightItem}>Text</div>,\r\n                    <div key='3' className='menuPanel__dropdownOption' onMouseEnter={highlightItem} onMouseLeave={removeHighlightItem}>Font Color</div>,\r\n                    <div key='4' className='menuPanel__dropdownOption' onMouseEnter={highlightItem} onMouseLeave={removeHighlightItem}>Cell Color</div>,\r\n                    <div key='5' className='menuPanel__dropdownOption' onMouseEnter={highlightItem} onMouseLeave={removeHighlightItem}>Alignment</div>,\r\n                    <div key='6' className='menuPanel__dropdownOption' onMouseEnter={highlightItem} onMouseLeave={removeHighlightItem}>Clear formatting</div>,\r\n                ]);\r\n                break;\r\n            case HELP:\r\n                setOptions([\r\n                    <div key='0' className='menuPanel__dropdownOption' onMouseEnter={highlightItem} onMouseLeave={removeHighlightItem}>Help</div>,\r\n                    <div key='1' className='menuPanel__dropdownOption' onMouseEnter={highlightItem} onMouseLeave={removeHighlightItem}>Report bug</div>,\r\n                    <div key='2' className='menuPanel__dropdownOption' onMouseEnter={highlightItem} onMouseLeave={removeHighlightItem}>Privacy Policy</div>,\r\n                    <div key='3' className='menuPanel__dropdownOption' onMouseEnter={highlightItem} onMouseLeave={removeHighlightItem}>Terms of Service</div>,\r\n                    <div key='4' className='menuPanel__dropdownOption' onMouseEnter={highlightItem} onMouseLeave={removeHighlightItem}>Keyboard Shortcuts</div>,\r\n                ]);\r\n                break;\r\n            default: break;\r\n        }\r\n        document.querySelector('#menuPanel__dropdown').style.opacity = 1;\r\n        document.querySelector('#menuPanel__dropdown').style.zIndex = 3;\r\n        document.querySelector('#menuPanel__dropdown').style.left = marginLeftMap.get(arg) + 'px';\r\n        document.querySelector('#menuPanel__dropdown').focus();\r\n    }\r\n\r\n    let hideDropdown = (e) => {\r\n        document.querySelector('#menuPanel__dropdown').style.opacity = 0;\r\n        document.querySelector('#menuPanel__dropdown').style.zIndex = -1;\r\n    }\r\n\r\n\r\n    return (\r\n        <div id='menuPanel'>\r\n            <div id='menuPanel__file' className='menuPanel__button' onMouseEnter={highlightItem} onMouseLeave={removeHighlightItem} onClick={() => revealDropdown(FILE)}>File</div>\r\n            <div id='menuPanel__edit' className='menuPanel__button' onMouseEnter={highlightItem} onMouseLeave={removeHighlightItem} onClick={() => revealDropdown(EDIT)}>Edit</div>\r\n            <div id='menuPanel__view' className='menuPanel__button' onMouseEnter={highlightItem} onMouseLeave={removeHighlightItem} onClick={() => revealDropdown(VIEW)}>View</div>\r\n            <div id='menuPanel__format' className='menuPanel__button' onMouseEnter={highlightItem} onMouseLeave={removeHighlightItem} onClick={() => revealDropdown(FORMAT)}>Format</div>\r\n            <div id='menuPanel__help' className='menuPanel__button' onMouseEnter={highlightItem} onMouseLeave={removeHighlightItem} onClick={() => revealDropdown(HELP)}>Help</div>\r\n            <div tabIndex={-1} id='menuPanel__dropdown' onBlur={hideDropdown}>{options}</div>\r\n        </div>\r\n    );\r\n}\r\nexport default React.memo(MenuPanel);","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\TitleInput\\TitleInput.js",[],[],"C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\SpreadSheetPanel\\SpreadSheetPanel.js",["516","517","518","519","520","521","522","523","524","525","526"],[],"import TestConsolePanel from '../TestConsolePanel/TestConsolePanel.js';\r\nimport React from 'react';\r\nimport { batchTurn, concludeAllTests, concludeAllTestsWhenDone, testSequence } from '../../tests/sequenceHelpers.js';\r\n\r\nimport unitTest from './tests/unitTest.js';\r\nimport appTest from './tests/appTest.js';\r\nimport { loadSheetAPI, saveAPI } from './helpers/API.js';\r\nimport { keyPressed, keyUpped } from './handlers/keyboardEvents/keyboardEvents.js';\r\n\r\nimport TablePanel from '../TablePanel/TablePanel.js'\r\nimport FormatPanel from '../FormatPanel/FormatPanel.js';\r\n\r\nimport './SpreadSheetPanel.css'\r\nimport CellViewPanel from '../CellViewPanel/CellViewPanel.js';\r\n\r\nlet loadedSheet = null; // our only global variable\r\n\r\nclass SpreadSheetPanel extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sheetID: null, // get_URL_parameter(id)\r\n            autoSaveTimer: null,\r\n            title: 'Untitled'\r\n        }\r\n        this.setAutoSaveInterval = this.setAutoSaveInterval.bind(this);\r\n        this.hasSavePayload = this.hasSavePayload.bind(this);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content\" id=\"contentID\" style={{ height: parseInt(window.innerHeight, 10) - 66 + 'px', width: '100%' }}>\r\n                <TestConsolePanel />\r\n                <div id='spreadsheet' tabIndex='-1' onKeyDown={keyPressed} onKeyUp={keyUpped}>\r\n                    <FormatPanel />\r\n                    <CellViewPanel />\r\n                    <TablePanel rows={this.props.rows} cols={this.props.cols} rowHeight={this.props.rowHeight} colWidth={this.props.colWidth} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    componentDidMount() {\r\n        if (this.props.storageURL != null) {\r\n            loadSheetAPI(this.state.sheetID, this.props.storageURL)\r\n                .then(res => {\r\n                    console.log(res);\r\n                    if (res.status == 'success') {\r\n                        let autoSaveInterval = this.setAutoSaveInterval();\r\n                        this.setState({\r\n                            autoSaveInterval: autoSaveInterval,\r\n                        })\r\n                        loadedSheet = res;\r\n                        document.querySelector('#back').removeAttribute('disabled');\r\n                        document.querySelector('#logout').removeAttribute('disabled');\r\n                    } else {\r\n                        if (res.status == 'fail') {\r\n                            if (res.reason == 'missing token') this.props.nav('/');\r\n                            if (res.reason == 'sheetID does not exist') this.props.nav('/sheets')\r\n                        }\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    console.log('Error: loadSheetAPI(): ' + err);\r\n                    clearInterval(this.state.autoSaveTimer);\r\n                    this.props.nav('/');\r\n                });\r\n        }\r\n        let timer = setInterval(() => {\r\n            if (batchTurn.current == testSequence.get('SpreadSheetPanel').turnNumber) {\r\n                unitTest(testSequence.get('SpreadSheetPanel').tests);\r\n                clearInterval(timer);\r\n            }\r\n\r\n        }, 500);\r\n        let timer2 = setInterval(() => {\r\n            if (batchTurn.current == testSequence.get('App').turnNumber) {\r\n                appTest(testSequence.get('App').tests);\r\n                clearInterval(timer2);\r\n            }\r\n        })\r\n        concludeAllTestsWhenDone();\r\n    }\r\n    shouldComponentUpdate() {\r\n        return false; // prevent re-renders from changes to Redux\r\n    }\r\n    setAutoSaveInterval() {\r\n        return setInterval(() => {\r\n            console.log('autoSave()');\r\n            if (this.hasSavePayload()) {\r\n                saveAPI(this.state.sheetID, this.props.storageURL)\r\n                    .then(res => {\r\n                        if (res.status == 'success') {\r\n                            console.log(res.dat);\r\n                            this.props.save();\r\n                        }\r\n                        else console.log('autoSave failed');\r\n                    })\r\n                    .catch(err => {\r\n                        console.log('saveError: ' + err);\r\n                        clearInterval(this.state.autoSaveInterval);\r\n                    });\r\n            }\r\n        }, 3000);\r\n    }\r\n    hasSavePayload() {\r\n        return [...this.props.collectedData.getIndividualEntries()].length != 0 ||\r\n            [...this.props.collectedData.getGroupEntries()].length != 0;\r\n    }\r\n}\r\nexport default SpreadSheetPanel;","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\tests\\sequenceHelpers.js",["527","528"],[],"\r\n// ----------Possible Tests-=------------\r\n// TablePanel: BUILD_SHEET, SELECTION, TEXT_CHANGE, RESIZING\r\n// SpreadSheetPanel: KEY_INPUT\r\n// MenuPanel: MENU_INTERACTION\r\n// FormatPanel: BOLD, ITALIC, STRIKETHROUGH, FONT_FAMILY\r\n// (not implemented) FunctionPanel: FUNCTIONS\r\n// (not implemented) ChartPanel: BAR, LINE, PIE, DOT\r\n//\r\nlet testSequence = new Map([\r\n    ['TablePanel', {\r\n        turnNumber: 1,\r\n        tests: new Set(['BUILD_SHEET', 'SELECTION', 'TEXT_CHANGE', 'RESIZING'])\r\n    }],\r\n    ['SpreadSheetPanel', {\r\n        turnNumber: 5,\r\n        tests: new Set([/*'KEY_INPUT'*/])\r\n    }],\r\n    ['MenuPanel', {\r\n        turnNumber: 3,\r\n        tests: new Set([/*'MENU_INTERACTION'*/])\r\n    }],\r\n    ['FormatPanel', {\r\n        turnNumber: 2,\r\n        tests: new Set(['BOLD', 'ITALIC', 'STRIKETHROUGH', 'FONT_FAMILY', 'FONT_SIZE', 'FONT_COLOR', 'CELL_COLOR', 'BORDERS', 'HORIZONTAL_ALIGNMENT', 'VERTICAL_ALIGNMENT'])\r\n    }],\r\n    ['App', {\r\n        turnNumber: 4,\r\n        tests: new Set([/*'END_TO_END'*/])\r\n    }]\r\n]);\r\n\r\nlet batchTurn = { current: 1 };\r\n\r\nfunction getInLine(turn) {\r\n    let myTurnNumber = turn.nextAvailable++;\r\n    return myTurnNumber;\r\n}\r\n\r\nfunction nextTurn(turn) {\r\n    turn.current++;\r\n}\r\n\r\nfunction concludeTestingBatch(atomicTurn) {\r\n    let timer = setInterval(() => {\r\n        if (atomicTurn.current == atomicTurn.nextAvailable) { // if all turns have finished\r\n            nextTurn(batchTurn);\r\n            clearInterval(timer);\r\n        }\r\n    }, 100);\r\n}\r\n\r\nfunction concludeAllTestsWhenDone() {\r\n    let timer = setInterval(() => {\r\n        if (batchTurn.current == 6) {\r\n            let testNum = document.querySelector('#testConsoleStatus').innerHTML.match(/(\\d+)/)[0];\r\n            document.querySelector('#testConsoleStatus').innerHTML = parseInt(testNum, 10) + 1 + ' SUCCESS';\r\n            clearInterval(timer);\r\n        }\r\n    }, 100);\r\n}\r\n\r\nexport { batchTurn, testSequence, getInLine, nextTurn, concludeTestingBatch, concludeAllTestsWhenDone };","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\MenuPanel\\tests\\unitTest.js",["529","530"],[],"import { menuInteractionTest } from './MenuInteractionTest.js';\r\n\r\nimport { batchTurn , nextTurn, concludeTestingBatch } from './../../../tests/sequenceHelpers.js'\r\n\r\nconst t = {\r\n    MENU_INTERACTION: 'MENU_INTERACTION'\r\n};\r\n\r\nfunction unitTest(testsToRun) {\r\n    if (testsToRun.size == 0) {\r\n        nextTurn(batchTurn);\r\n        return;\r\n    }\r\n    let atomicTurn = {\r\n        current: 1,\r\n        nextAvailable: 1\r\n    };\r\n    for (const test of testsToRun.values()) {\r\n        switch (test) {\r\n            case t.MENU_INTERACTION:\r\n                //menuInteractionTests(atomicTurn);\r\n                break;\r\n            default: break;\r\n        }\r\n    }\r\n    concludeTestingBatch(atomicTurn);\r\n}\r\n\r\nexport default unitTest;","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\TablePanel\\TablePanel.js",["531","532"],[],"import React, { useState, useEffect } from 'react';\r\nimport loadedSheet from '../SpreadSheetPanel/SpreadSheetPanel.js';\r\nimport { buildSheet, AxisX, AxisY, table } from './helpers/buildSheet/buildSheet.js'\r\nimport { applyResizers } from './handlers/resizingHandler/resizingHandler.js'\r\nimport applyCellHandlers from './handlers/cellHandler/cellHandler.js';\r\nimport { applyScrollSnapHandlers } from './handlers/scrollSnapHandler/scrollSnapHandler.js';\r\nimport { batchTurn, testSequence } from '../../tests/sequenceHelpers.js';\r\nimport unitTest from './tests/unitTest.js';\r\nimport './TablePanel.css';\r\n\r\nfunction TablePanel(props) {\r\n    let { rows, cols, rowHeight, colWidth } = props;\r\n    let [tableHeight, tableWidth] = buildSheet(loadedSheet, parseInt(rows, 10), parseInt(cols, 10), parseInt(rowHeight, 10), parseInt(colWidth, 10))\r\n    const [sheetAxisX, setSheetAxisX] = useState(AxisX);\r\n    const [sheetAxisY, setSheetAxisY] = useState(AxisY);\r\n    const [sheetTable, setSheetTable] = useState(table);\r\n\r\n    useEffect(() => {\r\n        applyResizers(); // resizers.js\r\n        applyCellHandlers();\r\n        applyScrollSnapHandlers();\r\n\r\n        let loadTimer = setInterval(() => {\r\n            if (loadedSheet != null) {\r\n                buildSheet(loadedSheet, parseInt(rows, 10), parseInt(cols, 10), parseInt(rowHeight, 10), parseInt(colWidth, 10));\r\n                setSheetAxisX(AxisX);\r\n                setSheetAxisY(AxisY);\r\n                setSheetTable(table);\r\n                clearInterval(loadTimer);\r\n            }\r\n        }, 500);\r\n\r\n        let timer = setInterval(() => {\r\n            if (batchTurn.current == testSequence.get('TablePanel').turnNumber) {\r\n                unitTest(testSequence.get('TablePanel').tests, loadedSheet, rows, cols, rowHeight, colWidth);\r\n                clearInterval(timer);\r\n            }\r\n        }, 500);\r\n    }, []);\r\n\r\n    return (\r\n        <div id='tableDiv' tabIndex='-1'>\r\n            <div id='table' style={{ position: 'absolute', height: '100%', width: '100%' }}>\r\n                <div className='row0 col0 origin' style={{ height: '22px', width: '50px', boxShadow: 'inset -4px -4px 0 1px #ACACAC', zIndex: 4 }}></div>\r\n                {sheetAxisX}\r\n                {sheetAxisY}\r\n                <div id='tableEntryCellsWindow'>\r\n                    <div id='scrollBarLayer' style={{ width: tableWidth - 50 + 'px', height: tableHeight - 22 + 'px' }}></div>\r\n                </div>\r\n                <div id='tableEntryCells' style={{ position: 'relative', height: 'calc(100% - 38px)', width: 'calc(100% - 50px - 18px)', marginLeft: '50px', marginTop: '22px', overflow: 'hidden' }}>\r\n                    {sheetTable}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(TablePanel);","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\TestConsolePanel\\TestConsolePanel.js",[],[],"C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\FormatPanel.js",["533","534"],[],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { getSelectionEntries } from './../../store/reducers/selectionSlice.js';\r\nimport { batchTurn, testSequence } from '../../tests/sequenceHelpers.js';\r\nimport unitTest from './tests/unitTest.js';\r\nimport { undo, redo } from './../../data/modifiers/undoRedo.js'\r\n\r\nimport { FontFamily } from './components/FontFamily/FontFamily.js';\r\nimport { FontSize } from './components/FontSize/FontSize.js';\r\nimport Bold from './components/Bold/Bold.js';\r\nimport Italic from './components/Italic/Italic.js';\r\nimport Strikethrough from './components/Strikethrough/Strikethrough.js';\r\nimport { FontColor } from './components/FontColor/FontColor.js';\r\n\r\nimport { CellColor } from './components/CellColor/CellColor.js';\r\nimport { Borders } from './components/Borders/Borders.js';\r\nimport { HorizontalAlignment } from './components/HorizontalAlignment/HorizontalAlignment.js';\r\nimport { VerticalAlignment } from './components/VerticalAlignment/VerticalAlignment.js';\r\n\r\nimport './FormatPanel.css'\r\n\r\nlet colors = [\r\n    ['white', 'black', '#334155', '#94a3b8', '#cbd5e1'],\r\n    ['#dc2626', '#991b1b', '#ef4444', '#f87171', '#fca5a5'],\r\n    ['#f97316', '#c2410c', '#ea580c', '#fb923c', '#fdba74'],\r\n    ['#fde047', '#a16207', '#ca8a04', '#facc15', '#fef08a'],\r\n    ['#a3e635', '#3f6212', '#65a30d', '#84cc16', '#d9f99d'],\r\n    ['#22c55e', '#15803d', '#16a34a', '#86efac', '#bbf7d0'],\r\n    ['#67e8f9', '#0e7490', '#0891b2', '#22d3ee', '#a5f3fc'],\r\n    ['#3b82f6', '#1e3a8a', '#1d4ed8', '#60a5fa', '#93c5fd'],\r\n    ['#a855f7', '#581c87', '#7e22ce', '#9333ea', '#d8b4fe'],\r\n    ['#d946ef', '#86198f', '#c026d3', '#e879f9', '#f0abfc'],\r\n    ['#ec4899', '#9d174d', '#db2777', '#f472b6', '#f9a8d4'],\r\n];\r\n\r\nfunction FormatPanel() {\r\n    const selectionEntries = useSelector(getSelectionEntries);\r\n\r\n    useEffect(() => {\r\n        let timer = setInterval(() => {\r\n            if (batchTurn.current == testSequence.get('FormatPanel').turnNumber) {\r\n                unitTest(testSequence.get('FormatPanel').tests);\r\n                clearInterval(timer);\r\n            }\r\n        }, 500);\r\n    }, []);\r\n\r\n    let undoHandler = (e) => {\r\n        undo();\r\n    }\r\n\r\n    let redoHandler = (e) => {\r\n        redo();\r\n    }\r\n\r\n    let copyHandler = (e) => {\r\n        for (const cell of selectionEntries.values()) {\r\n            let propertyMap = new Map();\r\n            let [rowNum, colNum] = cell.split(',');\r\n            let cellValueDiv = document.querySelector(`.row${rowNum}.col${colNum}>.cellValueDiv`);\r\n            let cellValue = cellValueDiv.querySelector('.cellValue');\r\n            propertyMap.set('value', cellValue.innerText);\r\n            propertyMap.set('fontSize', cellValue.style.fontSize);\r\n            propertyMap.set('fontWeight', cellValue.style.fontWeight);\r\n            propertyMap.set('fontStyle', cellValue.style.fontStyle);\r\n            propertyMap.set('textDecoration', cellValue.style.textDecoration);\r\n            propertyMap.set('color', cellValue.style.color);\r\n            propertyMap.set('cellColor', cellValueDiv.style.backgroundColor);\r\n            propertyMap.set('borders', cellValueDiv.style.borderTop + ' ' + cellValueDiv.style.borderRight + ' ' + cellValueDiv.style.borderBottom + ' ' + cellValueDiv.style.borderLeft);\r\n            propertyMap.set('horizontalAlign', cellValue.style.textAlign);\r\n            propertyMap.set('verticalAlign', cellValueDiv.style.justifyContent);\r\n            //console.log(propertyMap);\r\n        }\r\n    }\r\n\r\n    let cutHandler = (e) => {\r\n    }\r\n\r\n    let formatPaintHandler = (e) => {\r\n    }\r\n\r\n    let pasteHandler = (e) => {\r\n    }\r\n\r\n    let darken = (e) => {\r\n        e.target.classList.add('darken');\r\n    }\r\n\r\n    let release = (e) => {\r\n        e.target.classList.remove('darken');\r\n    }\r\n\r\n    return (\r\n        <div id='formatPanel'>\r\n            <img className='keyboardEventBtn' onClick={undoHandler} onMouseDown={darken} onMouseUp={release} onMouseLeave={release} src='undo.png' alt='undo' />\r\n            <img className='keyboardEventBtn' onClick={redoHandler} onMouseDown={darken} onMouseUp={release} onMouseLeave={release} src='redo.png' alt='redo' />\r\n            <div style={{ height: '26px', width: '26px', borderRadius: '5px' }}>\r\n                <div style={{ position: 'absolute', height: '18px', width: '18px', padding: '4px', borderRadius: '5px', zIndex: 3, backgroundColor: 'rgb(235, 235, 235)', opacity: '0.7' }}>\r\n                </div>\r\n                <img className='keyboardEventBtn' onClick={copyHandler} onMouseDown={darken} onMouseUp={release} onMouseLeave={release} src='copy.png' alt='copy' />\r\n            </div>\r\n            <div style={{ height: '26px', width: '26px', borderRadius: '5px' }}>\r\n                <div style={{ position: 'absolute', height: '18px', width: '18px', padding: '4px', borderRadius: '5px', zIndex: 3, backgroundColor: 'rgb(235, 235, 235)', opacity: '0.7' }}>\r\n                </div>\r\n                <img className='keyboardEventBtn' onClick={cutHandler} onMouseDown={darken} onMouseUp={release} onMouseLeave={release} src='cut.png' alt='cut' />\r\n            </div>\r\n            <div style={{ height: '26px', width: '26px', borderRadius: '5px' }}>\r\n                <div style={{ position: 'absolute', height: '18px', width: '18px', padding: '4px', borderRadius: '5px', zIndex: 3, backgroundColor: 'rgb(235, 235, 235)', opacity: '0.7' }}>\r\n                </div>\r\n                <img className='keyboardEventBtn' onClick={formatPaintHandler} onMouseDown={darken} onMouseUp={release} onMouseLeave={release} src='formatPaint.png' alt='formatPaint' />\r\n            </div>\r\n            <div style={{ height: '26px', width: '26px', borderRadius: '5px' }}>\r\n                <div style={{ position: 'absolute', height: '18px', width: '18px', padding: '4px', borderRadius: '5px', zIndex: 3, backgroundColor: 'rgb(235, 235, 235)', opacity: '0.7' }}>\r\n                </div>\r\n                <img className='keyboardEventBtn' onClick={pasteHandler} onMouseDown={darken} onMouseUp={release} onMouseLeave={release} src='palm.png' alt='paste' />\r\n            </div>\r\n            <p className='formatPanel__divider'></p>\r\n            <FontFamily selectionEntries={selectionEntries} />\r\n            <p className='formatPanel__divider'></p>\r\n            <FontSize selectionEntries={selectionEntries} />\r\n            <p className='formatPanel__divider'></p>\r\n            <Bold selectionEntries={selectionEntries} />\r\n            <Italic selectionEntries={selectionEntries} />\r\n            <Strikethrough selectionEntries={selectionEntries} />\r\n            <FontColor selectionEntries={selectionEntries} colors={colors} />\r\n            <p className='formatPanel__divider'></p>\r\n            <CellColor selectionEntries={selectionEntries} colors={colors} />\r\n            <Borders selectionEntries={selectionEntries} />\r\n            <HorizontalAlignment selectionEntries={selectionEntries} />\r\n            <VerticalAlignment selectionEntries={selectionEntries} />\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default FormatPanel;","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\SpreadSheetPanel\\helpers\\API.js",["535"],[],"import { store } from './../../../store/store.js'\r\n\r\nlet loadSheetAPI = async (id, rootURL) => {\r\n    const response = await fetch(rootURL + 'loadSheet/' + id, { credentials: 'include' });\r\n    const body = await response.json();\r\n\r\n    if (response.status !== 200) {\r\n        throw Error(body.message)\r\n    }\r\n    return body;\r\n}\r\nlet saveAPI = async (id, rootURL) => {\r\n    let exposedCollectedData = exposeCollectedData(store.getState().history.collectedData);\r\n    const response = await fetch(rootURL + 'saveSheet/' + id, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            exposedCollectedData: exposedCollectedData\r\n        }),\r\n        credentials: 'include'\r\n    });\r\n    const body = response.json();\r\n    if (response.status !== 200) {\r\n        throw Error(body.message)\r\n    }\r\n    return body;\r\n}\r\nfunction exposeCollectedData(data) {\r\n    let individualArr = [];\r\n    for (const [entryKey, value] of data.getIndividualEntries()) {\r\n        let individual = { entryKey: entryKey };\r\n        individual.styleMap = [...[...value.getStyleMap().entries()].map(styleEntry => {\r\n            return [styleEntry[0], styleEntry[1]];\r\n        })];\r\n        if (entryKey != 'sheet' && !/.col\\d+/.test(entryKey)) individual.row = value.getRow();\r\n        else if (/.col\\d+/.test(entryKey)) {\r\n            individual.row = value.getCellRow();\r\n            individual.col = value.getCellCol();\r\n            individual.val = value.getVal();\r\n        }\r\n        individualArr.push(individual);\r\n    }\r\n    let groupArr = [];\r\n    for (const [groupName, styleMap] of data.getGroupEntries()) {\r\n        let group = { groupName: groupName };\r\n        group.styleMap = [...[...styleMap.entries()].map(styleEntry => {\r\n            return [styleEntry[0], styleEntry[1]];\r\n        })];\r\n        groupArr.push(group);\r\n    }\r\n    return { individualData: individualArr, groupData: groupArr };\r\n}\r\n\r\nexport { loadSheetAPI, saveAPI };","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\SpreadSheetPanel\\tests\\unitTest.js",["536"],[],"import { keyInputTest } from '../handlers/keyboardEvents/test.js';\r\n\r\nimport { batchTurn , nextTurn, concludeTestingBatch } from './../../../tests/sequenceHelpers.js'\r\n\r\nconst t = {\r\n    KEY_INPUT: 'KEY_INPUT'\r\n};\r\n\r\nfunction unitTest(testsToRun) {\r\n    if (testsToRun.size == 0) {\r\n        nextTurn(batchTurn);\r\n        return;\r\n    }\r\n    let atomicTurn = {\r\n        current: 1,\r\n        nextAvailable: 1\r\n    };\r\n    for (const test of testsToRun.values()) {\r\n        switch (test) {\r\n            case t.KEY_INPUT:\r\n                keyInputTest(atomicTurn);\r\n                break;\r\n            default: break;\r\n        }\r\n    }\r\n    concludeTestingBatch(atomicTurn);\r\n}\r\n\r\nexport default unitTest;","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\SpreadSheetPanel\\tests\\appTest.js",["537"],[],"import endToEnd from './../../../tests/endToEnd.js'\r\n\r\nimport { batchTurn, nextTurn, concludeTestingBatch } from './../../../tests/sequenceHelpers.js'\r\n\r\nconst t = {\r\n    END_TO_END: 'END_TO_END',\r\n    INTEGRATION: 'INTEGRATION'\r\n};\r\n\r\nfunction appTest(testsToRun) {\r\n    if (testsToRun.size == 0) {\r\n        nextTurn(batchTurn);\r\n        return;\r\n    }\r\n    let atomicTurn = {\r\n        current: 1,\r\n        nextAvailable: 1\r\n    };\r\n    for (const test of testsToRun.values()) {\r\n        switch (test) {\r\n            case t.END_TO_END:\r\n                endToEnd(atomicTurn);\r\n                break;\r\n            case t.INTEGRATION: break;\r\n            default: break;\r\n        }\r\n    }\r\n    concludeTestingBatch(atomicTurn);\r\n}\r\n\r\nexport default appTest;","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\CellViewPanel\\CellViewPanel.js",["538","539"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from 'react-redux';\r\nimport { getSelectionEntries } from '../../store/reducers/selectionSlice.js';\r\nimport './CellViewPanel.css'\r\n\r\nfunction CellViewPanel() {\r\n    const selectionEntries = useSelector(getSelectionEntries);\r\n\r\n    return (\r\n        <div id='cellViewPanel'>\r\n            <div style={{ width: '70px', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                <p id='cellViewPanel__cellAddress'>{getAddress(selectionEntries)}</p>\r\n                <p id='cellViewPanel__divider'></p>\r\n            </div>\r\n            <p id='cellViewPanel__cellTextValue'></p>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction getAddress(selectedEntries) {\r\n    let cell = selectedEntries.values().next().value;\r\n    let [rowNum, colNum] = cell.split(',');\r\n    let letter = String.fromCharCode(parseInt(colNum, 10) % 26 + 64);\r\n    return letter + rowNum;\r\n}\r\n\r\nexport default CellViewPanel;","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\SpreadSheetPanel\\handlers\\keyboardEvents\\keyboardEvents.js",["540"],[],"import { store } from './../../../../store/store.js'\r\nimport { trackEvent } from \"../../../../store/reducers/keyboardEventsSlice.js\";\r\nimport { undo, redo } from './../../../../data/modifiers/undoRedo.js'\r\n\r\nconst NO_COMMAND = 'No Command';\r\nconst CONTROL = 'Control';\r\nconst META = 'Meta'\r\nconst SHIFT = 'Shift';\r\nconst CONTROL_SHIFT = 'Control_Shift';\r\nconst NO_CHANGE = 'No Change';\r\n\r\n// Handle CTRL+Z/Y (undo/redo) and CTRL/SHIFT selections.\r\nfunction keyPressed(e) {\r\n    console.log(e.key.padStart(7, ' ') + ' DOWN');\r\n    let deleteThisVariable;\r\n    switch (store.getState().keyboardEvents.inputMode) {\r\n        case NO_COMMAND:\r\n            if (e.key === CONTROL || e.key === META) {\r\n                store.dispatch(trackEvent({ inputMode: CONTROL, outcome: NO_CHANGE }))\r\n            } else if (e.key === SHIFT) {\r\n                store.dispatch(trackEvent({ inputMode: SHIFT, outcome: NO_CHANGE }))\r\n            }\r\n            break;\r\n        case CONTROL:\r\n            if (e.key === 'z') undo();\r\n            else if (e.key === 'y') redo();\r\n            else if (e.key === 'x') deleteThisVariable = 0;\r\n            else if (e.key === 'c') deleteThisVariable = 0;\r\n            else if (e.key === 'v') deleteThisVariable = 0;\r\n            break;\r\n        case SHIFT:\r\n            break;\r\n        case CONTROL_SHIFT:\r\n            if (e.key === 'f') deleteThisVariable = 0; //formatPaint\r\n            break;\r\n        default: break;\r\n    }\r\n}\r\nfunction keyUpped(e) {\r\n    console.log(e.key.padStart(7, ' ') + ' UP');\r\n    switch (store.getState().keyboardEvents.inputMode) {\r\n        case NO_COMMAND:\r\n            store.dispatch(trackEvent({ outcome: NO_CHANGE }))\r\n            break;\r\n        case CONTROL:\r\n        case SHIFT:\r\n            if (e.key === CONTROL || e.key === META || e.key === SHIFT) {\r\n                store.dispatch(trackEvent({ inputMode: NO_COMMAND, outcome: NO_CHANGE }))\r\n            } else store.dispatch(trackEvent({ outcome: NO_CHANGE }))\r\n            break;\r\n        default:\r\n            store.dispatch(trackEvent({ inputMode: NO_COMMAND, outcome: NO_CHANGE }))\r\n            break;\r\n    }\r\n}\r\n\r\nexport { keyPressed, keyUpped };","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\MenuPanel\\tests\\MenuInteractionTest.js",["541","542","543"],[],"import { getInLine, nextTurn } from '../../../tests/sequenceHelpers.js'\r\nimport { store } from '../../../store/store.js'\r\n\r\nfunction menuInteractionTest(turn) {\r\n    let axisCellsX = document.querySelectorAll('.AxisX');\r\n    let axisCellsY = document.querySelectorAll('.AxisY');\r\n    let resizeSelections = [[axisCellsX, 10], [axisCellsY, 10], [[axisCellsX[0]], -20], [axisCellsY, -12], [[axisCellsX[0]], 20], [[axisCellsY[0]], 12]]\r\n    try {\r\n        if (resizeSelections.length > 0) checkReactionOfMenuInteractionOnTable(1, resizeSelections[0], turn, true, resizeSelections.length);\r\n        for (let i = 1; i < resizeSelections.length; ++i) checkReactionOfMenuInteractionOnTable(i + 1, resizeSelections[i], turn, false, resizeSelections.length);\r\n    } catch (e) {\r\n        console.log('formatErr: checkReactionOfFormatChange param error: ' + e);\r\n        logError(null, e);\r\n    }\r\n}\r\n\r\nfunction checkReactionOfMenuInteractionOnTable(){\r\n\r\n}\r\n\r\nfunction logError(testCaseIndex, e) {\r\n    document.querySelector('#testConsoleError').innerHTML = 'Err: menuInteractionTest(): { testCaseIndex: ' + testCaseIndex + ' } : ' + e;\r\n    let testNum = document.querySelector('#testConsoleStatus').innerHTML.match(/(\\d+)/)[0];\r\n    document.querySelector('#testConsoleStatus').innerHTML = parseInt(testNum, 10) + 1 + ' FAIL';\r\n}\r\n\r\nexport { menuInteractionTest, checkReactionOfMenuInteractionOnTable };","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\tests\\endToEnd.js",["544","545","546","547","548","549","550","551","552","553","554"],[],"import { checkReactionOfResizing } from \"../components/TablePanel/handlers/resizingHandler/test\";\r\nimport { checkReactionOfTextChange } from \"../components/TablePanel/handlers/cellHandler/textChangeHandler/test\";\r\nimport { validateSequence, checkReactionOfKeyInput } from \"../components/SpreadSheetPanel/handlers/keyboardEvents/test\";\r\nimport { checkReactionOfSingleClickSelection, checkReactionOfDoubleClickSelection } from \"../components/TablePanel/handlers/cellHandler/selectionHandler/test\";\r\nimport { UNDO_DISPATCH, UNDO_FINISH, REDO_DISPATCH, REDO_FINISH, FLUFF_FULL } from './../components/SpreadSheetPanel/handlers/keyboardEvents/keyMacros.js'\r\n\r\nconst X_AXIS = 'X_AXIS';\r\nconst Y_AXIS = 'Y_AXIS';\r\n\r\nfunction endToEnd(atomicTurn) {\r\n\r\n    // sequence of atomic tests\r\n    let axisCellsX = document.querySelectorAll('.AxisX');\r\n    let axisCellsY = document.querySelectorAll('.AxisY');\r\n    let resizeEvents = [[Y_AXIS, [1, 2, 3], 20], [Y_AXIS, [2, 5, 6], 10], [Y_AXIS, [1, 2, 3], -10], [X_AXIS, [2, 5, 6], -20]];\r\n    let keyEvents = [UNDO_DISPATCH, UNDO_FINISH, UNDO_DISPATCH, UNDO_FINISH, REDO_DISPATCH, REDO_FINISH, REDO_DISPATCH, REDO_FINISH, REDO_DISPATCH, REDO_FINISH, FLUFF_FULL];\r\n    let clickSelections = [[4, 5], [1, 1], [3, 7], [8, 2], [2, 4]];\r\n    let textEntries = ['blah', 'burger', 'hello', 'world', 'apple', 'fun'];\r\n\r\n    let totalKeyInputTestCases = validateSequence(keyEvents);\r\n    if (totalKeyInputTestCases == -1) return;\r\n    let keyInputTestCaseIndex = 1;\r\n    try {\r\n        /*for (let i = 0; i < clickSelections.length; ++i) {\r\n            if (i == 0) checkReactionOfSingleClickSelection(clickSelections[i][0], clickSelections[i][1], atomicTurn, true);\r\n            else checkReactionOfSingleClickSelection(clickSelections[i][0], clickSelections[i][1], atomicTurn);\r\n        }*/\r\n        for (let i = 0; i < clickSelections.length; ++i) {\r\n            if (i == 0) checkReactionOfDoubleClickSelection(i + 1, clickSelections[i], atomicTurn, true, clickSelections.length);\r\n            else checkReactionOfDoubleClickSelection(i + 1, clickSelections[i], atomicTurn, false, clickSelections.length);\r\n            if (i < textEntries.length) checkReactionOfTextChange(i + 1, [...clickSelections[i], textEntries[i]], atomicTurn, false, clickSelections.length)\r\n        }\r\n        let keyState = new Set();\r\n        for (let i = 0; i < keyEvents.length; ++i) {\r\n            for (let j = 0; j < keyEvents[i].length; ++j) {\r\n                if (i == 0 && j == 0) checkReactionOfKeyInput(keyInputTestCaseIndex, keyEvents[i][j], keyState, atomicTurn, true, totalKeyInputTestCases);\r\n                else checkReactionOfKeyInput(++keyInputTestCaseIndex, keyEvents[i][j], keyState, atomicTurn, false, totalKeyInputTestCases);\r\n            }\r\n        }\r\n        for (let i = 0; i < resizeEvents.length; ++i) {\r\n            let chosenCells = [];\r\n            if (resizeEvents[i][0] == X_AXIS) resizeEvents[i][1].map(cellNum => chosenCells.push(axisCellsX[cellNum]))\r\n            else if (resizeEvents[i][0] == Y_AXIS) resizeEvents[i][1].map(cellNum => chosenCells.push(axisCellsY[cellNum]))\r\n            if (i == 0) checkReactionOfResizing(i + 1, [chosenCells, resizeEvents[i][2]], atomicTurn, true, resizeEvents.length);\r\n            else checkReactionOfResizing(i + 1, [chosenCells, resizeEvents[i][2]], atomicTurn, false, resizeEvents.length);\r\n        }\r\n        keyInputTestCaseIndex = 1;\r\n        keyState = new Set();\r\n        for (let i = 0; i < keyEvents.length; ++i) {\r\n            for (let j = 0; j < keyEvents[i].length; ++j) {\r\n                if (i == 0 && j == 0) checkReactionOfKeyInput(keyInputTestCaseIndex, keyEvents[i][j], keyState, atomicTurn, true, totalKeyInputTestCases);\r\n                else checkReactionOfKeyInput(++keyInputTestCaseIndex, keyEvents[i][j], keyState, atomicTurn, false, totalKeyInputTestCases);\r\n            }\r\n        }\r\n        let timer = setInterval(() => {\r\n            if (atomicTurn.current == atomicTurn.nextAvailable) {\r\n                let testNum = document.querySelector('#testConsoleStatus').innerHTML.match(/(\\d+)/)[0];\r\n                document.querySelector('#testConsoleStatus').innerHTML = parseInt(testNum, 10) + 1 + ' SUCCESS';\r\n                clearInterval(timer);\r\n            }\r\n        }, 500)\r\n    } catch (e) {\r\n        console.log('Error: ' + e);\r\n    }\r\n}\r\n\r\nexport default endToEnd;","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\TablePanel\\tests\\unitTest.js",["555"],[],"import { resizersTests } from '../handlers/resizingHandler/test.js'\r\nimport { selectionTest } from '../handlers/cellHandler/selectionHandler/test.js';\r\nimport { textChangeTest } from '../handlers/cellHandler/textChangeHandler/test.js';\r\nimport buildSheetTest from '../../TablePanel/helpers/buildSheet/test.js';\r\n\r\nimport { batchTurn, nextTurn, concludeTestingBatch } from './../../../tests/sequenceHelpers.js'\r\n\r\nconst t = {\r\n    BUILD_SHEET: 'BUILD_SHEET',\r\n    SELECTION: 'SELECTION',\r\n    TEXT_CHANGE: 'TEXT_CHANGE',\r\n    RESIZING: 'RESIZING'\r\n};\r\n\r\nfunction unitTest(testsToRun, loadedSheet, rows, cols, defaultCellHeight, defaultCellWidth) {\r\n    if (testsToRun.size == 0) {\r\n        nextTurn(batchTurn);\r\n        return;\r\n    }\r\n    let atomicTurn = {\r\n        current: 1,\r\n        nextAvailable: 1\r\n    };\r\n    for (const test of testsToRun.values()) {\r\n        switch (test) {\r\n            case t.BUILD_SHEET:\r\n                buildSheetTest(atomicTurn, loadedSheet, rows, cols, defaultCellHeight, defaultCellWidth);\r\n                break;\r\n            case t.SELECTION:\r\n                selectionTest(atomicTurn);\r\n                break;\r\n            case t.TEXT_CHANGE:\r\n                textChangeTest(atomicTurn);\r\n                break;\r\n            case t.RESIZING:\r\n                resizersTests(atomicTurn);\r\n                break;\r\n            default: break;\r\n        }\r\n    }\r\n    concludeTestingBatch(atomicTurn);\r\n}\r\n\r\nexport default unitTest;","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\SpreadSheetPanel\\handlers\\keyboardEvents\\test.js",["556","557","558","559","560","561","562","563","564","565","566","567","568","569","570","571","572","573","574","575","576","577","578","579","580","581","582","583","584","585","586","587","588","589","590","591","592","593","594","595","596","597","598","599","600","601","602","603","604","605","606","607","608","609","610","611","612","613","614","615","616","617","618","619","620","621","622","623","624","625","626","627","628","629","630","631","632","633","634","635","636"],[],"import { store } from '../../../../store/store.js'\r\nimport { logError, logSuccess } from '../../../../tests/helper.js';\r\nimport { getInLine, nextTurn } from '../../../../tests/sequenceHelpers.js'\r\nimport { DOWN, CONTROL, META, SHIFT, Z, Y, UNDO_DISPATCH, UNDO_FINISH, REDO_DISPATCH, REDO_FINISH, FLUFF_FULL } from './keyMacros.js'\r\nconst UNDO = 'Undo';\r\nconst REDO = 'Redo';\r\nconst NO_CHANGE = 'No Change'\r\n\r\nconst WAIT_IN_QUEUE = -1;\r\nconst ARRANGE_AND_ACTION = 0;\r\nconst ASSERT = 1;\r\n\r\nfunction keyInputTest(atomicTurn) {\r\n    let events = [UNDO_DISPATCH, UNDO_FINISH, UNDO_DISPATCH, UNDO_FINISH, REDO_DISPATCH, REDO_FINISH, REDO_DISPATCH, REDO_FINISH, REDO_DISPATCH, REDO_FINISH, FLUFF_FULL];\r\n    let totalTestCases = validateSequence(events);\r\n    if (totalTestCases == -1) return;\r\n    let testCaseIndex = 1;\r\n\r\n    try {\r\n        let keyState = new Set();\r\n        for (let i = 0; i < events.length; ++i) {\r\n            for (let j = 0; j < events[i].length; ++j) {\r\n                if (i == 0 && j == 0) checkReactionOfKeyInput(testCaseIndex, events[i][j], keyState, atomicTurn, true, totalTestCases);\r\n                else checkReactionOfKeyInput(++testCaseIndex, events[i][j], keyState, atomicTurn, false, totalTestCases);\r\n            }\r\n        }\r\n    } catch (e) {\r\n        console.log('Error: checkReactionOfKeyInput param error: ' + e);\r\n        logError(null, e);\r\n    }\r\n}\r\n\r\nfunction checkReactionOfKeyInput(testCaseIndex, keyEvent, keyState, atomicTurn, isFirstCall, totalTestCases) {\r\n    let sheet = document.querySelector('#spreadsheet');\r\n    let predictedKeyOutcome = null;\r\n    let predictedChange = null;\r\n    let recordedTimeTravelCounter;\r\n    let myTurnNumber = getInLine(atomicTurn);\r\n    let stage = WAIT_IN_QUEUE;\r\n\r\n    let timer = setInterval(() => {\r\n        try {\r\n            let storeState = store.getState();\r\n            let currentTimeTravelCounter = storeState.keyboardEvents.timeTravelCounter;\r\n            let outcome = storeState.keyboardEvents.outcome;\r\n            switch (stage) {\r\n                case WAIT_IN_QUEUE:\r\n                    if (atomicTurn.current == myTurnNumber) {\r\n                        if (isFirstCall) console.log('\\n--------KEY INPUT TEST--------------------');\r\n                        stage = ARRANGE_AND_ACTION;\r\n                    }\r\n                    break;\r\n                case ARRANGE_AND_ACTION:\r\n                    recordedTimeTravelCounter = currentTimeTravelCounter;\r\n                    predictedKeyOutcome = updateKeyState(keyState, keyEvent);\r\n                    if (predictedKeyOutcome != NO_CHANGE) {\r\n                        predictedChange = capturePredictedChange(predictedKeyOutcome, timer);\r\n                    } else predictedChange = NO_CHANGE;\r\n                    sheet.dispatchEvent(new KeyboardEvent(keyEvent.status == DOWN ? 'keydown' : 'keyup', { key: keyEvent.id, bubbles: true }));\r\n                    stage = ASSERT;\r\n                    break;\r\n                case ASSERT:\r\n                    if (predictionMatchesActualEvent(predictedKeyOutcome, outcome, recordedTimeTravelCounter, currentTimeTravelCounter, keyEvent)) {\r\n                        console.log('-------------- Event: ' + predictedKeyOutcome);\r\n                        compareStoreAndDOM(predictedKeyOutcome, predictedChange);\r\n                    }\r\n                    if (testCaseIndex == totalTestCases) logSuccess('keyInputTest()', totalTestCases);\r\n                    nextTurn(atomicTurn);\r\n                    clearInterval(timer);\r\n                    break;\r\n                default: break;\r\n            }\r\n        } catch (e) {\r\n            let errMsg = 'Err: checkReactionOfKeyInput(): { testCaseIndex: ' + testCaseIndex + ' } : ' + e;\r\n            console.log(errMsg);\r\n            logError(errMsg);\r\n            nextTurn(atomicTurn);\r\n            clearInterval(timer);\r\n        }\r\n    }, 100);\r\n}\r\n\r\n// Check that no impossible events happen, like CTRL_UP w/o a corresponding prior CTRL_DOWN\r\n// Also ensure the sequence is finished, that all 'DOWN' events are followed by corresponding 'UP' events\r\nfunction validateSequence(events) {\r\n    try {\r\n        let seen = new Set();\r\n        let totalEvents = 0;\r\n        for (let i = 0; i < events.length; ++i) {\r\n            for (let j = 0; j < events[i].length; ++j) {\r\n                let key = events[i][j];\r\n                if (key.status == DOWN) {\r\n                    if (seen.has(key.id)) {\r\n                        throw 'keyInputTest(): encountered duplicate DOWN event w/o necessary UP event in-between\\nkey: ' + key.id + ' ' + key.status + ' i: ' + i + ' j: ' + j;\r\n                    } else seen.add(key.id);\r\n                } else if (seen.has(key.id)) {\r\n                    seen.delete(key.id);\r\n                } else throw 'keyInputTest(): UP event encountered without prior corresponding DOWN event\\nkey: ' + key.id + ' ' + key.status + ' i: ' + i + ' j: ' + j;\r\n                totalEvents++;\r\n            }\r\n        }\r\n        if (seen.size > 0) throw 'keyInputTest(): unfinished sequence (one or more DOWN events are missing concluding UP event)'\r\n        return totalEvents;\r\n    } catch (e) {\r\n        console.log('Error: ' + e);\r\n        return -1;\r\n    }\r\n}\r\n\r\nfunction updateKeyState(keyState, key) {\r\n    if (key.status == DOWN) {\r\n        keyState.add(key.id);\r\n        if (key.id == Z && (keyState.has(CONTROL) || keyState.has(META)) && !keyState.has(SHIFT)) return UNDO;\r\n        else if (key.id == Y && (keyState.has(CONTROL) || keyState.has(META)) && !keyState.has(SHIFT)) return REDO;\r\n    } else keyState.delete(key.id);\r\n    return NO_CHANGE;\r\n}\r\n\r\nfunction capturePredictedChange(predictedKeyOutcome) {\r\n    let storeState = store.getState();\r\n    let changeHistoryIndex = storeState.history.changeHistoryIndex;\r\n    let changeHistory = storeState.history.changeHistory;\r\n    let delta;\r\n    if (predictedKeyOutcome == UNDO) {\r\n        delta = -1;\r\n    } else if (predictedKeyOutcome == REDO) {\r\n        delta = 1;\r\n    } else throw 'capturePredictedChange(): currently unsupported outcome: ' + predictedKeyOutcome;\r\n    let newIndex = changeHistoryIndex + delta;\r\n    if (newIndex < 0 || newIndex >= changeHistory.length) return NO_CHANGE;\r\n    else return { predictedIndex: changeHistoryIndex + delta, predictedHistoryState: changeHistory[changeHistoryIndex + delta] };\r\n}\r\n\r\nfunction predictionMatchesActualEvent(predictedKeyOutcome, currentKeyOutcome, previousTimeTravelCounter, currentTimeTravelCounter, key) {\r\n    if (currentKeyOutcome != predictedKeyOutcome) throw 'Error: keyInputTest(): key event outcome does not match prediction:\\nkey: ' + key.id + ' ' + key.status + '\\nPredicted: ' + predictedKeyOutcome + '\\nActual: ' + currentKeyOutcome;\r\n    if (predictedKeyOutcome != null && previousTimeTravelCounter + 1 == currentTimeTravelCounter) return true;\r\n    else return false;\r\n}\r\n\r\nfunction compareStoreAndDOM(predictedKeyOutcome, predictedChange) {\r\n    if (predictedChange == NO_CHANGE) {\r\n        console.log('NO CHANGE');\r\n        return;\r\n    }\r\n    let changeHistoryIndex = store.getState().history.changeHistoryIndex;\r\n    if (changeHistoryIndex != predictedChange.predictedIndex) throw ('changeHistoryIndex not updated correctly');\r\n\r\n    if (predictedKeyOutcome == UNDO) {\r\n        compareWithDOM(predictedChange.predictedHistoryState);\r\n    } else if (predictedKeyOutcome == REDO) {\r\n        compareWithDOM(predictedChange.predictedHistoryState);\r\n    } else console.log('compareStoreAndDOM(): unrecognized predictedKeyOutcome: ' + predictedKeyOutcome);\r\n}\r\n\r\nfunction compareWithDOM(predictedHistoryState) {\r\n    for (const [entryKey, data] of predictedHistoryState.getIndividualEntries()) {\r\n        if (entryKey == 'spreadsheet') compareSheet(data.getStyleMap());\r\n        else if (!/\\.col\\d+/.test(entryKey)) {\r\n            let entry = document.getElementById(entryKey.match(/\\.row\\d+/));\r\n            compareEntry(entry, data.getStyleMap());\r\n        } else {\r\n            let entry = document.querySelector(entryKey.match(/\\.row\\d+\\.col\\d+$/));\r\n            compareEntry(entry, data.getStyleMap(), data.getVal());\r\n        }\r\n    }\r\n    for (const [group, styleMap] of predictedHistoryState.getGroupEntries()) {\r\n        compareGroup(group, styleMap);\r\n    }\r\n}\r\n\r\nfunction compareSheet(styleMap) {\r\n    let h = null;\r\n    let w = null;\r\n    for (const [property, value] of styleMap.entries()) {\r\n        if (property == 'height') h = value;\r\n        else if (property == 'width') w = value;\r\n    }\r\n    document.getElementById('spreadsheet').querySelectorAll('.resizer-horizontal').forEach(resizer => {\r\n        if (h != null && resizer.style.height != h + 'px') throw 'compareSheet() failed on resizer height';\r\n    });\r\n    document.getElementById('spreadsheet').querySelectorAll('.resizer-vertical').forEach(resizer => {\r\n        if (w != null && resizer.style.width != w + 'px') throw 'compareSheet() failed on resizer width';\r\n    });\r\n    let dimensions = store.getState().sheetDimensions;\r\n    if ((h != null && dimensions.tableHeight != h) || (w != null && dimensions.tableWidth != w)) throw 'compareSheet() failed on sheet dimensions';\r\n}\r\n\r\nfunction compareEntry(entry, styleMap, val) {\r\n    if (val != null && entry.querySelector('input').value != val) throw 'compareEntry() failed on value';\r\n    for (const [property, value] of styleMap.entries()) {\r\n        switch (property) {\r\n            case 'height':\r\n                if (entry.style.height = !value + 'px') throw 'compareEntry() failed on height';\r\n                if ([...entry.classList].filter(name => /^col0$/.test(name)).length != 0 && entry.style.lineHeight != value + 'px') {\r\n                    throw 'compareEntry() failed on lineHeight of a specific Y axis cell';\r\n                }\r\n                if ([...entry.classList].filter(name => /^row0$/.test(name)).length == 0 &&\r\n                    [...entry.classList].filter(name => /^col0$/.test(name)).length == 0 &&\r\n                    [...entry.classList].filter(name => /^col\\d+$/.test(name)).length != 0 &&\r\n                    entry.querySelector('input').style.height != value - 4 + 'px' &&\r\n                    entry.querySelector('#cover').style.height != value + 'px') {\r\n                    throw 'compareEntry() failed on input and cover heights';\r\n                }\r\n                break;\r\n            case 'width':\r\n                entry.style.width = value + 'px';\r\n                if ([...entry.classList].filter(name => /^row0$/.test(name)).length == 0 &&\r\n                    [...entry.classList].filter(name => /^col0$/.test(name)).length == 0 &&\r\n                    [...entry.classList].filter(name => /^col\\d+$/.test(name)).length != 0 &&\r\n                    entry.querySelector('input').style.width != value - 4 + 'px' &&\r\n                    entry.querySelector('#cover').style.width != value + 'px') {\r\n                    throw 'compareEntry() failed on input and cover widths';\r\n                }\r\n                break;\r\n            case 'marginLeft':\r\n                if (entry.style.marginLeft != value + 'px') throw 'compareEntry() failed on marginLeft';\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nfunction compareGroup(group, styleMap) {\r\n    if (/^\\.col\\d+$/.test(group)) {\r\n        for (const [property, value] of styleMap) {\r\n            if (property == 'width') {\r\n                let entries = document.querySelectorAll(group);\r\n                let dx = value - parseInt(entries[0].style.width, 10);\r\n                if (entries[0].style.width != value + 'px') throw 'compareGroup() failed on width';\r\n                for (let i = 1; i < entries.length; ++i) {\r\n                    if (entries[i].style.width != value + 'px') throw 'compareGroup() failed on width';\r\n                    if (entries[i].querySelector('input').style.width != value - 8 + 'px') throw 'compareGroup() failed on inputWidth';\r\n                    if (entries[i].querySelector('.selectionLayer').style.width != value + 'px') throw 'compareGroup() failed on selectionWidth';\r\n                    if (entries[i].querySelector('.highlightLayer').style.width != value - 4 + 'px') throw 'compareGroup() failed on highlightWidth';\r\n                }\r\n                let colNum = parseInt(group.match(/(\\d+)/)[0], 10); // check that cells do not overlap\r\n                let elem = null;\r\n                let prevMarginLeft = document.querySelector(`.col${colNum}`).style.marginLeft;\r\n                let prevWidth = document.querySelector(`.col${colNum}`).style.width;\r\n                while ((elem = document.querySelector(`.col${++colNum}`)) != null) {\r\n                    let expectedMarginLeft = parseInt(prevMarginLeft, 10) + parseInt(prevWidth, 10) + 'px';\r\n                    let entries = document.querySelectorAll(`.col${colNum}`);\r\n                    for (let i = 0; i < entries.length; ++i) {\r\n                        if (entries[i].style.marginLeft != expectedMarginLeft) throw 'compareGroup() failed on marginLeft';\r\n                    }\r\n                    prevMarginLeft = entries[0].style.marginLeft;\r\n                    prevWidth = entries[0].style.width;\r\n                }\r\n            }\r\n        }\r\n    } else if (/^\\.row\\d+$/.test(group)) {\r\n        for (const [property, value] of styleMap) {\r\n            if (property == 'height') {\r\n                let entries = document.querySelectorAll(group);\r\n                entries[0].style.height = value + 'px';\r\n                entries[1].style.height = value + 'px';\r\n                entries[1].style.lineHeight = value + 'px';\r\n                for (let i = 2; i < entries.length; ++i) {\r\n                    if (entries[i].style.height != value + 'px') throw 'compareGroup() failed on height';\r\n                    if (entries[i].querySelector('input').style.height != value - 6 + 'px') throw 'compareGroup() failed on inputHeight';\r\n                    if (entries[i].querySelector('.selectionLayer').style.height != value + 'px') throw 'compareGroup() failed on selectionHeight';\r\n                    if (entries[i].querySelector('.highlightLayer').style.height != value - 4 + 'px') throw 'compareGroup() failed on highlightHeight';\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport { keyInputTest, checkReactionOfKeyInput, validateSequence };","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\TablePanel\\handlers\\cellHandler\\cellHandler.js",[],[],"C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\tests\\unitTest.js",["637"],[],"import { batchTurn, nextTurn, concludeTestingBatch } from './../../../tests/sequenceHelpers.js'\r\nimport { boldTest } from '../components/Bold/test.js';\r\nimport { italicTest } from '../components/Italic/test.js';\r\nimport { strikethroughTest } from '../components/Strikethrough/test.js';\r\nimport { fontFamilyTest } from '../components/FontFamily/test.js';\r\nimport { fontSizeTest } from '../components/FontSize/test.js';\r\nimport { fontColorTest } from '../components/FontColor/test.js';\r\nimport { cellColorTest } from '../components/CellColor/test.js';\r\nimport { bordersTest } from '../components/Borders/test.js';\r\nimport { horizontalAlignmentTest } from '../components/HorizontalAlignment/test.js';\r\nimport { verticalAlignmentTest } from '../components/VerticalAlignment/test.js';\r\n\r\nconst t = {\r\n    FONT_FAMILY: 'FONT_FAMILY',\r\n    FONT_SIZE: 'FONT_SIZE',\r\n    BOLD: 'BOLD',\r\n    ITALIC: 'ITALIC',\r\n    STRIKETHROUGH: 'STRIKETHROUGH',\r\n    FONT_COLOR: 'FONT_COLOR',\r\n    CELL_COLOR: 'CELL_COLOR',\r\n    BORDERS: 'BORDERS',\r\n    HORIZONTAL_ALIGNMENT: 'HORIZONTAL_ALIGNMENT',\r\n    VERTICAL_ALIGNMENT: 'VERTICAL_ALIGNMENT',\r\n};\r\n\r\nfunction unitTest(testsToRun) {\r\n    if (testsToRun.size == 0) {\r\n        nextTurn(batchTurn);\r\n        return;\r\n    }\r\n    let atomicTurn = {\r\n        current: 1,\r\n        nextAvailable: 1\r\n    };\r\n    for (const test of testsToRun.values()) {\r\n        switch (test) {\r\n            case t.FONT_FAMILY:\r\n                fontFamilyTest(atomicTurn);\r\n                break;\r\n            case t.FONT_SIZE:\r\n                fontSizeTest(atomicTurn);\r\n                break;\r\n            case t.BOLD:\r\n                boldTest(atomicTurn);\r\n                break;\r\n            case t.ITALIC:\r\n                italicTest(atomicTurn);\r\n                break;\r\n            case t.STRIKETHROUGH:\r\n                strikethroughTest(atomicTurn);\r\n                break;\r\n            case t.FONT_COLOR:\r\n                fontColorTest(atomicTurn);\r\n                break;\r\n            case t.CELL_COLOR:\r\n                cellColorTest(atomicTurn);\r\n                break;\r\n            case t.BORDERS:\r\n                bordersTest(atomicTurn);\r\n                break;\r\n            case t.HORIZONTAL_ALIGNMENT:\r\n                horizontalAlignmentTest(atomicTurn);\r\n                break;\r\n            case t.VERTICAL_ALIGNMENT:\r\n                verticalAlignmentTest(atomicTurn);\r\n                break;\r\n            default: break;\r\n        }\r\n    }\r\n    concludeTestingBatch(atomicTurn);\r\n}\r\n\r\nexport default unitTest;","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\TablePanel\\handlers\\resizingHandler\\resizingHandler.js",["638","639","640","641","642"],[],"import Data from '../../../../data/data.js';\r\nimport { hasClass } from '../../../../misc/util.js'\r\nimport recordChange from '../../../../data/modifiers/recordChange.js';\r\nimport { store } from './../../../../store/store.js'\r\nimport { setTableDimensions } from '../../../../store/reducers/tableDimensionsSlice.js'\r\nimport { updateScrollDimensions } from '../scrollSnapHandler/scrollSnapHandler.js';\r\n\r\nfunction applyResizers() {\r\n    fixResizers('AxisX');\r\n    fixResizers('AxisY');\r\n}\r\n\r\nfunction fixResizers(axis) {\r\n    const axisEntries = [...document.querySelectorAll('.' + axis)]\r\n    axisEntries.forEach(axisCell => {\r\n        let resizer = axisCell.querySelector('div');\r\n        setResizerDimensions(resizer, parseInt(axisCell.style.height, 10), parseInt(axisCell.style.width, 10));\r\n        if (axis == 'AxisX') createResizableCol(axisCell, resizer);\r\n        else createResizableRow(axisCell, resizer)\r\n    });\r\n}\r\n\r\nfunction createResizableCol(axisCell, resizer) {\r\n    let x = 0;\r\n    let w = 0;\r\n    const colNum = parseInt([...axisCell.classList].filter(name => /^col\\d+$/.test(name))[0].match(/(\\d+)/)[0], 10);\r\n    let initialTableHeight, initialTableWidth;\r\n    let dataBeforeChange = new Data();\r\n    let dataAfterChange = new Data();\r\n    let colMarginsLeft = [];\r\n    let changeOccurred = false;\r\n\r\n    const mouseDownHandler = function (e) {\r\n        let tableDimensions = store.getState().tableDimensions;\r\n        [initialTableHeight, initialTableWidth] = [tableDimensions.height, tableDimensions.width];\r\n        document.querySelector(`.AxisX.col${colNum} > .resizer-horizontal`).style.height = `${initialTableHeight}px`;\r\n        x = e.clientX;\r\n        w = parseInt(window.getComputedStyle(axisCell).width, 10);\r\n        dataBeforeChange = getResizableColData(colNum, w, initialTableWidth); // store current state\r\n        storeColMargins(colMarginsLeft, colNum);\r\n        document.addEventListener('mousemove', mouseMoveHandler);\r\n        document.addEventListener('mouseup', mouseUpHandler);\r\n        resizer.classList.add('resizing-horizontal');\r\n    };\r\n\r\n    // disable resizing if document.width == content.width\r\n    const mouseMoveHandler = function (e) {\r\n        changeOccurred = x != e.clientX ? true : false;\r\n        const dx = w + e.clientX - x < 0 ? -w + 1 : e.clientX - x; // set dx so as to maintain 1 pixel minimum width\r\n        updateWidths(colNum, w, dx);\r\n        updateColMargins(colNum + 1, colMarginsLeft, dx);\r\n        let newTableWidth = initialTableWidth + dx;\r\n        store.dispatch(setTableDimensions({ height: initialTableHeight, width: newTableWidth }));\r\n    };\r\n\r\n    const mouseUpHandler = function () {\r\n        document.removeEventListener('mousemove', mouseMoveHandler);\r\n        document.removeEventListener('mouseup', mouseUpHandler);\r\n        resizer.classList.remove('resizing-horizontal');\r\n        resizer.style.height = document.querySelector('.AxisX').style.height;\r\n        if (changeOccurred) {\r\n            let newWidth = parseInt(axisCell.style.width, 10);\r\n            dataAfterChange = getResizableColData(colNum, newWidth, store.getState().tableDimensions.width)\r\n            recordChange(dataBeforeChange, dataAfterChange);\r\n            changeOccurred = false;\r\n        }\r\n        colMarginsLeft = [];\r\n        document.querySelector('#scrollBarLayer').style.width = store.getState().tableDimensions.width - 50 + 'px';\r\n        updateScrollDimensions();\r\n    };\r\n\r\n    resizer.addEventListener('mousedown', mouseDownHandler);\r\n}\r\n\r\nfunction createResizableRow(axisCell, resizer) {\r\n    let y = 0;\r\n    let h = 0;\r\n    const rowNum = parseInt([...axisCell.classList].filter(name => /^row\\d+$/.test(name))[0].match(/(\\d+)/)[0], 10);\r\n    let initialTableHeight, initialTableWidth;\r\n    let dataBeforeChange = new Data();\r\n    let dataAfterChange = new Data();\r\n    let changeOccurred = false;\r\n\r\n    const mouseDownHandler = function (e) {\r\n        let tableDimensions = store.getState().tableDimensions;\r\n        [initialTableHeight, initialTableWidth] = [tableDimensions.height, tableDimensions.width];\r\n        document.querySelector(`.AxisY.row${rowNum} > .resizer-vertical`).style.width = `${initialTableWidth}px`;\r\n        y = e.clientY;\r\n        h = parseInt(window.getComputedStyle(axisCell).height, 10);\r\n        dataBeforeChange = getResizableRowData(rowNum, h, initialTableHeight); // store current state\r\n        document.addEventListener('mousemove', mouseMoveHandler);\r\n        document.addEventListener('mouseup', mouseUpHandler);\r\n        resizer.classList.add('resizing-vertical');\r\n    };\r\n\r\n    // disable resizing if document.width == content.width\r\n    const mouseMoveHandler = function (e) {\r\n        changeOccurred = y != e.clientY ? true : false;\r\n        const dy = h + e.clientY - y < 0 ? -h + 1 : e.clientY - y; // set dy so as to maintain 1 pixel minimum height\r\n        updateHeights(rowNum, h, dy);\r\n        let newTableHeight = initialTableHeight + dy;\r\n        store.dispatch(setTableDimensions({ height: newTableHeight, width: initialTableWidth }));\r\n    };\r\n\r\n    const mouseUpHandler = function () {\r\n        document.removeEventListener('mousemove', mouseMoveHandler);\r\n        document.removeEventListener('mouseup', mouseUpHandler);\r\n        resizer.classList.remove('resizing-vertical');\r\n        resizer.style.width = document.querySelector('.AxisY').style.width;\r\n        if (changeOccurred) {\r\n            let newHeight = parseInt(axisCell.style.height, 10);\r\n            dataAfterChange = getResizableRowData(rowNum, newHeight, store.getState().tableDimensions.height);\r\n            recordChange(dataBeforeChange, dataAfterChange);\r\n            changeOccurred = false;\r\n        }\r\n        document.querySelector('#scrollBarLayer').style.height = store.getState().tableDimensions.height - 22 + 'px';\r\n        updateScrollDimensions();\r\n    };\r\n\r\n    resizer.addEventListener('mousedown', mouseDownHandler);\r\n}\r\n\r\n//---------------------------------------------------------------\r\n// ----------- BASEMENT -----------------------------------------\r\n//---------------------------------------------------------------\r\n\r\nfunction setResizerDimensions(resizer, cellHeight, cellWidth) {\r\n    if (hasClass(resizer, 'resizer-horizontal')) resizer.style.height = `${cellHeight}px`;\r\n    else resizer.style.width = `${cellWidth}px`;\r\n}\r\n\r\nfunction getResizableColData(index, width, tableWidth) {\r\n    let myData = new Data();\r\n    let groupStyleMap = new Map();\r\n    groupStyleMap.set('width', width)\r\n    myData.setGroup(`.col${index}`, groupStyleMap);\r\n    let individualStyleMap = new Map();\r\n    individualStyleMap.set('width', tableWidth);\r\n    myData.setIndividualEntry(`table`, individualStyleMap);\r\n    return myData;\r\n}\r\nfunction getResizableRowData(index, height, tableHeight) {\r\n    let myData = new Data();\r\n    let groupStyleMap = new Map();\r\n    groupStyleMap.set('height', height)\r\n    myData.setGroup(`.row${index}`, groupStyleMap);\r\n    let individualStyleMap = new Map();\r\n    individualStyleMap.set('height', tableHeight);\r\n    myData.setIndividualEntry(`table`, individualStyleMap);\r\n    return myData;\r\n}\r\n\r\nfunction storeColMargins(colMarginsLeft, colNum) {\r\n    let elem = null;\r\n    while ((elem = document.querySelector(`.row1.col${++colNum}`)) != null) {\r\n        colMarginsLeft.push(parseInt(elem.style.marginLeft, 10));\r\n    }\r\n}\r\n\r\nfunction updateHeights(rowIndex, height, dy) {\r\n    let arr = [...document.querySelectorAll(`.row${rowIndex}`)];\r\n    arr[1].style.lineHeight = height + dy + 'px';\r\n    arr.forEach((cell, index) => {\r\n        if (index > 1) {\r\n            cell.querySelector('.coverDiv').style.height = height + dy + 'px';\r\n        }\r\n        cell.style.height = height + dy + 'px';\r\n    });\r\n}\r\n\r\nfunction updateWidths(colIndex, width, dx) {\r\n    let arr = [...document.querySelectorAll(`.col${colIndex}`)];\r\n    arr.forEach((cell, index) => {\r\n        cell.style.width = width + dx + 'px';\r\n        if (index > 0) {\r\n            cell.querySelector('input').style.width = width + dx - 8 + 'px';\r\n            cell.querySelector('.coverDiv').style.width = width + dx + 'px';\r\n        }\r\n    });\r\n}\r\n\r\nfunction updateColMargins(colIndex, colMarginsLeft, dx) {\r\n    let idx = colIndex - 1;\r\n    let arr = [];\r\n    while ((arr = [...document.querySelectorAll(`.col${++idx}`)]).length != 0) {\r\n        arr.forEach(box => {\r\n            if (box.classList.contains('AxisX')) box.style.marginLeft = colMarginsLeft[idx - colIndex] + dx + 'px';\r\n            else box.style.marginLeft = colMarginsLeft[idx - colIndex] + dx + 'px';\r\n        });\r\n    }\r\n}\r\n\r\nexport { applyResizers, getResizableColData, getResizableRowData };","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\TablePanel\\helpers\\buildSheet\\buildSheet.js",[],[],"C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\data\\modifiers\\undoRedo.js",["643","644"],[],"import { updateTableDimensions, applyChange, applyGroupChange } from './applyChange.js';\r\nimport updateCollectedData from './updateCollectedData.js';\r\nimport { store } from './../../store/store.js'\r\nimport { trackEvent } from \"./../../store/reducers/keyboardEventsSlice.js\";\r\nimport { undo as undoAction, redo as redoAction } from './../../store/reducers/historySlice.js'\r\n\r\nconst UNDO = 'Undo';\r\nconst REDO = 'Redo';\r\n\r\nfunction undo() {\r\n    const storeState = store.getState();\r\n    const changeHistoryIndex = storeState.history.changeHistoryIndex;\r\n    const changeHistory = storeState.history.changeHistory;\r\n    const collectedData = storeState.history.collectedData;\r\n    const enableTest = storeState.keyboardEvents.enableTest;\r\n    const timeTravelCounter = storeState.keyboardEvents.timeTravelCounter;\r\n    if (changeHistoryIndex > 0) {\r\n        if (enableTest) store.dispatch(trackEvent({ outcome: UNDO, timeTravelCounter: timeTravelCounter + 1 }));\r\n        for (const [entryKey, data] of changeHistory[changeHistoryIndex - 1].getIndividualEntries()) {\r\n            if (entryKey == 'table') {\r\n                console.log('table: ');\r\n                updateTableDimensions(data.getStyleMap());\r\n            }\r\n            else if (!/\\.col\\d+/.test(entryKey)) {\r\n                let entry = document.getElementById(entryKey.match(/\\.row\\d+/));\r\n                applyChange(entry, data.getStyleMap());\r\n            } else {\r\n                let entry = document.querySelector(entryKey.match(/\\.row\\d+\\.col\\d+$/));\r\n                applyChange(entry, data.getStyleMap(), data.getVal());\r\n            }\r\n        }\r\n        for (const [group, styleMap] of changeHistory[changeHistoryIndex - 1].getGroupEntries()) {\r\n            console.log('group: ' + group);\r\n            applyGroupChange(group, styleMap);\r\n        }\r\n        let updatedCollectedData = updateCollectedData(changeHistory[changeHistoryIndex - 1], collectedData);\r\n        console.log('Undo\\nchangeHistoryIndex: ' + (changeHistoryIndex - 1));\r\n        store.dispatch(undoAction({ collectedData: updatedCollectedData }));\r\n    } else if (enableTest) store.dispatch(trackEvent({ outcome: UNDO }));\r\n}\r\n\r\nfunction redo() {\r\n    const storeState = store.getState();\r\n    const changeHistoryIndex = storeState.history.changeHistoryIndex;\r\n    const changeHistory = storeState.history.changeHistory;\r\n    const collectedData = storeState.history.collectedData;\r\n    const enableTest = storeState.keyboardEvents.enableTest;\r\n    const timeTravelCounter = storeState.keyboardEvents.timeTravelCounter;\r\n    if (changeHistoryIndex < changeHistory.length - 1) {\r\n        if (enableTest) store.dispatch(trackEvent({ outcome: REDO, timeTravelCounter: timeTravelCounter + 1 }));\r\n        for (const [entryKey, data] of changeHistory[changeHistoryIndex + 1].getIndividualEntries()) {\r\n            if (entryKey == 'table') {\r\n                updateTableDimensions(data.getStyleMap(), updateTableDimensions);\r\n            } else if (!/\\.col\\d+/.test(entryKey)) {\r\n                let entry = document.getElementById(entryKey.match(/\\.row\\d+$/));\r\n                applyChange(entry, data.getStyleMap());\r\n            } else {\r\n                let entry = document.querySelector(entryKey.match(/\\.row\\d+\\.col\\d+$/));\r\n                applyChange(entry, data.getStyleMap(), data.getVal())\r\n            }\r\n        }\r\n        for (const [group, styleMap] of changeHistory[changeHistoryIndex + 1].getGroupEntries()) {\r\n            applyGroupChange(group, styleMap);\r\n        }\r\n        let updatedCollectedData = updateCollectedData(changeHistory[changeHistoryIndex + 1], collectedData);\r\n        console.log('Redo\\nchangeHistoryIndex: ' + (changeHistoryIndex + 1));\r\n        store.dispatch(redoAction({ collectedData: updatedCollectedData }));\r\n    } else if (enableTest) store.dispatch(trackEvent({ outcome: REDO }));\r\n}\r\nexport { undo, redo }","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\components\\FontFamily\\FontFamily.js",[],[],"C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\components\\Bold\\Bold.js",["645"],[],"import React from \"react\";\r\nimport { store } from './../../../../store/store.js'\r\nimport { useSelector } from 'react-redux';\r\nimport { getFontWeight, setFontWeight } from '../../../../store/reducers/selectionSlice.js';\r\nimport Data from \"../../../../data/data.js\";\r\nimport recordChange from \"../../../../data/modifiers/recordChange.js\";\r\nimport './Bold.css'\r\n\r\nfunction Bold({ selectionEntries }) {\r\n    const fontWeight = useSelector(getFontWeight);\r\n\r\n    let makeBold = (e) => {\r\n        let newFontWeight;\r\n        let prevData = new Data();\r\n        let newData = new Data();\r\n        for (const cell of selectionEntries.values()) {\r\n            let [rowNum, colNum] = cell.split(',').map((num) => parseInt(num, 10));\r\n            prevData.setIndividualEntry('.row' + rowNum + '.col' + colNum, new Map([['fontWeight', parseInt(fontWeight, 10)]]), rowNum, colNum, null);\r\n            let cellNode = document.querySelector(`.row${rowNum}.col${colNum}>.cellValueDiv>.cellValue`);\r\n            if (fontWeight == 700) {\r\n                newFontWeight = 400;\r\n                cellNode.style.fontWeight = newFontWeight;\r\n                newData.setIndividualEntry('.row' + rowNum + '.col' + colNum, new Map([['fontWeight', newFontWeight]]), rowNum, colNum, null);\r\n                document.querySelector('.bold__btn').style.backgroundColor = 'white';\r\n            } else {\r\n                newFontWeight = 700;\r\n                cellNode.style.fontWeight = newFontWeight;\r\n                newData.setIndividualEntry('.row' + rowNum + '.col' + colNum, new Map([['fontWeight', newFontWeight]]), rowNum, colNum, null);\r\n                document.querySelector('.bold__btn').style.backgroundColor = 'rgb(204, 255, 162)';\r\n            }\r\n        }\r\n        recordChange(prevData, newData);\r\n        store.dispatch(setFontWeight({ fontWeight: newFontWeight }));\r\n    }\r\n\r\n    return (\r\n        <div className='bold'>\r\n            <button className='bold__btn' onClick={makeBold}>\r\n                <p id='bold__icon'>B</p>\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Bold;","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\components\\CellColor\\CellColor.js",["646","647","648","649","650"],[],"import React, { useState } from \"react\";\r\nimport { store } from './../../../../store/store.js'\r\nimport { useSelector } from 'react-redux';\r\nimport { getCellColor, setCellColor } from '../../../../store/reducers/selectionSlice.js';\r\nimport Data from \"../../../../data/data.js\";\r\nimport recordChange from \"../../../../data/modifiers/recordChange.js\";\r\nimport './CellColor.css'\r\nimport { hexToRgb } from \"../../helper.js\";\r\n\r\nfunction CellColor({ selectionEntries, colors }) {\r\n    const color = useSelector(getCellColor);\r\n    const [insideDropdown, setInsideDropdown] = useState(false);\r\n\r\n    let toggleColorGrid = (e) => {\r\n        let colorGrid = e.target.parentElement.querySelector('.cellColor__colorGrid');\r\n        if (colorGrid.style.opacity == 1) {\r\n            colorGrid.style.opacity = 0;\r\n            colorGrid.style.zIndex = -1;\r\n            colorGrid.style.pointerEvents = 'none';\r\n        } else {\r\n            colorGrid.style.opacity = 1;\r\n            colorGrid.style.zIndex = 1;\r\n            colorGrid.style.pointerEvents = 'auto';\r\n        }\r\n    }\r\n\r\n    let createColorGrid = (colors) => {\r\n        let colorGrid = [];\r\n        let index1 = 0;\r\n        for (const colorSet of colors) {\r\n            let colorSetArr = [];\r\n            let index2 = 0;\r\n            for (const colorOption of colorSet) {\r\n                colorSetArr.push(\r\n                    <button key={index2++} className='cellColor__colorSquareBtn' style={{}} onClick={() => updateCellColor(selectionEntries, color, colorOption)}>\r\n                        <div style={{ width: '100%', height: '100%', display: 'grid', placeItems: 'center' }}>\r\n                            <div style={{ width: '15px', height: '15px', backgroundColor: colorOption, border: colorOption == 'white' || index2 == 4 ? '1px solid lightgray' : 'none' }}></div>\r\n                        </div>\r\n                    </button>\r\n                );\r\n            }\r\n            colorGrid.push(<div key={index1++} style={{ display: 'flex', flexDirection: 'column' }}>{colorSetArr}</div>);\r\n        }\r\n        return <div style={{ display: 'flex' }}>{colorGrid}</div>;\r\n    }\r\n\r\n    let recordMouseEnter = () => {\r\n        setInsideDropdown(true);\r\n    }\r\n\r\n    let recordMouseLeave = () => {\r\n        setInsideDropdown(false);\r\n    }\r\n\r\n    let hideColorGrid = (e) => {\r\n        if (!insideDropdown) {\r\n            e.currentTarget.querySelector('.cellColor__colorGrid').style.opacity = 0;\r\n            e.currentTarget.querySelector('.cellColor__colorGrid').style.zIndex = -1;\r\n            e.currentTarget.querySelector('.cellColor__colorGrid').style.pointerEvents = 'none';\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='cellColor' tabIndex='-1' onMouseEnter={recordMouseEnter} onMouseLeave={recordMouseLeave} onBlur={hideColorGrid} >\r\n            <button className='cellColor__btn' onClick={toggleColorGrid}>\r\n                <div className='cellColor__btnDiv' style={{ height: '100%', width: '100%', display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'space-around' }}>\r\n                    <div style={{ position: 'relative', width: '100%', height: '19px' }}>\r\n                        <img src='bucket.png' alt='bucket' style={{ position: 'absolute', width: '16px', height: '16px', left: 0, right: 0, marginBottom: '3px' }} />\r\n                    </div>\r\n                    <div className='cellColor__colorBar' style={{ position: 'absolute', bottom: '0px', backgroundColor: color, boxShadow: color == 'white' ? 'inset 0 0 0 1px gray' : 'none' }}></div>\r\n                </div>\r\n            </button>\r\n            <div className='cellColor__colorGrid' >\r\n                {createColorGrid(colors)}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nlet updateCellColor = (selectionEntries, prevColor, newColor) => {\r\n    newColor = hexToRgb(newColor);\r\n    let prevData = new Data();\r\n    let newData = new Data();\r\n    for (const cell of selectionEntries.values()) {\r\n        let [rowNum, colNum] = cell.split(',').map((num) => parseInt(num, 10));\r\n        prevData.setIndividualEntry('.row' + rowNum + '.col' + colNum, new Map([['cellColor', prevColor]]), rowNum, colNum, null);\r\n        newData.setIndividualEntry('.row' + rowNum + '.col' + colNum, new Map([['cellColor', newColor]]), rowNum, colNum, null);\r\n        document.querySelector(`.row${rowNum}.col${colNum}>.cellValueDiv`).style.backgroundColor = newColor;\r\n    }\r\n    recordChange(prevData, newData);\r\n    store.dispatch(setCellColor({ cellColor: newColor }));\r\n}\r\n\r\nexport { CellColor, updateCellColor };","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\components\\Strikethrough\\Strikethrough.js",["651"],[],"import React from \"react\";\r\nimport { store } from './../../../../store/store.js'\r\nimport { useSelector } from 'react-redux';\r\nimport { getTextDecoration, setTextDecoration } from '../../../../store/reducers/selectionSlice.js';\r\nimport Data from \"../../../../data/data.js\";\r\nimport recordChange from \"../../../../data/modifiers/recordChange.js\";\r\nimport './Strikethrough.css'\r\n\r\nfunction Strikethrough({ selectionEntries }) {\r\n    const textDecoration = useSelector(getTextDecoration);\r\n\r\n    let toggleStrikethrough = (e) => {\r\n        let newTextDecoration;\r\n        let prevData = new Data();\r\n        let newData = new Data();\r\n        for (const cell of selectionEntries.values()) {\r\n            let [rowNum, colNum] = cell.split(',').map((num) => parseInt(num, 10));\r\n            prevData.setIndividualEntry('.row' + rowNum + '.col' + colNum, new Map([['textDecoration', textDecoration]]), rowNum, colNum, null);\r\n            let cellNode = document.querySelector(`.row${rowNum}.col${colNum}>.cellValueDiv>.cellValue`);\r\n            if (textDecoration == 'line-through') {\r\n                newTextDecoration = 'none';\r\n                cellNode.style.textDecoration = newTextDecoration;\r\n                newData.setIndividualEntry('.row' + rowNum + '.col' + colNum, new Map([['textDecoration', newTextDecoration]]), rowNum, colNum, null);\r\n                document.querySelector('.strikethrough__btn').style.backgroundColor = 'white';\r\n            } else {\r\n                newTextDecoration = 'line-through';\r\n                cellNode.style.textDecoration = newTextDecoration;\r\n                newData.setIndividualEntry('.row' + rowNum + '.col' + colNum, new Map([['textDecoration', newTextDecoration]]), rowNum, colNum, null);\r\n                document.querySelector('.strikethrough__btn').style.backgroundColor = 'rgb(204, 255, 162)';\r\n            }\r\n        }\r\n        recordChange(prevData, newData);\r\n        store.dispatch(setTextDecoration({ textDecoration: newTextDecoration }));\r\n    }\r\n\r\n    return (\r\n        <div className='strikethrough'>\r\n            <button className='strikethrough__btn' onClick={toggleStrikethrough}>\r\n                <p id='strikethrough__icon'>S</p>\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Strikethrough;","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\components\\FontSize\\FontSize.js",["652"],[],"import React, { useEffect } from \"react\";\r\nimport { store } from './../../../../store/store.js'\r\nimport { useSelector } from 'react-redux';\r\nimport { getFontSize, setFontSize } from '../../../../store/reducers/selectionSlice.js';\r\nimport Data from \"../../../../data/data.js\";\r\nimport recordChange from \"../../../../data/modifiers/recordChange.js\";\r\nimport './FontSize.css'\r\n\r\nlet fontSizes = [6, 7, 8, 9, 10, 11, 12, 14, 18, 24, 36];\r\nlet options = [];\r\nfor (let i = 0; i < fontSizes.length; ++i) {\r\n    options.push(<option key={i} value={fontSizes[i]}>{fontSizes[i]}</option>);\r\n}\r\n\r\nfunction FontSize({ selectionEntries }) {\r\n    const fontSize = useSelector(getFontSize);\r\n\r\n    let handleChange = (e) => {\r\n        updateFontSize(selectionEntries, fontSize, e.target.value)\r\n    }\r\n\r\n    return (\r\n        <div className='fontSize'>\r\n            <select className='fontSize__select' value={parseInt(fontSize, 10)} onChange={handleChange}>\r\n                {options}\r\n            </select>\r\n        </div>\r\n    );\r\n}\r\n\r\nlet updateFontSize = (selectionEntries, prevFontSize, newFontSize) => {\r\n    let prevData = new Data();\r\n    let newData = new Data();\r\n    for (const cell of selectionEntries.values()) {\r\n        let [rowNum, colNum] = cell.split(',').map((num) => parseInt(num, 10));\r\n        prevData.setIndividualEntry('.row' + rowNum + '.col' + colNum, new Map([['fontSize', parseInt(prevFontSize, 10)]]), rowNum, colNum, null);\r\n        newData.setIndividualEntry('.row' + rowNum + '.col' + colNum, new Map([['fontSize', parseInt(newFontSize, 10)]]), rowNum, colNum, null);\r\n        document.querySelector(`.row${rowNum}.col${colNum}>.cellValueDiv>.cellValue`).style.fontSize = newFontSize + 'px';\r\n    }\r\n    recordChange(prevData, newData);\r\n    store.dispatch(setFontSize({ fontSize: newFontSize }));\r\n}\r\n\r\nexport { FontSize, updateFontSize };","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\components\\Italic\\Italic.js",["653"],[],"import React from \"react\";\r\nimport { store } from './../../../../store/store.js'\r\nimport { useSelector } from 'react-redux';\r\nimport { getFontStyle, setFontStyle } from '../../../../store/reducers/selectionSlice.js';\r\nimport Data from \"../../../../data/data.js\";\r\nimport recordChange from \"../../../../data/modifiers/recordChange.js\";\r\nimport './Italic.css'\r\n\r\nfunction Italic({ selectionEntries }) {\r\n    const fontStyle = useSelector(getFontStyle);\r\n\r\n    let toggleItalic = (e) => {\r\n        let newFontStyle;\r\n        let prevData = new Data();\r\n        let newData = new Data();\r\n        for (const cell of selectionEntries.values()) {\r\n            let [rowNum, colNum] = cell.split(',').map((num) => parseInt(num, 10));\r\n            prevData.setIndividualEntry('.row' + rowNum + '.col' + colNum, new Map([['fontStyle', fontStyle]]), rowNum, colNum, null);\r\n            let cellNode = document.querySelector(`.row${rowNum}.col${colNum}>.cellValueDiv>.cellValue`);\r\n            if (fontStyle == 'italic') {\r\n                newFontStyle = 'normal';\r\n                cellNode.style.fontStyle = newFontStyle;\r\n                newData.setIndividualEntry('.row' + rowNum + '.col' + colNum, new Map([['fontStyle', newFontStyle]]), rowNum, colNum, null);\r\n                document.querySelector('.italic__btn').style.backgroundColor = 'white';\r\n            } else {\r\n                newFontStyle = 'italic';\r\n                cellNode.style.fontStyle = newFontStyle;\r\n                newData.setIndividualEntry('.row' + rowNum + '.col' + colNum, new Map([['fontStyle', newFontStyle]]), rowNum, colNum, null);\r\n                document.querySelector('.italic__btn').style.backgroundColor = 'rgb(204, 255, 162)';\r\n            }\r\n        }\r\n        recordChange(prevData, newData);\r\n        store.dispatch(setFontStyle({ fontStyle: newFontStyle }));\r\n    }\r\n\r\n    return (\r\n        <div className='italic'>\r\n            <button className='italic__btn' onClick={toggleItalic}>\r\n                <p id='italic__icon'>I</p>\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Italic;","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\components\\FontColor\\FontColor.js",["654","655","656","657","658"],[],"import React, { useState } from \"react\";\r\nimport { store } from '../../../../store/store.js'\r\nimport { useSelector } from 'react-redux';\r\nimport { getFontColor, setFontColor } from '../../../../store/reducers/selectionSlice.js';\r\nimport Data from \"../../../../data/data.js\";\r\nimport recordChange from \"../../../../data/modifiers/recordChange.js\";\r\nimport './FontColor.css'\r\nimport { hexToRgb } from \"../../helper.js\";\r\n\r\nfunction FontColor({ selectionEntries, colors }) {\r\n    const color = useSelector(getFontColor);\r\n    const [insideDropdown, setInsideDropdown] = useState(false);\r\n\r\n    let toggleColorGrid = (e) => {\r\n        let colorGrid = e.target.parentElement.querySelector('.fontColor__colorGrid');\r\n        if (colorGrid.style.opacity == 1) {\r\n            colorGrid.style.opacity = 0;\r\n            colorGrid.style.zIndex = -1;\r\n            colorGrid.style.pointerEvents = 'none';\r\n        } else {\r\n            colorGrid.style.opacity = 1;\r\n            colorGrid.style.zIndex = 3;\r\n            colorGrid.style.pointerEvents = 'auto';\r\n        }\r\n    }\r\n\r\n    let createColorGrid = (colors) => {\r\n        let colorGrid = [];\r\n        let index1 = 0;\r\n        for (const colorSet of colors) {\r\n            let colorSetArr = [];\r\n            let index2 = 0;\r\n            for (const colorOption of colorSet) {\r\n                colorSetArr.push(\r\n                    <button key={index2++} className='fontColor__colorSquareBtn' style={{}} onClick={() => updateFontColor(selectionEntries, color, colorOption)}>\r\n                        <div style={{ width: '100%', height: '100%', display: 'grid', placeItems: 'center' }}>\r\n                            <div style={{ width: '15px', height: '15px', backgroundColor: colorOption, border: colorOption == 'white' || index2 == 4 ? '1px solid lightgray' : 'none' }}></div>\r\n                        </div>\r\n                    </button>\r\n                );\r\n            }\r\n            colorGrid.push(<div key={index1++} style={{ display: 'flex', flexDirection: 'column' }}>{colorSetArr}</div>);\r\n        }\r\n        return <div style={{ display: 'flex' }}>{colorGrid}</div>;\r\n    }\r\n\r\n    let recordMouseEnter = () => {\r\n        setInsideDropdown(true);\r\n    }\r\n\r\n    let recordMouseLeave = () => {\r\n        setInsideDropdown(false);\r\n    }\r\n\r\n    let hideColorGrid = (e) => {\r\n        if (!insideDropdown) {\r\n            e.currentTarget.querySelector('.fontColor__colorGrid').style.opacity = 0;\r\n            e.currentTarget.querySelector('.fontColor__colorGrid').style.zIndex = -1;\r\n            e.currentTarget.querySelector('.fontColor__colorGrid').style.pointerEvents = 'none';\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='fontColor' tabIndex='-1' onMouseEnter={recordMouseEnter} onMouseLeave={recordMouseLeave} onBlur={hideColorGrid} >\r\n            <button className='fontColor__btn' onClick={toggleColorGrid}>\r\n                <div className='fontColor__btnDiv' style={{ height: '100%', width: '100%', display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'space-around' }}>\r\n                    <p style={{ height: '19px', margin: '0 0 4px 0', fontSize: '1rem' }}>A</p>\r\n                    <div className='fontColor__colorBar' style={{ position: 'absolute', bottom: '0px', backgroundColor: color, boxShadow: color == 'white' ? 'inset 0 0 0 1px gray' : 'none' }}></div>\r\n                </div>\r\n            </button>\r\n            <div className='fontColor__colorGrid' >\r\n                {createColorGrid(colors)}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nlet updateFontColor = (selectionEntries, prevColor, newColor) => {\r\n    newColor = hexToRgb(newColor);\r\n    let prevData = new Data();\r\n    let newData = new Data();\r\n    for (const cell of selectionEntries.values()) {\r\n        let [rowNum, colNum] = cell.split(',').map((num) => parseInt(num, 10));\r\n        prevData.setIndividualEntry('.row' + rowNum + '.col' + colNum, new Map([['fontColor', prevColor]]), rowNum, colNum, null);\r\n        newData.setIndividualEntry('.row' + rowNum + '.col' + colNum, new Map([['fontColor', newColor]]), rowNum, colNum, null);\r\n        document.querySelector(`.row${rowNum}.col${colNum}>.cellValueDiv>.cellValue`).style.color = newColor;\r\n    }\r\n    recordChange(prevData, newData);\r\n    store.dispatch(setFontColor({ fontColor: newColor }));\r\n}\r\n\r\nexport { FontColor, updateFontColor };","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\components\\Borders\\Borders.js",["659","660","661","662","663","664","665","666","667","668","669","670","671"],[],"import React, { useState } from \"react\";\r\nimport { store } from './../../../../store/store.js'\r\nimport { useSelector } from 'react-redux';\r\nimport { getBorders, setBorders } from '../../../../store/reducers/selectionSlice.js';\r\nimport Data from \"../../../../data/data.js\";\r\nimport recordChange from \"../../../../data/modifiers/recordChange.js\";\r\nimport './Borders.css'\r\n\r\nfunction Borders({ selectionEntries }) {\r\n    const [insideDropdown, setInsideDropdown] = useState(false);\r\n    const selectedBorders = useSelector(getBorders);\r\n\r\n    let toggleDropdown = (e) => {\r\n        let borderOptions = e.target.parentElement.querySelector('.borders__options');\r\n        if (borderOptions.style.opacity == 1) {\r\n            borderOptions.style.opacity = 0;\r\n            borderOptions.style.zIndex = -1;\r\n            borderOptions.style.pointerEvents = 'none';\r\n        } else {\r\n            borderOptions.style.opacity = 1;\r\n            borderOptions.style.zIndex = 5;\r\n            borderOptions.style.pointerEvents = 'auto';\r\n        }\r\n    }\r\n\r\n    let recordMouseEnter = () => {\r\n        setInsideDropdown(true);\r\n    }\r\n\r\n    let recordMouseLeave = () => {\r\n        setInsideDropdown(false);\r\n    }\r\n\r\n    let hideDropdown = (e) => {\r\n        if (!insideDropdown) {\r\n            e.currentTarget.querySelector('.borders__options').style.opacity = 0;\r\n            e.currentTarget.querySelector('.borders__options').style.zIndex = -1;\r\n            e.currentTarget.querySelector('.borders__options').style.pointerEvents = 'none';\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='borders' tabIndex='-1' onMouseEnter={recordMouseEnter} onMouseLeave={recordMouseLeave} onBlur={hideDropdown} >\r\n            <button className='borders__btn' onClick={toggleDropdown}>\r\n                <img id='borders__btnIcon' src='borderIcon.png' alt='borders icon' />\r\n            </button>\r\n            <div className='borders__options' >\r\n                <p onClick={() => updateBorders(selectionEntries, selectedBorders, 'top')} style={{ backgroundColor: selectedBorders.filter(opt => opt == 'top').length > 0 ? 'rgb(204, 255, 162)' : 'white' }}>top</p>\r\n                <p onClick={() => updateBorders(selectionEntries, selectedBorders, 'bottom')} style={{ backgroundColor: selectedBorders.filter(opt => opt == 'bottom').length > 0 ? 'rgb(204, 255, 162)' : 'white' }}>bottom</p>\r\n                <p onClick={() => updateBorders(selectionEntries, selectedBorders, 'left')} style={{ backgroundColor: selectedBorders.filter(opt => opt == 'left').length > 0 ? 'rgb(204, 255, 162)' : 'white' }}>left</p>\r\n                <p onClick={() => updateBorders(selectionEntries, selectedBorders, 'right')} style={{ backgroundColor: selectedBorders.filter(opt => opt == 'right').length > 0 ? 'rgb(204, 255, 162)' : 'white' }}>right</p>\r\n                <p onClick={() => updateBorders(selectionEntries, selectedBorders, 'none')}>none</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction updateBorders(selectionEntries, prevBorders, borderOption) {\r\n    if (borderOption == 'none') {\r\n        updateDOM(selectionEntries, prevBorders, ['none']);\r\n        return;\r\n    }\r\n    let newBorders = createNewBorders(prevBorders, borderOption);\r\n    updateDOM(selectionEntries, prevBorders, newBorders);\r\n}\r\n\r\nfunction createNewBorders(prevBorders, borderOption) {\r\n    let newBorders = [...prevBorders.filter(opt => opt != 'none')];\r\n    if (newBorders.filter(opt => opt == borderOption).length > 0) {\r\n        newBorders = newBorders.filter(opt => opt != borderOption);\r\n    } else newBorders.push(borderOption);\r\n    if (newBorders.length == 0) newBorders = ['none'];\r\n    return newBorders;\r\n}\r\n\r\nfunction updateDOM(selectionEntries, prevBorders, newBorders) {\r\n    let prevData = new Data();\r\n    let newData = new Data();\r\n    for (const cell of selectionEntries.values()) {\r\n        let [rowNum, colNum] = cell.split(',').map((num) => parseInt(num, 10));\r\n        let cellValueDiv = document.querySelector(`.row${rowNum}.col${colNum}>.cellValueDiv`);\r\n        cellValueDiv.style.boxShadow = 'none';\r\n        if (newBorders.length == 0) return;\r\n        let boxShadows = translateToBoxShadows(newBorders);\r\n        prevData.setIndividualEntry('.row' + rowNum + '.col' + colNum, new Map([['borders', prevBorders]]), rowNum, colNum, null);\r\n        newData.setIndividualEntry('.row' + rowNum + '.col' + colNum, new Map([['borders', newBorders]]), rowNum, colNum, null);\r\n        if (boxShadows != '') cellValueDiv.style.boxShadow = boxShadows;\r\n    }\r\n    recordChange(prevData, newData);\r\n    store.dispatch(setBorders({ borders: [...newBorders] }));\r\n}\r\n\r\nfunction translateToBoxShadows(newBorders) {\r\n    let boxShadows = '';\r\n    for (let i = 0; i < newBorders.length; ++i) {\r\n        switch (newBorders[i]) {\r\n            case 'top': boxShadows += 'black 0px 3px 0px -1px inset';\r\n                break;\r\n            case 'right': boxShadows += 'black -3px 0px 0px -1px inset';\r\n                break;\r\n            case 'bottom': boxShadows += 'black 0px -3px 0px -1px inset';\r\n                break;\r\n            case 'left': boxShadows += 'black 3px 0px 0px -1px inset';\r\n                break;\r\n            case 'none': boxShadows = 'none';\r\n            default: break;\r\n        }\r\n        if (i < newBorders.length - 1) boxShadows += ',';\r\n    }\r\n    return boxShadows;\r\n}\r\n\r\nexport { Borders, updateBorders, translateToBoxShadows };","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\components\\HorizontalAlignment\\HorizontalAlignment.js",["672","673"],[],"import React, { useState } from \"react\";\r\nimport { store } from '../../../../store/store.js'\r\nimport { useSelector } from 'react-redux';\r\nimport { getHorizontalAlignment, setHorizontalAlignment } from '../../../../store/reducers/selectionSlice.js';\r\nimport Data from \"../../../../data/data.js\";\r\nimport recordChange from \"../../../../data/modifiers/recordChange.js\";\r\nimport './HorizontalAlignment.css'\r\n\r\nfunction HorizontalAlignment({ selectionEntries }) {\r\n    const [insideDropdown, setInsideDropdown] = useState(false);\r\n    const horizontalAlignment = useSelector(getHorizontalAlignment);\r\n\r\n    let toggleDropdown = (e) => {\r\n        let dropdown = e.target.parentElement.querySelector('.horizontalAlignment__options');\r\n        if (dropdown.style.opacity == 1) {\r\n            dropdown.style.opacity = 0;\r\n            dropdown.style.zIndex = -1;\r\n            dropdown.style.pointerEvents = 'none';\r\n        } else {\r\n            dropdown.style.opacity = 1;\r\n            dropdown.style.zIndex = 3;\r\n            dropdown.style.pointerEvents = 'auto';\r\n        }\r\n    }\r\n\r\n    let recordMouseEnter = () => {\r\n        setInsideDropdown(true);\r\n    }\r\n\r\n    let recordMouseLeave = () => {\r\n        setInsideDropdown(false);\r\n    }\r\n\r\n    let hideDropdown = (e) => {\r\n        if (!insideDropdown) {\r\n            e.currentTarget.querySelector('.horizontalAlignment__options').style.opacity = 0;\r\n            e.currentTarget.querySelector('.horizontalAlignment__options').style.zIndex = -1;\r\n            e.currentTarget.querySelector('.horizontalAlignment__options').style.pointerEvents = 'none';\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='horizontalAlignment' tabIndex='-1' onMouseEnter={recordMouseEnter} onMouseLeave={recordMouseLeave} onBlur={hideDropdown} >\r\n            <button className={`horizontalAlignment__btn horizontalAlignment__icon_${horizontalAlignment}`} onClick={toggleDropdown}>\r\n                <p className='horizontalAlignment__iconLine_long horizontalAlignment__iconLine'></p>\r\n                <p className='horizontalAlignment__iconLine_short horizontalAlignment__iconLine'></p>\r\n                <p className='horizontalAlignment__iconLine_long horizontalAlignment__iconLine'></p>\r\n                <p className='horizontalAlignment__iconLine_short horizontalAlignment__iconLine'></p>\r\n            </button>\r\n            <div className='horizontalAlignment__options' >\r\n                <div id='horizontalAlignment__left' className='horizontalAlignment__icon_left horizontalAlignment__icon' onClick={()=>updateHorizontalAlignment(selectionEntries, horizontalAlignment, 'left')}>\r\n                    <p className='horizontalAlignment__iconLine_long horizontalAlignment__iconLine'></p>\r\n                    <p className='horizontalAlignment__iconLine_short horizontalAlignment__iconLine'></p>\r\n                    <p className='horizontalAlignment__iconLine_long horizontalAlignment__iconLine'></p>\r\n                    <p className='horizontalAlignment__iconLine_short horizontalAlignment__iconLine'></p>\r\n                </div>\r\n                <div id='horizontalAlignment__center' className='horizontalAlignment__icon_center horizontalAlignment__icon' onClick={()=>updateHorizontalAlignment(selectionEntries, horizontalAlignment, 'center')}>\r\n                    <p className='horizontalAlignment__iconLine_long horizontalAlignment__iconLine'></p>\r\n                    <p className='horizontalAlignment__iconLine_short horizontalAlignment__iconLine'></p>\r\n                    <p className='horizontalAlignment__iconLine_long horizontalAlignment__iconLine'></p>\r\n                    <p className='horizontalAlignment__iconLine_short horizontalAlignment__iconLine'></p>\r\n                </div>\r\n                <div id='horizontalAlignment__right' className='horizontalAlignment__icon_right horizontalAlignment__icon' onClick={()=>updateHorizontalAlignment(selectionEntries, horizontalAlignment, 'right')}>\r\n                    <p className='horizontalAlignment__iconLine_long horizontalAlignment__iconLine'></p>\r\n                    <p className='horizontalAlignment__iconLine_short horizontalAlignment__iconLine'></p>\r\n                    <p className='horizontalAlignment__iconLine_long horizontalAlignment__iconLine'></p>\r\n                    <p className='horizontalAlignment__iconLine_short horizontalAlignment__iconLine'></p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nlet updateHorizontalAlignment = (selectionEntries, prevHorizontalAlignment, newHorizontalAlignment) => {\r\n    let prevData = new Data();\r\n    let newData = new Data();\r\n    if (prevHorizontalAlignment == newHorizontalAlignment) return;\r\n    for (const cell of selectionEntries.values()) {\r\n        let [rowNum, colNum] = cell.split(',').map((num) => parseInt(num, 10));\r\n        prevData.setIndividualEntry('.row' + rowNum + '.col' + colNum, new Map([['horizontalAlignment', prevHorizontalAlignment]]), rowNum, colNum, null);\r\n        newData.setIndividualEntry('.row' + rowNum + '.col' + colNum, new Map([['horizontalAlignment', newHorizontalAlignment]]), rowNum, colNum, null);\r\n        document.querySelector(`.row${rowNum}.col${colNum}>.cellValueDiv>.cellValue`).style.textAlign = newHorizontalAlignment;\r\n    }\r\n    recordChange(prevData, newData);\r\n    store.dispatch(setHorizontalAlignment({ horizontalAlignment: newHorizontalAlignment }));\r\n}\r\n\r\nexport {HorizontalAlignment, updateHorizontalAlignment};","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\components\\VerticalAlignment\\VerticalAlignment.js",["674","675"],[],"import React, { useState } from \"react\";\r\nimport { store } from '../../../../store/store.js'\r\nimport { useSelector } from 'react-redux';\r\nimport { getVerticalAlignment, setVerticalAlignment } from '../../../../store/reducers/selectionSlice.js';\r\nimport Data from \"../../../../data/data.js\";\r\nimport recordChange from \"../../../../data/modifiers/recordChange.js\";\r\nimport './VerticalAlignment.css'\r\n\r\nfunction VerticalAlignment({ selectionEntries }) {\r\n    const [insideDropdown, setInsideDropdown] = useState(false);\r\n    const verticalAlignment = useSelector(getVerticalAlignment);\r\n\r\n    let toggleDropdown = (e) => {\r\n        let dropdown = e.target.parentElement.querySelector('.verticalAlignment__options');\r\n        if (dropdown.style.opacity == 1) {\r\n            dropdown.style.opacity = 0;\r\n            dropdown.style.zIndex = -1;\r\n            dropdown.style.pointerEvents = 'none';\r\n        } else {\r\n            dropdown.style.opacity = 1;\r\n            dropdown.style.zIndex = 3;\r\n            dropdown.style.pointerEvents = 'auto';\r\n        }\r\n    }\r\n\r\n    let recordMouseEnter = () => {\r\n        setInsideDropdown(true);\r\n    }\r\n\r\n    let recordMouseLeave = () => {\r\n        setInsideDropdown(false);\r\n    }\r\n\r\n    let hideDropdown = (e) => {\r\n        if (!insideDropdown) {\r\n            e.currentTarget.querySelector('.verticalAlignment__options').style.opacity = 0;\r\n            e.currentTarget.querySelector('.verticalAlignment__options').style.zIndex = -1;\r\n            e.currentTarget.querySelector('.verticalAlignment__options').style.pointerEvents = 'none';\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='verticalAlignment' tabIndex='-1' onMouseEnter={recordMouseEnter} onMouseLeave={recordMouseLeave} onBlur={hideDropdown} >\r\n            <button className='verticalAlignment__btn verticalAlignment__icon' onClick={toggleDropdown}>\r\n                <img src={`${verticalAlignment}.png`} alt={verticalAlignment + ' alignment'} />\r\n            </button>\r\n            <div className='verticalAlignment__options'>\r\n                <div id='verticalAlignment__top' className='verticalAlignment__icon' onClick={() => updateVerticalAlignment(selectionEntries, verticalAlignment, 'top')}>\r\n                    <img src='top.png' alt='top alignment' />\r\n                </div>\r\n                <div id='verticalAlignment__center' className='verticalAlignment__icon' onClick={() => updateVerticalAlignment(selectionEntries, verticalAlignment, 'center')}>\r\n                    <img src='center.png' alt='center vertical alignment' />\r\n                </div>\r\n                <div id='verticalAlignment__bottom' className='verticalAlignment__icon' onClick={() => updateVerticalAlignment(selectionEntries, verticalAlignment, 'bottom')}>\r\n                    <img src='bottom.png' alt='bottom alignment' />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nlet updateVerticalAlignment = (selectionEntries, prevVerticalAlignment, newVerticalAlignment) => {\r\n    let prevData = new Data();\r\n    let newData = new Data();\r\n    if (prevVerticalAlignment == newVerticalAlignment) return;\r\n    for (const cell of selectionEntries.values()) {\r\n        let [rowNum, colNum] = cell.split(',').map((num) => parseInt(num, 10));\r\n        prevData.setIndividualEntry('.row' + rowNum + '.col' + colNum, new Map([['verticalAlignment', prevVerticalAlignment]]), rowNum, colNum, null);\r\n        newData.setIndividualEntry('.row' + rowNum + '.col' + colNum, new Map([['verticalAlignment', newVerticalAlignment]]), rowNum, colNum, null);\r\n        document.querySelector(`.row${rowNum}.col${colNum}>.cellValueDiv`).style.justifyContent = parseVerticalAlignment(newVerticalAlignment);\r\n    }\r\n    recordChange(prevData, newData);\r\n    store.dispatch(setVerticalAlignment({ verticalAlignment: newVerticalAlignment }));\r\n}\r\n\r\nlet parseVerticalAlignment = (term) => {\r\n    switch (term) {\r\n        case 'top': return 'flex-start';\r\n        case 'center': return 'center';\r\n        case 'bottom': return 'flex-end';\r\n        default: break;\r\n    }\r\n}\r\n\r\nexport { VerticalAlignment, updateVerticalAlignment, parseVerticalAlignment };","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\tests\\helper.js",["676","677","678","679","680","681","682","683","684","685","686","687","688","689","690","691","692","693","694","695","696","697","698","699","700","701","702","703","704","705","706","707","708","709","710","711","712","713","714","715","716","717","718","719","720","721","722","723","724","725","726","727","728","729","730","731","732","733","734","735","736","737","738","739","740"],[],"import { store } from \"../store/store\";\r\n\r\nfunction compareDOM(selectedRowNum, selectedColNum, propertyObj) {\r\n    let cellValueDiv = document.querySelector(`.row${selectedRowNum}.col${selectedColNum}>.cellValueDiv`);\r\n    let cellValue = cellValueDiv.querySelector('.cellValue');\r\n    let [alteredProperty, alteredValue] = Object.entries(propertyObj)[0];\r\n\r\n    if (alteredProperty == 'textValue') {\r\n        if (cellValue.innerText != alteredValue) throw 'compareDOM(): cellValue[' + selectedRowNum + ',' + selectedColNum + '] not reflecting new ' + alteredProperty;\r\n    } else if (alteredProperty == 'fontSize') {\r\n        if (cellValue.style[alteredProperty] != alteredValue + 'px') throw 'compareDOM(): cellValue[' + selectedRowNum + ',' + selectedColNum + '] not reflecting new ' + alteredProperty;\r\n    } else if (alteredProperty == 'fontColor') {\r\n        if (cellValue.style.color != alteredValue) throw 'compareDOM(): cellValue[' + selectedRowNum + ',' + selectedColNum + '] not reflecting new ' + alteredProperty;\r\n    } else if (alteredProperty == 'cellColor') {\r\n        if (cellValueDiv.style.backgroundColor != alteredValue) throw 'compareDOM(): cellValueDiv[' + selectedRowNum + ',' + selectedColNum + '] not reflecting new ' + alteredProperty;\r\n    } else if (alteredProperty == 'borders') {\r\n        if (cellValueDiv.style.boxShadow != alteredValue) throw 'compareDOM(): cellValueDiv[' + selectedRowNum + ',' + selectedColNum + '] not reflecting new ' + alteredProperty;\r\n    } else if (alteredProperty == 'horizontalAlignment') {\r\n        if (cellValue.style.textAlign != alteredValue) throw 'compareDOM(): cellValueDiv[' + selectedRowNum + ',' + selectedColNum + '] not reflecting new ' + alteredProperty;\r\n    } else if (alteredProperty == 'verticalAlignment') {\r\n        if (cellValueDiv.style.justifyContent != alteredValue) throw 'compareDOM(): cellValueDiv[' + selectedRowNum + ',' + selectedColNum + '] not reflecting new ' + alteredProperty;\r\n    } else {\r\n        if (cellValue.style[alteredProperty] != alteredValue) throw 'compareDOM(): cellValue[' + selectedRowNum + ',' + selectedColNum + '] not reflecting new ' + alteredProperty;\r\n    }\r\n}\r\n\r\nfunction compareStore(selectedRowNum, selectedColNum, prevPropertyObj, propertyObj, prevState, prevHistoryIndex) {\r\n    let history = store.getState().history;\r\n\r\n    if (prevHistoryIndex != history.changeHistoryIndex - 1) throw 'compareStore(): changeHistoryIndex not incremented correctly after event: ' + prevHistoryIndex + ' ' + history.changeHistoryIndex;\r\n\r\n    let updatedPrevState = history.changeHistory[history.changeHistoryIndex - 1];\r\n    assert_prevState(selectedRowNum, selectedColNum, prevPropertyObj, prevState, updatedPrevState);\r\n\r\n    let entryKey = `\\.row${selectedRowNum}\\.col${selectedColNum}`;\r\n    let currentState = history.changeHistory[history.changeHistoryIndex];\r\n    assert_currentState(entryKey, propertyObj, currentState);\r\n}\r\n\r\nfunction assert_prevState(selectedRowNum, selectedColNum, prevPropertyObj, prevState, updatedPrevState) {\r\n    for (const [entryKey, data] of prevState.getIndividualEntries()) {\r\n        let prevStyleMap = data.getStyleMap();\r\n        let updatedPrevStyleMap = updatedPrevState.getIndividualEntry(entryKey).getStyleMap();\r\n        if (entryKey == 'table') assert_styles_unchanged(entryKey, prevStyleMap, updatedPrevStyleMap);\r\n        else if (entryKey.match(/\\.row\\d+\\.col\\d+$/)) { // if cell\r\n            let prevText = data.getVal();\r\n            let updatedPrevText = updatedPrevState.getIndividualEntry(entryKey).getVal();\r\n            let [entryRowNum, entryColNum] = entryKey.match(/\\.row(\\d+)\\.col(\\d+)/).slice(1, 3);\r\n            if (entryRowNum != selectedRowNum && entryColNum != selectedColNum) assert_unrelatedCell_unchanged(entryKey, prevStyleMap, updatedPrevStyleMap, prevText, updatedPrevText);\r\n            else assert_selectedCell(selectedRowNum, selectedColNum, prevPropertyObj, prevStyleMap, updatedPrevStyleMap, prevText, updatedPrevText);\r\n        } else if (entryKey.match(/\\.row\\d+/) || entryKey.match(/\\.col\\d+/)) { // if row/col\r\n            assert_styles_unchanged(entryKey, prevStyleMap, updatedPrevStyleMap);\r\n        } else throw 'assert_prevState(): cellValue[' + selectedRowNum + ',' + selectedColNum + ']: unexpected entryKey: ' + entryKey;\r\n    }\r\n}\r\n\r\nfunction assert_unrelatedCell_unchanged(entryKey, prevStyleMap, updatedPrevStyleMap, prevText, updatedPrevText) {\r\n    assert_styles_unchanged(entryKey, prevStyleMap, updatedPrevStyleMap);\r\n    assert_text_unchanged(entryKey, prevText, updatedPrevText);\r\n}\r\n\r\n// UpdatedPrevStyleMap should retain all properties from prevStyleMap. \r\n// The only possible difference should be the addition of prevPropertyObj to updatedPrevStyleMap.\r\nfunction assert_selectedCell(selectedRowNum, selectedColNum, prevPropertyObj, prevStyleMap, updatedPrevStyleMap, prevText, updatedPrevText) {\r\n    let [prevProperty, prevValue] = Object.entries(prevPropertyObj)[0];\r\n    for (const [prop, val] of updatedPrevStyleMap.entries()) {\r\n        if (prop != prevProperty && prevStyleMap.get(prop) != val) throw 'compareStore(): unrelated stylePairs of entryKey[' + selectedRowNum + ',' + selectedColNum + '] should not be changed between prevStyleMap and updatedPrevStyleMap';\r\n        if (prop == prevProperty) {\r\n            if (val != prevValue) throw 'compareStore(): updatedPrevStyleMap not reflecting prev ' + prevProperty;\r\n            if (prevProperty != 'textValue') {\r\n                if (prevStyleMap.hasOwnProperty(prevProperty) && prevStyleMap.get(prevProperty) != prevValue) throw 'compareStore(): pre-existing ' + prevProperty + ' should not be changed from ' + prevStyleMap.get(prevProperty) + ' to ' + prevValue;\r\n            } else {\r\n                if (prevText != null) {\r\n                    if (prevText != updatedPrevText) throw 'compareStore(): existing prevText not being maintained in updatedPrevText';\r\n                }\r\n                if (prevValue != updatedPrevText) throw 'compareStore(): expected prev textValue not being represented in updatedPrevText';\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n\r\nfunction assert_currentState(entryKey, propertyObj, currentState) {\r\n    if (Object.values(propertyObj).length != 1) throw 'assert_currentState(): unexpected/missing property param';\r\n    if (currentState.getGroupEntriesSize() != 0) throw 'assert_currentState(): unexpected groupEntry in currentState after event';\r\n    if (currentState.getIndividualEntriesSize() > 1) throw 'assert_currentState(): individualEntries of currentState records more than one cell';\r\n    let cellOfCurrentState = currentState.getIndividualEntry(entryKey);\r\n    if (cellOfCurrentState == undefined) throw 'assert_currentState(): individualEntries of currentState is missing expected cell';\r\n\r\n    let [property, value] = Object.entries(propertyObj)[0];\r\n    if (propertyObj.hasOwnProperty('textValue')) {\r\n        if (cellOfCurrentState.getVal() != value) throw 'assert_currentState(): unexpected/missing value in current individualEntry';\r\n    } else {\r\n        if (cellOfCurrentState.getStyleMap().size != 1) throw 'assert_currentState(): unexpected/missing stylePair in current individualEntry';\r\n        if (cellOfCurrentState.getStyleMap().get(property) != value) throw 'assert_currentState(): new ' + property + ' not stored in currentState';\r\n    }\r\n}\r\n\r\nfunction logSuccess(testName, totalTestCases) {\r\n    document.querySelector('#testConsoleLog').innerHTML = document.querySelector('#testConsoleLog').innerHTML + ',' + testName + `: ${totalTestCases}/${totalTestCases} PASS`;\r\n    let testNum = document.querySelector('#testConsoleStatus').innerHTML.match(/(\\d+)/)[0];\r\n    document.querySelector('#testConsoleStatus').innerHTML = parseInt(testNum, 10) + 1 + ' NEXT';\r\n}\r\n\r\nfunction logError(errMsg) {\r\n    document.querySelector('#testConsoleError').innerHTML = errMsg;\r\n    let testNum = document.querySelector('#testConsoleStatus').innerHTML.match(/(\\d+)/)[0];\r\n    document.querySelector('#testConsoleStatus').innerHTML = parseInt(testNum, 10) + 1 + ' FAIL';\r\n}\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////// BASEMENT /////////////////////////////////////////////////////////////////////\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nfunction assert_styles_unchanged(entryKey, prevStyleMap, updatedPrevStyleMap) {\r\n    if (prevStyleMap.size != updatedPrevStyleMap.size) throw 'compareStore(): styleMap of entryKey:' + entryKey + ' should not be changed';\r\n    for (const [prop, val] of updatedPrevStyleMap.entries()) {\r\n        if (prevStyleMap.get(prop) != val) throw 'compareStore(): styleMap of entryKey: ' + entryKey + ' should not be changed';\r\n    }\r\n}\r\n\r\nfunction assert_text_unchanged(entryKey, prevText, updatedPrevText) {\r\n    if (prevText != updatedPrevText) throw 'compareStore(): text value of entryKey: ' + entryKey + ' should not be changed';\r\n}\r\n\r\nfunction assert_store_unchanged(prevHistoryIndex) {\r\n    if (store.getState().changeHistoryIndex != prevHistoryIndex) throw 'assert_store_unchanged(): current index does not match prevHistoryIndex';\r\n}\r\n\r\nexport { compareDOM, compareStore, assert_store_unchanged, logSuccess, logError }","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\SpreadSheetPanel\\handlers\\keyboardEvents\\keyMacros.js",[],[],"C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\TablePanel\\handlers\\resizingHandler\\test.js",["741","742","743","744","745","746","747","748","749","750","751","752","753","754","755","756","757","758","759","760","761","762","763","764","765","766","767","768","769","770","771","772","773","774","775","776","777","778","779","780","781","782","783","784","785","786","787","788","789","790","791","792","793","794","795","796","797","798","799","800","801","802","803","804","805","806","807","808","809","810","811","812","813","814","815","816","817","818","819","820","821","822","823","824","825","826","827","828","829","830","831","832","833","834","835","836","837"],[],"import { getInLine, nextTurn } from '../../../../tests/sequenceHelpers.js'\r\nimport { getResizableColData, getResizableRowData } from './resizingHandler.js'\r\nimport { store } from './../../../../store/store.js'\r\nimport { logError, logSuccess } from '../../../../tests/helper.js';\r\n\r\nfunction resizersTests(turn) {\r\n    let axisCellsX = document.querySelectorAll('.AxisX');\r\n    let axisCellsY = document.querySelectorAll('.AxisY');\r\n    let resizeSelections = [[axisCellsX, -5], [axisCellsY, -1], [[axisCellsX[0]], 15], [axisCellsY, 12], [[axisCellsX[0]], 20], [[axisCellsY[0]], 12]]\r\n    try {\r\n        if (resizeSelections.length > 0) checkReactionOfResizing(1, resizeSelections[0], turn, true, resizeSelections.length);\r\n        for (let i = 1; i < resizeSelections.length; ++i) checkReactionOfResizing(i + 1, resizeSelections[i], turn, false, resizeSelections.length);\r\n    } catch (e) {\r\n        console.log('resizingErr: checkReactionOfResizing param error: ' + e);\r\n        logError(null, e);\r\n    }\r\n}\r\n\r\nfunction checkHorizontalResizersInitialization() {\r\n    try {\r\n        let elems = document.querySelectorAll('.AxisX');\r\n        let logMsg = '';\r\n        elems.forEach((elem, idx) => {\r\n            let resizer = elem.querySelector('.resizer-horizontal')\r\n            if (resizer == null) {\r\n                logMsg = logMsg + 'col' + (idx + 1) + ': horizontal resizer not found\\n';\r\n            } else if (22 != (parseInt(resizer.style.height, 10))) {\r\n                logMsg = logMsg + 'col' + (idx + 1) + ': horizontal resizer does not match height of Y-axis cell \\'' + resizer.style.height + '\\' : should be \\'22px\\' \\n';\r\n            }\r\n        })\r\n        if (logMsg.length != 0) console.log(logMsg);\r\n        else console.log('horizontalResizers appended correctly');\r\n    } catch (error) {\r\n        console.log('checkHorizontalResizersInitialization(): ' + error);\r\n    }\r\n}\r\n\r\nfunction checkVerticalResizersInitialization() {\r\n    try {\r\n        let elems = document.querySelectorAll('.AxisY');\r\n        let logMsg = '';\r\n        elems.forEach((elem, idx) => {\r\n            let resizer = elem.querySelector('.resizer-vertical')\r\n            if (resizer == null) {\r\n                logMsg = logMsg + 'row' + idx + ': vertical resizer not found\\n';\r\n            } else if (50 != (parseInt(resizer.style.width, 10))) {\r\n                logMsg = logMsg + 'row' + idx + ': vertical resizer does not match width of X-axis cell \\'' + resizer.style.width + '\\' : should be \\'50px\\'\\n';\r\n            }\r\n        })\r\n        if (logMsg.length != 0) console.log(logMsg);\r\n        else console.log('verticalResizers appended correctly');\r\n    } catch (error) {\r\n        console.log('checkVerticalResizersInitialization(): ' + error);\r\n    }\r\n}\r\n\r\nfunction checkReactionOfResizing(testCaseIndex, resizeDetails, turn, isFirstCall, totalTestCases) {\r\n    let timer;\r\n    let [axisCells, deltaIncrement] = resizeDetails;\r\n    try {\r\n        let axisClass = getAxisClass(axisCells);\r\n        let resizer;\r\n        let delta = 0;\r\n        let index = -1;\r\n        let myTurnNumber = getInLine(turn);\r\n        let mouseState = -1;\r\n        let dimensionsBeforeMove;\r\n        let dimensionsAfterMove;\r\n        let changeHistoryBeforeMove;\r\n        let changeHistoryIndexBeforeMove;\r\n        let changeHistoryAfterMove;\r\n        let changeHistoryIndexAfterMove;\r\n        timer = setInterval(() => {\r\n            switch (mouseState) {\r\n                case -1: // FIFO waiting queue\r\n                    if (turn.current == myTurnNumber) {\r\n                        if (isFirstCall) {\r\n                            console.log('\\n--------RESIZING TEST-----------------------');\r\n                            checkHorizontalResizersInitialization();\r\n                            checkVerticalResizersInitialization();\r\n                        }\r\n                        mouseState = 0;\r\n                    }\r\n                    break;\r\n                case 0:\r\n                    if (++index < axisCells.length) {\r\n                        resizer = getResizer(axisCells[index], axisClass)\r\n                        mouseState++;\r\n                    } else {\r\n                        console.log('resizing affects store and DOM correctly');\r\n                        if (testCaseIndex == totalTestCases) logSuccess('resizingTest()', totalTestCases);\r\n                        nextTurn(turn); // increment turn.current\r\n                        clearInterval(timer);\r\n                    }\r\n                    break;\r\n                case 1:\r\n                    resizer.dispatchEvent(new MouseEvent('mousedown', { bubbles: true, cancelable: true, clientX: 0 }));\r\n                    try {\r\n                        dimensionsBeforeMove = captureResizerData(axisClass, axisCells[index]);\r\n                        let historyState = store.getState().history;\r\n                        [changeHistoryBeforeMove, changeHistoryIndexBeforeMove] = [historyState.changeHistory, historyState.changeHistoryIndex];\r\n                    } catch (error) {\r\n                        console.log('resizingErr: ' + error);\r\n                        clearInterval(timer);\r\n                    }\r\n                    mouseState++;\r\n                    break;\r\n                case 2:\r\n                case 3:\r\n                case 4:\r\n                    let params = { bubbles: true, cancelable: true };\r\n                    params[axisClass == 'AxisX' ? 'clientX' : 'clientY'] = delta += deltaIncrement;\r\n                    resizer.dispatchEvent(new MouseEvent('mousemove', params));\r\n                    mouseState++;\r\n                    break;\r\n                case 5:\r\n                    resizer.dispatchEvent(new MouseEvent('mouseup', { bubbles: true, cancelable: true }));\r\n                    try {\r\n                        dimensionsAfterMove = captureResizerData(axisClass, axisCells[index]);\r\n                        let historyState = store.getState().history;\r\n                        [changeHistoryAfterMove, changeHistoryIndexAfterMove] = [historyState.changeHistory, historyState.changeHistoryIndex];\r\n                        if (!expectedTableChanges(axisClass, dimensionsBeforeMove, dimensionsAfterMove, delta)) throw 'mousemove: resizer not affecting table correctly';\r\n                        if (!expectedChangeHistoryChanges(axisClass, delta, changeHistoryBeforeMove, changeHistoryIndexBeforeMove, changeHistoryAfterMove, changeHistoryIndexAfterMove)) throw 'mousemove: resizer not affecting changeHistory properly';\r\n                    } catch (error) {\r\n                        console.log('resizingErr: ' + error);\r\n                        clearInterval(timer);\r\n                    }\r\n                    delta = 0;\r\n                    mouseState = 0;\r\n                    break;\r\n                default: break;\r\n            }\r\n        }, 5);\r\n    } catch (e) {\r\n        let errMsg = 'Err: checkReactionOfResizing(): { testCaseIndex: ' + testCaseIndex + ' } : ' + e;\r\n        console.log(errMsg);\r\n        logError(errMsg);\r\n        clearInterval(timer);\r\n    }\r\n}\r\n\r\nfunction getAxisClass(axisCells) {\r\n    let arr = [];\r\n    if (typeof axisCells !== typeof arr) throw 'getAxisClass(): axisCells is not an array';\r\n    if (axisCells.length == 0) throw 'getAxisClass(): axisCells is empty';\r\n    if (axisCells instanceof Element) throw 'getAxisClass(): axisCells should be an array of DOM elements'\r\n    if (!(axisCells[0] instanceof Element)) throw 'getAxisClass(): axisCells should be an array of DOM elements';\r\n    let axisName = [...axisCells[0].classList].filter(name => /^Axis.$/.test(name));\r\n    if (axisName.length == 0) throw 'getAxisClass(): axisClass not found in axisCells[0]';\r\n    if (axisName[0] != 'AxisX' && axisName[0] != 'AxisY') throw 'getAxisClass(): found axis class not equal to \"AxisX\" or \"AxisY\"'\r\n    return axisName[0];\r\n}\r\n\r\nfunction getResizer(axisCell, axisClass) {\r\n    if (!(axisCell instanceof Element)) throw 'getResizer(): axisCell should be a valid DOM element';\r\n    let reg = new RegExp(axisClass);\r\n    let possibleAxisClass = [...axisCell.classList].filter(name => reg.test(name));\r\n    if (possibleAxisClass.length == 0) throw 'getResizer(): axisCell\\'s axis class must match axis parameter';\r\n    let resizer = axisCell.querySelector(axisClass == 'AxisX' ? '.resizer-horizontal' : '.resizer-vertical');\r\n    if (!resizer instanceof Element) throw 'getResizer(): resizer not found in axisCell';\r\n    return resizer;\r\n}\r\n\r\nfunction captureResizerData(axisClass, axisCell) {\r\n    let tableDimensions = store.getState().tableDimensions;\r\n    if (axisClass == 'AxisX') {\r\n        let colNum = getResizerIndex(axisClass, axisCell);\r\n        let cellWidth = parseInt(axisCell.style.width, 10);\r\n        return getResizableColData(colNum, cellWidth, tableDimensions.width)\r\n    } else {\r\n        let rowNum = getResizerIndex(axisClass, axisCell);\r\n        let cellHeight = parseInt(axisCell.style.height, 10);\r\n        return getResizableRowData(rowNum, cellHeight, tableDimensions.height);\r\n    }\r\n}\r\n\r\nfunction getResizerIndex(axisClass, axisCell) {\r\n    if (axisClass == 'AxisX') return parseInt([...axisCell.classList].filter(name => /^col\\d+$/.test(name))[0].slice(-1), 10);\r\n    else return parseInt([...axisCell.classList].filter(name => /^row\\d+$/.test(name))[0].slice(-1), 10);\r\n}\r\n\r\n// check that when delta is applied to all width/marginLeft values in dimensionsBeforeMove,\r\n// that it is reflected in dimensionsAfterMove\r\nfunction expectedTableChanges(axisClass, dimensionsBeforeMove, dimensionsAfterMove, delta) {\r\n    try {\r\n        if (axisClass == 'AxisX') {\r\n            for (const [entryKey, data] of dimensionsBeforeMove.getIndividualEntries()) {\r\n                if (!dimensionsAfterMove.hasIndividualEntry(entryKey)) throw entryKey + ' in dimensionsBeforeMove, but not found in dimensionsAfterMove';\r\n                let dataAfter = dimensionsAfterMove.getIndividualEntry(entryKey);\r\n                let beforeStyleMap = data.getStyleMap();\r\n                let afterStyleMap = dataAfter.getStyleMap();\r\n                if (beforeStyleMap.size != 1 || afterStyleMap.size != 1) throw entryKey + ' should not have multiple styleMap entries'\r\n                if (entryKey == 'table') {\r\n                    if (beforeStyleMap.get('width') == null || afterStyleMap.get('width') == null) throw entryKey + ' is missing property \"width\"';\r\n                    if (beforeStyleMap.get('width') + delta != afterStyleMap.get('width')) throw entryKey + ' width not updated properly';\r\n                } else if (!/.col\\d+/.test(entryKey)) {\r\n                    if (beforeStyleMap.get('width') == null || afterStyleMap.get('width') == null) throw entryKey + ' is missing property \"width\"';\r\n                    if (beforeStyleMap.get('width') + delta != afterStyleMap.get('width')) throw entryKey + ' width not updated properly';\r\n                    if (data.row != dataAfter.row) throw entryKey + ' row does not match';\r\n                } else {\r\n                    if (data.cellRow != dataAfter.cellRow) throw entryKey + ' row does not match';\r\n                    if (data.cellCol != dataAfter.cellCol) throw entryKey + ' col does not match';\r\n                    if (data.val != dataAfter.val) throw entryKey + ' val does not match';\r\n                    if (beforeStyleMap.get('width') == null) {\r\n                        if (beforeStyleMap.get('marginLeft') == null || afterStyleMap.get('marginLeft') == null) throw entryKey + ' is missing property \"marginLeft\"';\r\n                        if (beforeStyleMap.get('marginLeft') + delta != afterStyleMap.get('marginLeft')) throw entryKey + ' marginLeft not updated properly';\r\n                    } else {\r\n                        if (afterStyleMap.get('width') == null) throw entryKey + ' is missing property \"width\"';\r\n                        if (beforeStyleMap.get('width') + delta != afterStyleMap.get('width')) throw entryKey + ' width not updated properly';\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (const [entryKey, data] of dimensionsBeforeMove.getIndividualEntries()) {\r\n                if (!dimensionsAfterMove.hasIndividualEntry(entryKey)) throw entryKey + ' in dimensionsBeforeMove, but not found in dimensionsAfterMove';\r\n                let dataAfter = dimensionsAfterMove.getIndividualEntry(entryKey);\r\n                let beforeStyleMap = data.getStyleMap();\r\n                let afterStyleMap = dataAfter.getStyleMap();\r\n                if (beforeStyleMap.size != 1 || afterStyleMap.size != 1) throw entryKey + ' should not have multiple styleMap entries'\r\n                if (beforeStyleMap.get('height') == null || afterStyleMap.get('height') == null) throw entryKey + ' is missing property \"height\"';\r\n                if (beforeStyleMap.get('height') + delta != afterStyleMap.get('height')) throw entryKey + ' height not updated properly';\r\n                if (!/.col\\d+/.test(entryKey)) {\r\n                    if (data.row != dataAfter.row) throw entryKey + ' row does not match';\r\n                } else {\r\n                    if (data.cellRow != dataAfter.cellRow) throw entryKey + ' row does not match';\r\n                    if (data.cellCol != dataAfter.cellCol) throw entryKey + ' col does not match';\r\n                    if (data.val != dataAfter.val) throw entryKey + ' val does not match';\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    } catch (error) {\r\n        throw 'expectedTableChanges(): ' + error;\r\n    }\r\n}\r\n\r\nfunction expectedChangeHistoryChanges(axisClass, delta, changeHistoryBeforeMove, changeHistoryIndexBeforeMove, changeHistoryAfterMove, changeHistoryIndexAfterMove) {\r\n    try {\r\n        if (changeHistoryIndexBeforeMove != changeHistoryIndexAfterMove - 1) throw 'changeHistoryIndex not updated properly';\r\n        // preservation\r\n        for (const [entryKey, value] of changeHistoryBeforeMove[changeHistoryIndexBeforeMove].getIndividualEntries()) {\r\n            if (!changeHistoryAfterMove[changeHistoryIndexBeforeMove].hasIndividualEntry(entryKey)) throw 'entry not preserved';\r\n            let valueAfterMove = changeHistoryAfterMove[changeHistoryIndexBeforeMove].getIndividualEntry(entryKey);\r\n            if (value.getStyleMap().size != valueAfterMove.getStyleMap().size) throw \"valueAfterMove does not preserve  styleMap pairs of value\";\r\n            let valueAfterMoveStyleMap = valueAfterMove.getStyleMap();\r\n            for (const [property, val] of value.getStyleMap().entries()) {\r\n                if (valueAfterMoveStyleMap.get(property) !== val) throw 'valueAfterMove does not preserve styleMap pairs of value';\r\n            }\r\n            if (!/.col\\d+/.test(entryKey) && entryKey !== 'table' && value.getRow() != valueAfterMove.getRow()) throw 'valueAfterMove does not preserve row of value';\r\n            else if (/.col\\d+/.test(entryKey) && (value.getCellRow() != valueAfterMove.getCellRow()\r\n                || value.getCellCol() != valueAfterMove.getCellCol()\r\n                || value.getVal() != valueAfterMove.getVal())) throw 'valueAfterMove does not preserve cellRow/cellCol/val of value';\r\n        }\r\n        // check resizing is reflected in changeHistoryAfterMove\r\n        for (const [entryKey, valueAfterMove] of changeHistoryAfterMove[changeHistoryIndexAfterMove].getIndividualEntries()) {\r\n            if (valueAfterMove.getStyleMap().size != 1) throw 'unnecessary stylePair in valueAfterMove';\r\n            if (axisClass == 'AxisX') {\r\n                if (valueAfterMove.getStyleMap().has('width')) {\r\n                    let w = valueAfterMove.getStyleMap().get('width');\r\n                    if (isNaN(parseInt(w, 10)) || parseInt(w, 10) !== w) throw 'horizontal resizing not updating stylePair w/ numerical value';\r\n                    let valueBeforeMove = changeHistoryAfterMove[changeHistoryIndexBeforeMove].getIndividualEntry(entryKey);\r\n                    if (valueBeforeMove.getStyleMap().get('width') != w - delta) throw 'width not adjusted by delta in changeHistory';\r\n                } else if (valueAfterMove.getStyleMap().has('marginLeft')) {\r\n                    let ml = valueAfterMove.getStyleMap().get('marginLeft');\r\n                    if (isNaN(parseInt(ml, 10)) || parseInt(ml, 10) !== ml) throw 'horizontal resizing not updating stylePair w/ numerical value';\r\n                    let valueBeforeMove = changeHistoryAfterMove[changeHistoryIndexBeforeMove].getIndividualEntry(entryKey);\r\n                    if (valueBeforeMove.getStyleMap().get('marginLeft') != ml - delta) throw 'ml not adjusted by delta in changeHistory';\r\n                } else throw 'horizontal resizing has stylePair property different from height/marginLeft';\r\n            } else if (axisClass = 'AxisY') {\r\n                if (valueAfterMove.getStyleMap().has('height')) {\r\n                    let h = valueAfterMove.getStyleMap().get('height');\r\n                    if (isNaN(parseInt(h, 10)) || parseInt(h, 10) !== h) throw 'vertical resizing not updating stylePair w/ numerical value';\r\n                    let valueBeforeMove = changeHistoryAfterMove[changeHistoryIndexBeforeMove].getIndividualEntry(entryKey);\r\n                    if (valueBeforeMove.getStyleMap().get('height') != h - delta) throw 'height not adjusted by delta in changeHistory';\r\n                } else throw 'vertical resizing has stylePair property different from height';\r\n            }\r\n        }\r\n        return true;\r\n    } catch (error) {\r\n        throw 'expectedChangeHistoryChanges(): ' + error;\r\n    }\r\n}\r\n\r\nexport { resizersTests, checkReactionOfResizing };","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\TablePanel\\helpers\\buildSheet\\test.js",["838","839","840","841","842","843","844","845","846","847","848","849","850","851","852"],[],"import { store } from \"../../../../store/store\";\r\nimport { logError, logSuccess } from \"../../../../tests/helper\";\r\nimport { getInLine, nextTurn } from \"../../../../tests/sequenceHelpers\";\r\nimport assembleTableData from './helpers/assembleTableData.js';\r\nimport { getRowsCols } from './helpers/util.js';\r\n\r\nfunction buildSheetTest(atomicTurn, loadedSheet, rows, cols, defaultCellHeight, defaultCellWidth) {\r\n    let myTurnNumber = getInLine(atomicTurn);\r\n    let timer;\r\n\r\n    timer = setInterval(() => {\r\n        try {\r\n            if (atomicTurn.current == myTurnNumber) {\r\n                console.log('\\n--------BUILD TEST-----------------------');\r\n                let tableData = assembleTableData(loadedSheet, rows, cols, defaultCellHeight, defaultCellWidth);\r\n                [rows, cols] = [store.getState().tableDimensions.totalRows, store.getState().tableDimensions.totalCols];\r\n\r\n                // assert that all axis cells exist\r\n                let axisCellsX = document.querySelectorAll('.AxisX');\r\n                let axisCellsY = document.querySelectorAll('.AxisY');\r\n                if (axisCellsX.length != cols || axisCellsY.length != rows) throw 'incorrect rows/cols in DOM: cols ' + axisCellsX.length + ' rows ' + axisCellsY.length;\r\n                for (let i = 0; i < rows; ++i) {\r\n                    if (document.querySelectorAll(`.row${i + 1}.entryCell`).length != cols) throw 'incorrect #entryCells for row: ' + i + 1;\r\n                }\r\n\r\n                // assert that each cell has correct value and styling\r\n                for (let i = 0; i < rows; i++) {\r\n                    for (let j = 0; j < cols; j++) {\r\n                        let entryCell = document.querySelector(`.row${i + 1}.col${j + 1}.entryCell`);\r\n                        let entryCellData = tableData[i][j];\r\n\r\n                        if (entryCell.querySelector('input').value != entryCellData.val) throw 'DOM value does not match tableData for cell: row' + (i + 1) + ' col' + (j + 1) + ' ' + entryCellData.val;\r\n\r\n                        for (let p = 0; p < entryCellData.styleMap.length; ++p) {\r\n                            switch (entryCellData.styleMap[p][0]) {\r\n                                case 'height':\r\n                                    if (parseInt(entryCell.style.height, 10) != entryCellData.styleMap[p][1]) throw 'DOM cell height does not match tableData: row' + (i + 1) + ' col' + (j + 1);\r\n                                    break;\r\n                                case 'width':\r\n                                    if (parseInt(entryCell.style.width, 10) != entryCellData.styleMap[p][1]) throw 'DOM cell width does not match tableData: row' + (i + 1) + ' col' + (j + 1);\r\n                                    break;\r\n                                case 'marginLeft':\r\n                                    if (parseInt(entryCell.style.marginLeft, 10) != entryCellData.styleMap[p][1]) throw 'DOM cell marginLeft does not match tableData: row' + (i + 1) + ' col' + (j + 1);\r\n                                    break;\r\n                                default: break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                console.log('buildTest successful');\r\n                logSuccess('buildTest()', 1);\r\n                nextTurn(atomicTurn);\r\n                clearInterval(timer);\r\n            }\r\n        } catch (e) {\r\n            let errMsg = 'Err: buildSheetTest(): ' + e;\r\n            console.log(errMsg);\r\n            logError(errMsg);\r\n            clearInterval(timer);\r\n        }\r\n    }, 100);\r\n}\r\n\r\nexport default buildSheetTest;","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\data\\modifiers\\recordChange.js",["853","854"],[],"import Data from '../data.js';\r\nimport updateCollectedData from './updateCollectedData.js';\r\nimport {store} from '../../store/store.js'\r\nimport {newHistoryState} from '../../store/reducers/historySlice.js'\r\n\r\nfunction recordChange(dataBeforeChange, dataAfterChange) {\r\n    let history = store.getState().history;\r\n    let prevRecordedData = updatePrevRecordedData(history.changeHistory[history.changeHistoryIndex], dataBeforeChange);\r\n    let updatedCollectedData = updateCollectedData(dataAfterChange, history.collectedData);\r\n    store.dispatch(newHistoryState({prevRecordedData, dataAfterChange, collectedData: updatedCollectedData}));\r\n}\r\nfunction updatePrevRecordedData(prevData, dataBeforeChange) {\r\n    let updatedPrevData = new Data();\r\n    for (const [entryKey, data] of dataBeforeChange.getIndividualEntries()) {\r\n        let styleMap = new Map();\r\n        if (prevData.hasIndividualEntry(entryKey)) {\r\n            styleMap = prevData.getIndividualEntry(entryKey).getStyleMap();\r\n        }\r\n        for (const [property, val] of data.getStyleMap().entries()) styleMap.set(property, val);\r\n        let args = [entryKey, styleMap];\r\n        if (entryKey != 'table' && !/\\.col\\d+/.test(entryKey)) args.push(data.getRow());\r\n        if (/\\.col\\d+/.test(entryKey)) {\r\n            args.push(data.getCellRow(), data.getCellCol());\r\n            if (prevData.hasIndividualEntry(entryKey)) args.push(prevData.getIndividualEntry(entryKey).getVal());\r\n            else args.push(data.getVal());\r\n        }\r\n        updatedPrevData.setIndividualEntry(...args);\r\n    }\r\n    for (const [entryKey, data] of prevData.getIndividualEntries()) {\r\n        let args = [entryKey, data.getStyleMap()];\r\n        if (entryKey != 'table' && !/\\.col\\d+/.test(entryKey)) args.push(data.getRow());\r\n        if (/\\.col\\d+/.test(entryKey)) args.push(data.getCellRow(), data.getCellCol(), data.getVal());\r\n        if (!updatedPrevData.hasIndividualEntry(entryKey)) updatedPrevData.setIndividualEntry(...args);\r\n    }\r\n    // group entries\r\n    for (const [group, styleMap] of dataBeforeChange.getGroupEntries()) {\r\n        let updatedStyleMap = new Map();\r\n        if (prevData.hasGroup(group)) {\r\n            updatedStyleMap = prevData.getGroup(group);\r\n        }\r\n        for (const [property, val] of styleMap.entries()) updatedStyleMap.set(property, val);\r\n        updatedPrevData.setGroup(group, updatedStyleMap);\r\n    }\r\n    for (const [group, styleMap] of prevData.getGroupEntries()) {\r\n        if (!updatedPrevData.hasGroup(group)) updatedPrevData.setGroup(group, styleMap);\r\n    }\r\n    return updatedPrevData;\r\n}\r\n\r\nexport default recordChange;","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\data\\modifiers\\applyChange.js",["855","856","857","858","859","860","861","862","863","864","865","866","867"],[],"import { store } from './../../store/store.js'\r\nimport { setTableDimensions } from '../../store/reducers/tableDimensionsSlice.js'\r\nimport { updateScrollDimensions } from '../../components/TablePanel/handlers/scrollSnapHandler/scrollSnapHandler.js';\r\n\r\nfunction updateTableDimensions(styleMap) {\r\n    let h = null;\r\n    let w = null;\r\n    for (const [property, value] of styleMap.entries()) {\r\n        if (property == 'height') h = value;\r\n        else if (property == 'width') w = value;\r\n    }\r\n    store.dispatch(setTableDimensions({ height: h, width: w }));\r\n}\r\n\r\nfunction applyChange(entry, styleMap, val) {\r\n    if (val != null) {\r\n        entry.querySelector('input').value = val;\r\n        entry.querySelector('.cellValueDiv>.cellValue').innerText = val;\r\n    }\r\n    for (const [property, value] of styleMap.entries()) {\r\n        switch (property) {\r\n            case 'height':\r\n                entry.style.height = value + 'px';\r\n                if ([...entry.classList].filter(name => /^col0$/.test(name)).length != 0) {\r\n                    entry.style.lineHeight = value + 'px';\r\n                }\r\n                if ([...entry.classList].filter(name => /^row0$/.test(name)).length == 0 &&\r\n                    [...entry.classList].filter(name => /^col0$/.test(name)).length == 0 &&\r\n                    [...entry.classList].filter(name => /^col\\d+$/.test(name)).length != 0) {\r\n                    entry.querySelector('.coverDiv').style.height = value + 'px';\r\n                }\r\n                break;\r\n            case 'width':\r\n                entry.style.width = value + 'px';\r\n                if ([...entry.classList].filter(name => /^row0$/.test(name)).length == 0 &&\r\n                    [...entry.classList].filter(name => /^col0$/.test(name)).length == 0 &&\r\n                    [...entry.classList].filter(name => /^col\\d+$/.test(name)).length != 0) {\r\n                    entry.querySelector('input').style.width = value - 4 + 'px';\r\n                    entry.querySelector('.coverDiv').style.width = value + 'px';\r\n                }\r\n                break;\r\n            case 'marginLeft':\r\n                entry.style.marginLeft = value + 'px';\r\n                break;\r\n            case 'fontWeight':\r\n                entry.querySelector('.cellValue').style.fontWeight = value;\r\n                break;\r\n            case 'fontStyle':\r\n                entry.querySelector('.cellValue').style.fontStyle = value;\r\n                break;\r\n            case 'textDecoration':\r\n                entry.querySelector('.cellValue').style.textDecoration = value;\r\n                break;\r\n            case 'cellColor':\r\n                entry.querySelector('.cellValueDiv').style.backgroundColor = value;\r\n                break;\r\n            case 'fontColor':\r\n                entry.querySelector('.cellValue').style.color = value;\r\n                break;\r\n            case 'horizontalAlignment':\r\n                entry.querySelector('.cellValue').style.textAlign = value;\r\n                break;\r\n            case 'verticalAlignment':\r\n                let parsedValue = value;\r\n                switch (value) {\r\n                    case 'top':\r\n                        parsedValue = 'flex-start';\r\n                        break;\r\n                    case 'bottom':\r\n                        parsedValue = 'flex-end';\r\n                        break;\r\n                    default: break;\r\n                }\r\n                entry.querySelector('.cellValueDiv').style.justifyContent = parsedValue;\r\n                break;\r\n            case 'fontFamily':\r\n                entry.querySelector('.cellValue').style.fontFamily = value;\r\n                break;\r\n            case 'fontSize':\r\n                entry.querySelector('.cellValue').style.fontSize = value + 'px';\r\n                break;\r\n            case 'borders':\r\n                let boxShadows = '';\r\n                for (let i = 0; i < value.length; ++i) {\r\n                    switch (value[i]) {\r\n                        case 'top': boxShadows += 'inset 0 3px 0 -1px black';\r\n                            break;\r\n                        case 'right': boxShadows += 'inset -3px 0 0 -1px black';\r\n                            break;\r\n                        case 'bottom': boxShadows += 'inset 0 -3px 0 -1px black';\r\n                            break;\r\n                        case 'left': boxShadows += 'inset 3px 0 0 -1px black';\r\n                            break;\r\n                        case 'none': boxShadows = 'none';\r\n                            break;\r\n                        default: break;\r\n                    }\r\n                    if (i < value.length - 1) boxShadows += ',';\r\n                }\r\n                if (boxShadows == '') boxShadows = 'none';\r\n                entry.querySelector('.cellValueDiv').style.boxShadow = boxShadows;\r\n                break;\r\n            default: break;\r\n        }\r\n    }\r\n}\r\n\r\nfunction applyGroupChange(group, styleMap) {\r\n    if (/^\\.col\\d+$/.test(group)) {\r\n        for (const [property, value] of styleMap) {\r\n            if (property == 'width') {\r\n                let entries = document.querySelectorAll(group);\r\n                let dx = value - parseInt(entries[0].style.width, 10);\r\n                entries[0].style.width = value + 'px';\r\n                for (let i = 1; i < entries.length; ++i) {\r\n                    entries[i].style.width = value + 'px';\r\n                    entries[i].querySelector('input').style.width = value - 8 + 'px';\r\n                    entries[i].querySelector('.coverDiv').style.width = value + 'px';\r\n                }\r\n                let colNum = parseInt(group.match(/(\\d+)/)[0], 10);\r\n                let elem;\r\n                while ((elem = document.querySelector(`.col${++colNum}`)) != null) {\r\n                    let entries = document.querySelectorAll(`.col${colNum}`);\r\n                    for (let i = 0; i < entries.length; ++i) {\r\n                        entries[i].style.marginLeft = parseInt(entries[i].style.marginLeft, 10) + dx + 'px';\r\n                    }\r\n                }\r\n                document.querySelector('#scrollBarLayer').style.width = store.getState().tableDimensions.width - 50 + 'px';\r\n                updateScrollDimensions();\r\n            }\r\n        }\r\n    } else if (/^\\.row\\d+$/.test(group)) {\r\n        for (const [property, value] of styleMap) {\r\n            if (property == 'height') {\r\n                let entries = document.querySelectorAll(group);\r\n                entries[0].style.height = value + 'px';\r\n                entries[1].style.height = value + 'px';\r\n                entries[1].style.lineHeight = value + 'px';\r\n                for (let i = 2; i < entries.length; ++i) {\r\n                    entries[i].style.height = value + 'px';\r\n                    entries[i].querySelector('.coverDiv').style.height = value + 'px';\r\n                }\r\n                document.querySelector('#scrollBarLayer').style.height = store.getState().tableDimensions.height - 22 + 'px';\r\n                updateScrollDimensions();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport { updateTableDimensions, applyChange, applyGroupChange };","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\data\\modifiers\\updateCollectedData.js",["868","869"],[],"import Data from '../data.js';\r\n\r\nfunction updateCollectedData(dataAfterChange, prevCollectedData) {\r\n    let updatedCollectedData = new Data();\r\n    for (const [entryKey, data] of dataAfterChange.getIndividualEntries()) {\r\n        let styleMap = new Map();\r\n        if (prevCollectedData.hasIndividualEntry(entryKey)) {\r\n            styleMap = prevCollectedData.getIndividualEntry(entryKey).getStyleMap();\r\n        }\r\n        for (const [property, val] of data.getStyleMap().entries()) styleMap.set(property, val);\r\n        let args = [entryKey, styleMap];\r\n        if (entryKey != 'table' && !/\\.col\\d+/.test(entryKey)) args.push(data.getRow());\r\n        if (/\\.col\\d+/.test(entryKey)) {\r\n            args.push(data.getCellRow(), data.getCellCol());\r\n            if (prevCollectedData.hasIndividualEntry(entryKey)) args.push(prevCollectedData.getIndividualEntry(entryKey).getVal());\r\n            else args.push(data.getVal());\r\n        }\r\n        updatedCollectedData.setIndividualEntry(...args);\r\n    }\r\n    for (const [entryKey, data] of prevCollectedData.getIndividualEntries()) {\r\n        let args = [entryKey, data.getStyleMap()];\r\n        if (entryKey != 'table' && !/\\.col\\d+/.test(entryKey)) args.push(data.getRow());\r\n        if (/\\.col\\d+/.test(entryKey)) args.push(data.getCellRow(), data.getCellCol(), data.getVal());\r\n        if (!updatedCollectedData.hasIndividualEntry(entryKey)) updatedCollectedData.setIndividualEntry(...args)\r\n    }\r\n    // group entries\r\n    for (const [group, styleMap] of dataAfterChange.getGroupEntries()) {\r\n        let updatedStyleMap = new Map();\r\n        if (prevCollectedData.hasGroup(group)) {\r\n            updatedStyleMap = prevCollectedData.getGroup(group);\r\n        }\r\n        for (const [property, val] of styleMap.entries()) updatedStyleMap.set(property, val);\r\n        updatedCollectedData.setGroup(group, updatedStyleMap);\r\n    }\r\n    for (const [group, styleMap] of prevCollectedData.getGroupEntries()) {\r\n        if (!updatedCollectedData.hasGroup(group)) updatedCollectedData.setGroup(group, styleMap)\r\n    }\r\n    return updatedCollectedData;\r\n}\r\nexport default updateCollectedData;","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\TablePanel\\handlers\\cellHandler\\selectionHandler\\test.js",["870","871","872","873","874","875","876","877","878","879","880"],[],"import { logError, logSuccess } from '../../../../../tests/helper.js';\r\nimport { getInLine, nextTurn } from '../../../../../tests/sequenceHelpers.js'\r\nimport { store } from './../../../../../store/store.js'\r\n\r\nconst WAIT_IN_QUEUE = -1;\r\nconst ARRANGE_AND_ACTION = 0;\r\nconst ASSERT = 1;\r\n\r\nconst ARRANGE_AND_ACTION_SINGLE_CLICK = 0;\r\nconst ASSERT_SINGLE_CLICK = 1;\r\nconst ACTION_DOUBLE_CLICK = 2;\r\nconst ASSERT_DOUBLE_CLICK = 3;\r\n\r\nfunction selectionTest(atomicTurn) {\r\n    let selections = [[4, 5], [1, 1], [3, 7], [8, 2], [2, 4]];\r\n    try {\r\n        if (selections.length > 0) checkReactionOfDoubleClickSelection(1, selections[0], atomicTurn, true, selections.length);\r\n        for (let i = 1; i < selections.length; ++i) checkReactionOfDoubleClickSelection(i + 1, selections[i], atomicTurn, false, selections.length);\r\n    } catch (e) {\r\n        console.log('Error: checkReactionOfDoubleClickSelection param error: ' + e);\r\n        logError(null, null, null, e);\r\n    }\r\n}\r\n\r\nfunction checkReactionOfSingleClickSelection(testCaseIndex, testDetails, atomicTurn, isFirstCall, totalTestCases) {\r\n    let [rowNum, colNum] = testDetails;\r\n    let cell = document.querySelector(`.row${rowNum}.col${colNum} .coverDiv`);\r\n    let myTurnNumber = getInLine(atomicTurn);\r\n    let stage = WAIT_IN_QUEUE;\r\n    let prevSelectionEntries;\r\n    let expectedSelectionEntries;\r\n    let timer = setInterval(() => {\r\n        try {\r\n            switch (stage) {\r\n                case WAIT_IN_QUEUE:\r\n                    if (atomicTurn.current == myTurnNumber) {\r\n                        if (isFirstCall) console.log('\\n--------SELECTION TEST (single click)--------------------');\r\n                        stage = ARRANGE_AND_ACTION;\r\n                    }\r\n                    break;\r\n                case ARRANGE_AND_ACTION:\r\n                    // arrange\r\n                    prevSelectionEntries = store.getState().selection.entries;\r\n                    expectedSelectionEntries = new Set([`${rowNum},${colNum}`])\r\n\r\n                    // action\r\n                    cell.focus();\r\n                    cell.dispatchEvent(new MouseEvent('mousedown', { bubbles: true, cancelable: true, clientX: 0 }));\r\n\r\n                    stage = ASSERT;\r\n                    break;\r\n                case ASSERT:\r\n                    compareStoreAndDOM_singleClick(prevSelectionEntries, expectedSelectionEntries);\r\n                    console.log('selection (single click) affects store and DOM correctly');\r\n                    if (testCaseIndex == totalTestCases) logSuccess('singleClickSelectionTest', totalTestCases);\r\n                    nextTurn(atomicTurn);\r\n                    clearInterval(timer);\r\n                    break;\r\n            }\r\n        } catch (e) {\r\n            let errMsg = 'Err: checkReactionOfSingleClickSelection(): { testCaseIndex: ' + testCaseIndex + ' } : ' + e;\r\n            console.log(errMsg);\r\n            logError(errMsg);\r\n            clearInterval(timer);\r\n        }\r\n    }, 200);\r\n}\r\n\r\nfunction checkReactionOfDoubleClickSelection(testCaseIndex, testDetails, atomicTurn, isFirstCall, totalTestCases) {\r\n    let [rowNum, colNum] = testDetails;\r\n    let cell = document.querySelector(`.row${rowNum}.col${colNum} .coverDiv`);\r\n    let myTurnNumber = getInLine(atomicTurn);\r\n    let stage = WAIT_IN_QUEUE;\r\n    let prevSelectionEntries;\r\n    let expectedSelectionEntries;\r\n    let timer = setInterval(() => {\r\n        try {\r\n            switch (stage) {\r\n                case WAIT_IN_QUEUE:\r\n                    if (atomicTurn.current == myTurnNumber) {\r\n                        if (isFirstCall) console.log('\\n--------SELECTION TEST (DOUBLE CLICK)--------------------');\r\n                        stage = ARRANGE_AND_ACTION_SINGLE_CLICK;\r\n                    }\r\n                    break;\r\n                case ARRANGE_AND_ACTION_SINGLE_CLICK:\r\n                    // arrange\r\n                    prevSelectionEntries = store.getState().selection.entries;\r\n                    expectedSelectionEntries = new Set([`${rowNum},${colNum}`])\r\n\r\n                    // action\r\n                    cell.focus();\r\n                    cell.dispatchEvent(new MouseEvent('mousedown', { bubbles: true, cancelable: true, clientX: 0 }));\r\n                    stage = ASSERT_SINGLE_CLICK;\r\n                    break;\r\n                case ASSERT_SINGLE_CLICK:\r\n                    compareStoreAndDOM_singleClick(prevSelectionEntries, expectedSelectionEntries);\r\n                    console.log('selection (single click) affects store and DOM correctly');\r\n                    stage = ACTION_DOUBLE_CLICK;\r\n                    break;\r\n                case ACTION_DOUBLE_CLICK:\r\n                    cell.dispatchEvent(new MouseEvent('dblclick', { bubbles: true, cancelable: true, clientX: 0 }));\r\n                    stage = ASSERT_DOUBLE_CLICK;\r\n                    break;\r\n                case ASSERT_DOUBLE_CLICK:\r\n                    compareStoreAndDOM_doubleClick(prevSelectionEntries, expectedSelectionEntries);\r\n                    console.log('selection (double click) affects store and DOM correctly');\r\n                    if (testCaseIndex == totalTestCases) logSuccess('doubleClickSelectionTest', totalTestCases);\r\n                    nextTurn(atomicTurn);\r\n                    clearInterval(timer);\r\n                    break;\r\n                default: break;\r\n            }\r\n        } catch (e) {\r\n            let errMsg = 'Err: checkReactionOfDoubleClickSelection(): { testCaseIndex: ' + testCaseIndex + ' } : ' + e;\r\n            console.log(errMsg);\r\n            logError(errMsg);\r\n            clearInterval(timer);\r\n        }\r\n    }, 200);\r\n}\r\n\r\nfunction compareStoreAndDOM_singleClick(prevSelectionEntries, expectedSelectionEntries) {\r\n    let currentSelectionEntries = store.getState().selection.entries;\r\n    assertCurrentSelectionEqualsExpectedSelection(currentSelectionEntries, expectedSelectionEntries);\r\n    let setDifference = getSetDifference(prevSelectionEntries, currentSelectionEntries);\r\n    assertSetDifferenceClearedOfHighlights(setDifference);\r\n    assertCurrentSelectionHighlighted(currentSelectionEntries); // different here\r\n}\r\n\r\nfunction compareStoreAndDOM_doubleClick(prevSelectionEntries, expectedSelectionEntries) {\r\n    let currentSelectionEntries = store.getState().selection.entries;\r\n    assertCurrentSelectionEqualsExpectedSelection(currentSelectionEntries, expectedSelectionEntries);\r\n    let setDifference = getSetDifference(prevSelectionEntries, currentSelectionEntries);\r\n    assertSetDifferenceClearedOfHighlights(setDifference);\r\n    assertCurrentSelectionHighlighted(currentSelectionEntries); // different here\r\n}\r\n\r\nfunction assertCurrentSelectionEqualsExpectedSelection(currentSelectionEntries, expectedSelectionEntries) {\r\n    for (const entry of currentSelectionEntries.values()) {\r\n        if (!expectedSelectionEntries.has(entry)) throw 'compareStoreAndDOM(): currentSelectionEntries has entry that expectedSelectionEntries does not have';\r\n    }\r\n    for (const entry of expectedSelectionEntries.values()) {\r\n        if (!currentSelectionEntries.has(entry)) throw 'compareStoreAndDOM(): expectedSelectionEntries has entry that currentSelectionEntries does not have';\r\n    }\r\n}\r\n\r\nfunction getSetDifference(prevSelectionEntries, currentSelectionEntries) {\r\n    let setDifference = new Set();\r\n    for (const entry of prevSelectionEntries.values()) {\r\n        if (!currentSelectionEntries.has(entry)) setDifference.add(entry);\r\n    }\r\n    return setDifference;\r\n}\r\n\r\nfunction assertSetDifferenceClearedOfHighlights(setDifference) {\r\n    for (const entry of setDifference.values()) {\r\n        let rowNum = parseInt(entry.split(',')[0], 10);\r\n        let colNum = parseInt(entry.split(',')[1], 10);\r\n        let highlightLayer = document.querySelector(`.row${rowNum}.col${colNum} .coverDiv`);\r\n        if (highlightLayer.style.boxShadow != 'none') throw 'compareStoreAndDOM(): prevSelectedCell not cleared of highlight: ' + rowNum + ' ' + colNum;\r\n    }\r\n}\r\n\r\nfunction assertCurrentSelectionHighlighted(currentSelectionEntries) {\r\n    for (const entry of currentSelectionEntries.values()) {\r\n        let rowNum = parseInt(entry.split(',')[0], 10);\r\n        let colNum = parseInt(entry.split(',')[1], 10);\r\n        let highlightLayer = document.querySelector(`.row${rowNum}.col${colNum} .coverDiv`);\r\n        if (highlightLayer.style.boxShadow != 'blue 0px 0px 0px 2px inset') throw 'compareStoreAndDOM(): currentSelectionEntry not highlighted properly ' + rowNum + ' ' + colNum;\r\n    }\r\n}\r\n\r\nexport { selectionTest, checkReactionOfSingleClickSelection, checkReactionOfDoubleClickSelection };","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\TablePanel\\handlers\\cellHandler\\textChangeHandler\\test.js",["881","882","883","884"],[],"import { assert_store_unchanged, compareDOM, compareStore, logError, logSuccess } from '../../../../../tests/helper.js';\r\nimport { getInLine, nextTurn } from '../../../../../tests/sequenceHelpers.js'\r\nimport { store } from './../../../../../store/store.js'\r\n\r\nconst WAIT_IN_QUEUE = -1;\r\nconst ARRANGE_AND_ACTION = 0;\r\nconst ASSERT = 1;\r\n\r\nfunction textChangeTest(turn) {\r\n    let changes = [[4, 5, 'blah'], [1, 2, 'burger'], [3, 7, 'hello'], [8, 2, 'world'], [2, 4, 'apple']];\r\n    try {\r\n        if (changes.length > 0) checkReactionOfTextChange(1, changes[0], turn, true, changes.length);\r\n        for (let i = 1; i < changes.length; ++i) checkReactionOfTextChange(i + 1, changes[i], turn, false, changes.length);\r\n    } catch (e) {\r\n        console.log('Error: checkReactionOfTextChange param error: ' + e);\r\n        logError(null, null, null, null, e);\r\n    }\r\n}\r\n\r\nfunction checkReactionOfTextChange(testCaseIndex, testDetails, turn, isFirstCall, totalTestCases) {\r\n    let [selectedRowNum, selectedColNum, newText] = testDetails;\r\n    let cellInput = document.querySelector(`.row${selectedRowNum}.col${selectedColNum} input`);\r\n    let myTurnNumber = getInLine(turn);\r\n    let stage = WAIT_IN_QUEUE;\r\n    let prevText;\r\n    let prevState;\r\n    let prevHistoryIndex;\r\n    let textChangeExpected;\r\n    let timer = setInterval(() => {\r\n        try {\r\n            switch (stage) {\r\n                case WAIT_IN_QUEUE:\r\n                    if (turn.current == myTurnNumber) {\r\n                        if (isFirstCall) console.log('\\n--------TEXT CHANGE TEST--------------------');\r\n                        stage = ARRANGE_AND_ACTION;\r\n                    }\r\n                    break;\r\n                case ARRANGE_AND_ACTION:\r\n                    let history = store.getState().history;\r\n                    // arrange\r\n                    prevText = cellInput.value;\r\n                    prevState = history.changeHistory[history.changeHistoryIndex];\r\n                    prevHistoryIndex = history.changeHistoryIndex;\r\n                    textChangeExpected = cellInput.value != newText;\r\n\r\n                    // action\r\n                    cellInput.focus();\r\n                    cellInput.value = newText;\r\n                    if (textChangeExpected) cellInput.dispatchEvent(new Event('change'));\r\n                    document.activeElement.blur();\r\n                    stage = ASSERT;\r\n                    break;\r\n                case ASSERT:\r\n                    let prevPropertyObj = { textValue: prevText };\r\n                    let propertyObj = { textValue: newText };\r\n                    compareDOM(selectedRowNum, selectedColNum, propertyObj);\r\n                    if (!textChangeExpected) assert_store_unchanged(prevHistoryIndex);\r\n                    else compareStore(selectedRowNum, selectedColNum, prevPropertyObj, propertyObj, prevState, prevHistoryIndex);\r\n                    console.log('textChange affects store and DOM correctly');\r\n                    if (testCaseIndex == totalTestCases) logSuccess('textChangeTest()', totalTestCases);\r\n                    nextTurn(turn);\r\n                    clearInterval(timer);\r\n                    break;\r\n            }\r\n        } catch (e) {\r\n            let errMsg = 'Err: checkReactionOfTextChange(): { testCaseIndex: ' + testCaseIndex + ' } : ' + e;\r\n            console.log(errMsg);\r\n            logError(errMsg);\r\n            clearInterval(timer);\r\n        }\r\n    }, 200);\r\n}\r\n\r\nexport { textChangeTest, checkReactionOfTextChange };","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\components\\Bold\\test.js",["885","886","887","888","889"],[],"import { compareDOM, compareStore, logError, logSuccess } from '../../../../tests/helper.js';\r\nimport { getInLine, nextTurn } from '../../../../tests/sequenceHelpers.js'\r\nimport { store } from './../../../../store/store.js'\r\n\r\nconst WAIT_IN_QUEUE = -1;\r\nconst ARRANGE = 0;\r\nconst ACTION_SELECT_CELL = 1\r\nconst ACTION_TOGGLE_BOLD = 2;\r\nconst ASSERT = 3;\r\n\r\nfunction boldTest(turn) {\r\n    let changes = [[4, 5], [1, 2], [3, 7], [8, 2], [2, 4]];\r\n    try {\r\n        if (changes.length > 0) checkReactionOfBold(1, changes[0], turn, true, changes.length);\r\n        for (let i = 1; i < changes.length; ++i) checkReactionOfBold(i + 1, changes[i], turn, false, changes.length);\r\n    } catch (e) {\r\n        console.log('Error: checkReactionOfBold param error: ' + e);\r\n        logError(null, null, null, null, e);\r\n    }\r\n}\r\n\r\nfunction checkReactionOfBold(testCaseIndex, testDetails, turn, isFirstCall, totalTestCases) {\r\n    let [selectedRowNum, selectedColNum] = testDetails;\r\n    let cellValue = document.querySelector(`.row${selectedRowNum}.col${selectedColNum}>.cellValueDiv>.cellValue`);\r\n    let myTurnNumber = getInLine(turn);\r\n    let stage = WAIT_IN_QUEUE;\r\n    let wasPreviouslyBold;\r\n    let prevState;\r\n    let prevHistoryIndex;\r\n    let timer = setInterval(() => {\r\n        try {\r\n            switch (stage) {\r\n                case WAIT_IN_QUEUE:\r\n                    if (turn.current == myTurnNumber) {\r\n                        if (isFirstCall) console.log('\\n--------BOLD TEST--------------------');\r\n                        stage = ARRANGE;\r\n                    }\r\n                    break;\r\n                case ARRANGE:\r\n                    let history = store.getState().history;\r\n                    wasPreviouslyBold = cellValue.style.fontWeight == 700;\r\n                    prevState = history.changeHistory[history.changeHistoryIndex];\r\n                    prevHistoryIndex = history.changeHistoryIndex;\r\n                case ACTION_SELECT_CELL:\r\n                    let cell = document.querySelector(`.row${selectedRowNum}.col${selectedColNum} .coverDiv`);\r\n                    cell.dispatchEvent(new MouseEvent('mousedown', { bubbles: true, cancelable: true, clientX: 0 }));\r\n                    stage = ACTION_TOGGLE_BOLD;\r\n                    break;\r\n                case ACTION_TOGGLE_BOLD:\r\n                    let boldBtn = document.querySelector('.bold__btn');\r\n                    boldBtn.dispatchEvent(new MouseEvent('click', { bubbles: true, cancelable: true, clientX: 0 }));\r\n                    stage = ASSERT;\r\n                    break;\r\n                case ASSERT:\r\n                    let prevPropertyObj = { fontWeight: wasPreviouslyBold ? 700 : 400 };\r\n                    let propertyObj = { fontWeight: wasPreviouslyBold ? 400 : 700 };\r\n                    compareDOM(selectedRowNum, selectedColNum, propertyObj);\r\n                    compareStore(selectedRowNum, selectedColNum, prevPropertyObj, propertyObj, prevState, prevHistoryIndex);\r\n                    console.log('bold affects store and DOM correctly');\r\n                    if (testCaseIndex == totalTestCases) logSuccess('boldTest()', totalTestCases);\r\n                    nextTurn(turn);\r\n                    clearInterval(timer);\r\n                    break;\r\n            }\r\n        } catch (e) {\r\n            let errMsg = 'Err: checkReactionOfBold(): { testCaseIndex: ' + testCaseIndex + ', rowNum: ' + selectedRowNum + ', colNum: ' + selectedColNum + ', toggling bold: ' + (wasPreviouslyBold ? 'off' : 'on') + ' } : ' + e;\r\n            console.log(errMsg);\r\n            logError(errMsg);\r\n            clearInterval(timer);\r\n        }\r\n    }, 200);\r\n}\r\n\r\nexport { boldTest, checkReactionOfBold };","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\components\\Italic\\test.js",["890","891","892","893","894","895"],[],"import { compareDOM, compareStore, logError, logSuccess } from '../../../../tests/helper.js';\r\nimport { getInLine, nextTurn } from '../../../../tests/sequenceHelpers.js'\r\nimport { store } from './../../../../store/store.js'\r\n\r\nconst WAIT_IN_QUEUE = -1;\r\nconst ARRANGE = 0;\r\nconst ACTION_SELECT_CELL = 1;\r\nconst ACTION_TOGGLE_ITALIC = 2;\r\nconst ASSERT = 3;\r\n\r\nfunction italicTest(turn) {\r\n    let changes = [[4, 5], [1, 2], [3, 7], [8, 2], [2, 4]];\r\n    try {\r\n        if (changes.length > 0) checkReactionOfItalic(1, changes[0], turn, true, changes.length);\r\n        for (let i = 1; i < changes.length; ++i) checkReactionOfItalic(i + 1, changes[i], turn, false, changes.length);\r\n    } catch (e) {\r\n        console.log('Error: checkReactionOfItalic param error: ' + e);\r\n        logError(null, null, null, null, e);\r\n    }\r\n}\r\n\r\nfunction checkReactionOfItalic(testCaseIndex, testDetails, turn, isFirstCall, totalTestCases) {\r\n    let [selectedRowNum, selectedColNum] = testDetails;\r\n    let cellValue = document.querySelector(`.row${selectedRowNum}.col${selectedColNum}>.cellValueDiv>.cellValue`);\r\n    let myTurnNumber = getInLine(turn);\r\n    let stage = WAIT_IN_QUEUE;\r\n    let wasPreviouslyItalic;\r\n    let prevState;\r\n    let prevHistoryIndex;\r\n    let timer = setInterval(() => {\r\n        try {\r\n            switch (stage) {\r\n                case WAIT_IN_QUEUE:\r\n                    if (turn.current == myTurnNumber) {\r\n                        if (isFirstCall) console.log('\\n--------ITALIC TEST--------------------');\r\n                        stage = ARRANGE;\r\n                    }\r\n                    break;\r\n                case ARRANGE:\r\n                    let history = store.getState().history;\r\n                    wasPreviouslyItalic = cellValue.style.fontStyle == 'italic';\r\n                    prevState = history.changeHistory[history.changeHistoryIndex];\r\n                    prevHistoryIndex = history.changeHistoryIndex;\r\n                case ACTION_SELECT_CELL:\r\n                    let cell = document.querySelector(`.row${selectedRowNum}.col${selectedColNum} .coverDiv`);\r\n                    cell.dispatchEvent(new MouseEvent('mousedown', { bubbles: true, cancelable: true, clientX: 0 }));\r\n                    stage = ACTION_TOGGLE_ITALIC;\r\n                    break;\r\n                case ACTION_TOGGLE_ITALIC:\r\n                    // trigger click event on italicBtn\r\n                    let italicBtn = document.querySelector('.italic__btn');\r\n                    italicBtn.dispatchEvent(new MouseEvent('click', { bubbles: true, cancelable: true, clientX: 0 }));\r\n                    stage = ASSERT;\r\n                    break;\r\n                case ASSERT:\r\n                    let prevPropertyObj = { fontStyle: wasPreviouslyItalic ? 'italic' : 'normal' };\r\n                    let propertyObj = { fontStyle: wasPreviouslyItalic ? 'normal' : 'italic' };\r\n                    compareDOM(selectedRowNum, selectedColNum, propertyObj);\r\n                    compareStore(selectedRowNum, selectedColNum, prevPropertyObj, propertyObj, prevState, prevHistoryIndex);\r\n                    console.log('italic affects store and DOM correctly');\r\n                    if (testCaseIndex == totalTestCases) logSuccess('italicTest()', totalTestCases);\r\n                    nextTurn(turn);\r\n                    clearInterval(timer);\r\n                    break;\r\n            }\r\n        } catch (e) {\r\n            let errMsg = 'Err: checkReactionOfItalic(): { testCaseIndex: ' + testCaseIndex + ', rowNum: ' + selectedRowNum + ', colNum: ' + selectedColNum + ', toggling italic: ' + wasPreviouslyItalic ? 'off' : 'on' + ' } : ' + e;\r\n            console.log(errMsg);\r\n            logError(errMsg);\r\n            clearInterval(timer);\r\n        }\r\n    }, 200);\r\n}\r\n\r\nexport { italicTest, checkReactionOfItalic };","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\components\\FontFamily\\test.js",["896","897","898","899"],[],"import { compareDOM, compareStore, logError, logSuccess } from '../../../../tests/helper.js';\r\nimport { getInLine, nextTurn } from '../../../../tests/sequenceHelpers.js'\r\nimport { store } from './../../../../store/store.js'\r\nimport { updateFontFamily } from './FontFamily.js';\r\n\r\nconst WAIT_IN_QUEUE = -1;\r\nconst ARRANGE = 0;\r\nconst ACTION_SELECT_CELL = 1\r\nconst ACTION_CHANGE_FONT_FAMILY = 2;\r\nconst ASSERT = 3;\r\n\r\nfunction fontFamilyTest(turn) {\r\n    let changes = [[4, 5, 'Times New Roman'], [1, 2, 'Ebrima'], [3, 7, 'Century Gothic'], [8, 2, 'Times New Roman'], [2, 4, 'Times New Roman']];\r\n    if (changes.length > 0) checkReactionOfFontFamily(1, changes[0], turn, true, changes.length);\r\n    for (let i = 1; i < changes.length; ++i) checkReactionOfFontFamily(i + 1, changes[i], turn, false, changes.length);\r\n}\r\n\r\nfunction checkReactionOfFontFamily(testCaseIndex, testDetails, turn, isFirstCall, totalTestCases) {\r\n    let [selectedRowNum, selectedColNum, newFontFamily] = testDetails;\r\n    let cellValue = document.querySelector(`.row${selectedRowNum}.col${selectedColNum}>.cellValueDiv>.cellValue`);\r\n    let myTurnNumber = getInLine(turn);\r\n    let stage = WAIT_IN_QUEUE;\r\n    let prevFontFamily;\r\n    let prevState;\r\n    let prevHistoryIndex;\r\n    let timer = setInterval(() => {\r\n        try {\r\n            switch (stage) {\r\n                case WAIT_IN_QUEUE:\r\n                    if (turn.current == myTurnNumber) {\r\n                        if (isFirstCall) console.log('\\n--------FONT FAMILY TEST--------------------');\r\n                        stage = ARRANGE;\r\n                    }\r\n                    break;\r\n                case ARRANGE:\r\n                    let history = store.getState().history;\r\n                    // arrange\r\n                    prevFontFamily = cellValue.style.fontFamily;\r\n                    prevState = history.changeHistory[history.changeHistoryIndex];\r\n                    prevHistoryIndex = history.changeHistoryIndex;\r\n                case ACTION_SELECT_CELL:\r\n                    // select cell\r\n                    let cell = document.querySelector(`.row${selectedRowNum}.col${selectedColNum} .coverDiv`);\r\n                    cell.dispatchEvent(new MouseEvent('mousedown', { bubbles: true, cancelable: true, clientX: 0 }));\r\n                    stage = ACTION_CHANGE_FONT_FAMILY;\r\n                    break;\r\n                case ACTION_CHANGE_FONT_FAMILY:\r\n                    // trigger click event on fontFamilyBtn\r\n                    let selectionEntries = store.getState().selection.entries;\r\n                    updateFontFamily(selectionEntries, prevFontFamily, newFontFamily);\r\n                    stage = ASSERT;\r\n                    break;\r\n                case ASSERT:\r\n                    let prevPropertyObj = { fontFamily: prevFontFamily };\r\n                    let propertyObj = { fontFamily: newFontFamily };\r\n                    compareDOM(selectedRowNum, selectedColNum, propertyObj);\r\n                    compareStore(selectedRowNum, selectedColNum, prevPropertyObj, propertyObj, prevState, prevHistoryIndex);\r\n                    console.log('fontFamily affects store and DOM correctly');\r\n                    if (testCaseIndex == totalTestCases) logSuccess('fontFamilyTest()', totalTestCases);\r\n                    nextTurn(turn);\r\n                    clearInterval(timer);\r\n                    break;\r\n            }\r\n        } catch (e) {\r\n            let errMsg = 'Err: checkReactionOfFontFamily(): { testCaseIndex: ' + testCaseIndex + ', rowNum: ' + selectedRowNum + ', colNum: ' + selectedColNum + ', newFontFamily: ' + newFontFamily + ' } :\\n' + e;\r\n            console.log(errMsg);\r\n            logError(errMsg);\r\n            clearInterval(timer);\r\n        }\r\n    }, 200);\r\n}\r\n\r\nexport { fontFamilyTest, checkReactionOfFontFamily };","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\components\\VerticalAlignment\\test.js",["900","901","902","903"],[],"import { compareDOM, compareStore, logError, logSuccess } from '../../../../tests/helper.js';\r\nimport { getInLine, nextTurn } from '../../../../tests/sequenceHelpers.js'\r\nimport { store } from '../../../../store/store.js'\r\nimport { parseVerticalAlignment, updateVerticalAlignment } from './VerticalAlignment.js';\r\n\r\nconst WAIT_IN_QUEUE = -1;\r\nconst ARRANGE = 0;\r\nconst ACTION_SELECT_CELL = 1\r\nconst ACTION_CHANGE_VERTICAL_ALIGNMENT = 2;\r\nconst ASSERT = 3;\r\n\r\nfunction verticalAlignmentTest(turn) {\r\n    let changes = [[4, 5, 'top'], [1, 2, 'center'], [3, 7, 'bottom'], [8, 2, 'top'], [2, 4, 'bottom']];\r\n    if (changes.length > 0) checkReactionOfVerticalAlignment(1, changes[0], turn, true, changes.length);\r\n    for (let i = 1; i < changes.length; ++i) checkReactionOfVerticalAlignment(i + 1, changes[i], turn, false, changes.length);\r\n}\r\n\r\nfunction checkReactionOfVerticalAlignment(testCaseIndex, testDetails, turn, isFirstCall, totalTestCases) {\r\n    let [selectedRowNum, selectedColNum, newVerticalAlignment] = testDetails;\r\n    let cellValue = document.querySelector(`.row${selectedRowNum}.col${selectedColNum}>.cellValueDiv>.cellValue`);\r\n    let myTurnNumber = getInLine(turn);\r\n    let stage = WAIT_IN_QUEUE;\r\n    let prevVerticalAlignment;\r\n    let prevState;\r\n    let prevHistoryIndex;\r\n    let timer = setInterval(() => {\r\n        try {\r\n            switch (stage) {\r\n                case WAIT_IN_QUEUE:\r\n                    if (turn.current == myTurnNumber) {\r\n                        if (isFirstCall) console.log('\\n--------VERTICAL ALIGNMENT TEST--------------------');\r\n                        stage = ARRANGE;\r\n                    }\r\n                    break;\r\n                case ARRANGE:\r\n                    let history = store.getState().history;\r\n                    // arrange\r\n                    prevVerticalAlignment = cellValue.style.textAlign;\r\n                    prevState = history.changeHistory[history.changeHistoryIndex];\r\n                    prevHistoryIndex = history.changeHistoryIndex;\r\n                case ACTION_SELECT_CELL:\r\n                    // select cell\r\n                    let cell = document.querySelector(`.row${selectedRowNum}.col${selectedColNum} .coverDiv`);\r\n                    cell.dispatchEvent(new MouseEvent('mousedown', { bubbles: true, cancelable: true, clientX: 0 }));\r\n                    stage = ACTION_CHANGE_VERTICAL_ALIGNMENT;\r\n                    break;\r\n                case ACTION_CHANGE_VERTICAL_ALIGNMENT:\r\n                    let selectionEntries = store.getState().selection.entries;\r\n                    updateVerticalAlignment(selectionEntries, prevVerticalAlignment, newVerticalAlignment);\r\n                    stage = ASSERT;\r\n                    break;\r\n                case ASSERT:\r\n                    let prevPropertyObj = { verticalAlignment: prevVerticalAlignment };\r\n                    let propertyObj = { verticalAlignment: newVerticalAlignment };\r\n                    let propertyObjDOM = { verticalAlignment: parseVerticalAlignment(newVerticalAlignment) };\r\n                    compareDOM(selectedRowNum, selectedColNum, propertyObjDOM);\r\n                    compareStore(selectedRowNum, selectedColNum, prevPropertyObj, propertyObj, prevState, prevHistoryIndex);\r\n                    console.log(' verticalAlignment affects store and DOM correctly');\r\n                    if (testCaseIndex == totalTestCases) logSuccess('verticalAlignmentTest()', totalTestCases);\r\n                    nextTurn(turn);\r\n                    clearInterval(timer);\r\n                    break;\r\n            }\r\n        } catch (e) {\r\n            let errMsg = 'Err: checkReactionOfVerticalAlignment(): { testCaseIndex: ' + testCaseIndex + ', rowNum: ' + selectedRowNum + ', colNum: ' + selectedColNum + ', newVerticalAlignment: ' + newVerticalAlignment + ' } :\\n' + e;\r\n            console.log(errMsg);\r\n            logError(errMsg);\r\n            clearInterval(timer);\r\n        }\r\n    }, 200);\r\n}\r\n\r\nexport {  verticalAlignmentTest, checkReactionOfVerticalAlignment };","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\components\\FontColor\\test.js",["904","905","906","907"],[],"import { compareDOM, compareStore, logError, logSuccess } from '../../../../tests/helper.js';\r\nimport { getInLine, nextTurn } from '../../../../tests/sequenceHelpers.js'\r\nimport { hexToRgb } from '../../helper.js';\r\nimport { store } from './../../../../store/store.js'\r\nimport { updateFontColor } from './FontColor.js';\r\n\r\nconst WAIT_IN_QUEUE = -1;\r\nconst ARRANGE = 0;\r\nconst ACTION_SELECT_CELL = 1\r\nconst ACTION_CHANGE_FONT_COLOR = 2;\r\nconst ASSERT = 3;\r\n\r\nfunction fontColorTest(turn) {\r\n    let changes = [[4, 5, '#ea580c'], [1, 2, '#16a34a'], [3, 7, '#1d4ed8'], [8, 2, '#c026d3'], [2, 4, '#db2777']];\r\n    if (changes.length > 0) checkReactionOfFontColor(1, changes[0], turn, true, changes.length);\r\n    for (let i = 1; i < changes.length; ++i) checkReactionOfFontColor(i + 1, changes[i], turn, false, changes.length);\r\n}\r\n\r\nfunction checkReactionOfFontColor(testCaseIndex, testDetails, turn, isFirstCall, totalTestCases) {\r\n    let [selectedRowNum, selectedColNum, newFontColor] = testDetails;\r\n    let cellValue = document.querySelector(`.row${selectedRowNum}.col${selectedColNum}>.cellValueDiv>.cellValue`);\r\n    let myTurnNumber = getInLine(turn);\r\n    let stage = WAIT_IN_QUEUE;\r\n    let prevFontColor;\r\n    let prevState;\r\n    let prevHistoryIndex;\r\n    let timer = setInterval(() => {\r\n        try {\r\n            switch (stage) {\r\n                case WAIT_IN_QUEUE:\r\n                    if (turn.current == myTurnNumber) {\r\n                        if (isFirstCall) console.log('\\n--------FONT COLOR TEST--------------------');\r\n                        stage = ARRANGE;\r\n                    }\r\n                    break;\r\n                case ARRANGE:\r\n                    let history = store.getState().history;\r\n                    // arrange\r\n                    prevFontColor = cellValue.style.color;\r\n                    prevState = history.changeHistory[history.changeHistoryIndex];\r\n                    prevHistoryIndex = history.changeHistoryIndex;\r\n                case ACTION_SELECT_CELL:\r\n                    // select cell\r\n                    let cell = document.querySelector(`.row${selectedRowNum}.col${selectedColNum} .coverDiv`);\r\n                    cell.dispatchEvent(new MouseEvent('mousedown', { bubbles: true, cancelable: true, clientX: 0 }));\r\n                    stage = ACTION_CHANGE_FONT_COLOR;\r\n                    break;\r\n                case ACTION_CHANGE_FONT_COLOR:\r\n                    let selectionEntries = store.getState().selection.entries;\r\n                    updateFontColor(selectionEntries, prevFontColor, newFontColor);\r\n                    stage = ASSERT;\r\n                    break;\r\n                case ASSERT:\r\n                    let prevPropertyObj = { fontColor: prevFontColor };\r\n                    let propertyObj = { fontColor: hexToRgb(newFontColor) };\r\n                    compareDOM(selectedRowNum, selectedColNum, propertyObj);\r\n                    compareStore(selectedRowNum, selectedColNum, prevPropertyObj, propertyObj, prevState, prevHistoryIndex);\r\n                    console.log('fontColor affects store and DOM correctly');\r\n                    if (testCaseIndex == totalTestCases) logSuccess('fontColorTest()', totalTestCases);\r\n                    nextTurn(turn);\r\n                    clearInterval(timer);\r\n                    break;\r\n            }\r\n        } catch (e) {\r\n            let errMsg = 'Err: checkReactionOfFontColor(): { testCaseIndex: ' + testCaseIndex + ', rowNum: ' + selectedRowNum + ', colNum: ' + selectedColNum + ', newFontColor: ' + newFontColor + ' } :\\n' + e;\r\n            console.log(errMsg);\r\n            logError(errMsg);\r\n            clearInterval(timer);\r\n        }\r\n    }, 200);\r\n}\r\n\r\nexport { fontColorTest, checkReactionOfFontColor };","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\components\\FontSize\\test.js",["908","909","910","911","912"],[],"import { compareDOM, compareStore, logError, logSuccess } from '../../../../tests/helper.js';\r\nimport { getInLine, nextTurn } from '../../../../tests/sequenceHelpers.js'\r\nimport { store } from './../../../../store/store.js'\r\nimport { updateFontSize } from './FontSize.js';\r\n\r\nconst WAIT_IN_QUEUE = -1;\r\nconst ARRANGE = 0;\r\nconst ACTION_SELECT_CELL = 1\r\nconst ACTION_CHANGE_FONT_SIZE = 2;\r\nconst ASSERT = 3;\r\n\r\nfunction fontSizeTest(turn) {\r\n    let changes = [[4, 5, 10], [1, 2, 14], [3, 7, 18], [8, 2, 24], [2, 4, 36]];\r\n    if (changes.length > 0) checkReactionOfFontSize(1, changes[0], turn, true, changes.length);\r\n    for (let i = 1; i < changes.length; ++i) checkReactionOfFontSize(i + 1, changes[i], turn, false, changes.length);\r\n}\r\n\r\nfunction checkReactionOfFontSize(testCaseIndex, testDetails, turn, isFirstCall, totalTestCases) {\r\n    let [selectedRowNum, selectedColNum, newFontSize] = testDetails;\r\n    let cellValue = document.querySelector(`.row${selectedRowNum}.col${selectedColNum}>.cellValueDiv>.cellValue`);\r\n    let myTurnNumber = getInLine(turn);\r\n    let stage = WAIT_IN_QUEUE;\r\n    let prevFontSize;\r\n    let prevState;\r\n    let prevHistoryIndex;\r\n    let timer = setInterval(() => {\r\n        try {\r\n            switch (stage) {\r\n                case WAIT_IN_QUEUE:\r\n                    if (turn.current == myTurnNumber) {\r\n                        if (isFirstCall) console.log('\\n--------FONT SIZE TEST--------------------');\r\n                        stage = ARRANGE;\r\n                    }\r\n                    break;\r\n                case ARRANGE:\r\n                    let history = store.getState().history;\r\n                    // arrange\r\n                    prevFontSize = cellValue.style.fontSize != '' ? cellValue.style.fontSize : '12px';\r\n                    prevState = history.changeHistory[history.changeHistoryIndex];\r\n                    prevHistoryIndex = history.changeHistoryIndex;\r\n                case ACTION_SELECT_CELL:\r\n                    // select cell\r\n                    let cell = document.querySelector(`.row${selectedRowNum}.col${selectedColNum} .coverDiv`);\r\n                    cell.dispatchEvent(new MouseEvent('mousedown', { bubbles: true, cancelable: true, clientX: 0 }));\r\n                    stage = ACTION_CHANGE_FONT_SIZE;\r\n                    break;\r\n                case ACTION_CHANGE_FONT_SIZE:\r\n                    let selectionEntries = store.getState().selection.entries;\r\n                    updateFontSize(selectionEntries, parseInt(prevFontSize, 10), parseInt(newFontSize, 10));\r\n                    stage = ASSERT;\r\n                    break;\r\n                case ASSERT:\r\n                    let prevPropertyObj = { fontSize: parseInt(prevFontSize, 10) };\r\n                    let propertyObj = { fontSize: newFontSize };\r\n                    compareDOM(selectedRowNum, selectedColNum, propertyObj);\r\n                    compareStore(selectedRowNum, selectedColNum, prevPropertyObj, propertyObj, prevState, prevHistoryIndex);\r\n                    console.log('fontSize affects store and DOM correctly');\r\n                    if (testCaseIndex == totalTestCases) logSuccess('fontSizeTest()', totalTestCases);\r\n                    nextTurn(turn);\r\n                    clearInterval(timer);\r\n                    break;\r\n            }\r\n        } catch (e) {\r\n            let errMsg = 'Err: checkReactionOfFontSize(): { testCaseIndex: ' + testCaseIndex + ', rowNum: ' + selectedRowNum + ', colNum: ' + selectedColNum + ', newFontSize: ' + newFontSize + ' } :\\n' + e;\r\n            console.log(errMsg);\r\n            logError(errMsg);\r\n            clearInterval(timer);\r\n        }\r\n    }, 200);\r\n}\r\n\r\nexport { fontSizeTest, checkReactionOfFontSize };","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\components\\CellColor\\test.js",["913","914","915","916"],[],"import { compareDOM, compareStore, logError, logSuccess } from '../../../../tests/helper.js';\r\nimport { getInLine, nextTurn } from '../../../../tests/sequenceHelpers.js'\r\nimport { hexToRgb } from '../../helper.js';\r\nimport { store } from './../../../../store/store.js'\r\nimport { updateCellColor } from './CellColor.js';\r\n\r\nconst WAIT_IN_QUEUE = -1;\r\nconst ARRANGE = 0;\r\nconst ACTION_SELECT_CELL = 1\r\nconst ACTION_CHANGE_CELL_COLOR = 2;\r\nconst ASSERT = 3;\r\n\r\nfunction cellColorTest(turn) {\r\n    let changes = [[4, 5, '#f9a8d4'], [1, 2, '#d8b4fe'], [3, 7, '#bbf7d0'], [8, 2, '#fef08a'], [2, 4, '#cbd5e1']];\r\n    if (changes.length > 0) checkReactionOfCellColor(1, changes[0], turn, true, changes.length);\r\n    for (let i = 1; i < changes.length; ++i) checkReactionOfCellColor(i + 1, changes[i], turn, false, changes.length);\r\n}\r\n\r\nfunction checkReactionOfCellColor(testCaseIndex, testDetails, turn, isFirstCall, totalTestCases) {\r\n    let [selectedRowNum, selectedColNum, newCellColor] = testDetails;\r\n    let cellValueDiv = document.querySelector(`.row${selectedRowNum}.col${selectedColNum}>.cellValueDiv>.cellValue`);\r\n    let myTurnNumber = getInLine(turn);\r\n    let stage = WAIT_IN_QUEUE;\r\n    let prevCellColor;\r\n    let prevState;\r\n    let prevHistoryIndex;\r\n    let timer = setInterval(() => {\r\n        try {\r\n            switch (stage) {\r\n                case WAIT_IN_QUEUE:\r\n                    if (turn.current == myTurnNumber) {\r\n                        if (isFirstCall) console.log('\\n--------CELL COLOR TEST--------------------');\r\n                        stage = ARRANGE;\r\n                    }\r\n                    break;\r\n                case ARRANGE:\r\n                    let history = store.getState().history;\r\n                    // arrange\r\n                    prevCellColor = cellValueDiv.style.backgroundColor;\r\n                    prevState = history.changeHistory[history.changeHistoryIndex];\r\n                    prevHistoryIndex = history.changeHistoryIndex;\r\n                case ACTION_SELECT_CELL:\r\n                    // select cell\r\n                    let cell = document.querySelector(`.row${selectedRowNum}.col${selectedColNum} .coverDiv`);\r\n                    cell.dispatchEvent(new MouseEvent('mousedown', { bubbles: true, cancelable: true, clientX: 0 }));\r\n                    stage = ACTION_CHANGE_CELL_COLOR;\r\n                    break;\r\n                case ACTION_CHANGE_CELL_COLOR:\r\n                    let selectionEntries = store.getState().selection.entries;\r\n                    updateCellColor(selectionEntries, prevCellColor, newCellColor);\r\n                    stage = ASSERT;\r\n                    break;\r\n                case ASSERT:\r\n                    let prevPropertyObj = { cellColor: prevCellColor };\r\n                    let propertyObj = { cellColor: hexToRgb(newCellColor) };\r\n                    compareDOM(selectedRowNum, selectedColNum, propertyObj);\r\n                    compareStore(selectedRowNum, selectedColNum, prevPropertyObj, propertyObj, prevState, prevHistoryIndex);\r\n                    console.log('cellColor affects store and DOM correctly');\r\n                    if (testCaseIndex == totalTestCases) logSuccess('cellColorTest()', totalTestCases);\r\n                    nextTurn(turn);\r\n                    clearInterval(timer);\r\n                    break;\r\n            }\r\n        } catch (e) {\r\n            let errMsg = 'Err: checkReactionOfCellColor(): { testCaseIndex: ' + testCaseIndex + ', rowNum: ' + selectedRowNum + ', colNum: ' + selectedColNum + ', newCellColor: ' + newCellColor + ' } :\\n' + e;\r\n            console.log(errMsg);\r\n            logError(errMsg);\r\n            clearInterval(timer);\r\n        }\r\n    }, 200);\r\n}\r\n\r\nexport { cellColorTest, checkReactionOfCellColor };","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\components\\HorizontalAlignment\\test.js",["917","918","919","920"],[],"import { compareDOM, compareStore, logError, logSuccess } from '../../../../tests/helper.js';\r\nimport { getInLine, nextTurn } from '../../../../tests/sequenceHelpers.js'\r\nimport { store } from './../../../../store/store.js'\r\nimport { updateHorizontalAlignment } from './HorizontalAlignment.js';\r\n\r\nconst WAIT_IN_QUEUE = -1;\r\nconst ARRANGE = 0;\r\nconst ACTION_SELECT_CELL = 1\r\nconst ACTION_CHANGE_HORIZONTAL_ALIGNMENT = 2;\r\nconst ASSERT = 3;\r\n\r\nfunction horizontalAlignmentTest(turn) {\r\n    let changes = [[4, 5, 'left'], [1, 2, 'right'], [3, 7, 'center'], [8, 2, 'left'], [2, 4, 'right']];\r\n    if (changes.length > 0) checkReactionOfHorizontalAlignment(1, changes[0], turn, true, changes.length);\r\n    for (let i = 1; i < changes.length; ++i) checkReactionOfHorizontalAlignment(i + 1, changes[i], turn, false, changes.length);\r\n}\r\n\r\nfunction checkReactionOfHorizontalAlignment(testCaseIndex, testDetails, turn, isFirstCall, totalTestCases) {\r\n    let [selectedRowNum, selectedColNum, newHorizontalAlignment] = testDetails;\r\n    let cellValue = document.querySelector(`.row${selectedRowNum}.col${selectedColNum}>.cellValueDiv>.cellValue`);\r\n    let myTurnNumber = getInLine(turn);\r\n    let stage = WAIT_IN_QUEUE;\r\n    let prevHorizontalAlignment;\r\n    let prevState;\r\n    let prevHistoryIndex;\r\n    let timer = setInterval(() => {\r\n        try {\r\n            switch (stage) {\r\n                case WAIT_IN_QUEUE:\r\n                    if (turn.current == myTurnNumber) {\r\n                        if (isFirstCall) console.log('\\n--------HORIZONTAL ALIGNMENT TEST--------------------');\r\n                        stage = ARRANGE;\r\n                    }\r\n                    break;\r\n                case ARRANGE:\r\n                    let history = store.getState().history;\r\n                    // arrange\r\n                    prevHorizontalAlignment = cellValue.style.textAlign;\r\n                    prevState = history.changeHistory[history.changeHistoryIndex];\r\n                    prevHistoryIndex = history.changeHistoryIndex;\r\n                case ACTION_SELECT_CELL:\r\n                    // select cell\r\n                    let cell = document.querySelector(`.row${selectedRowNum}.col${selectedColNum} .coverDiv`);\r\n                    cell.dispatchEvent(new MouseEvent('mousedown', { bubbles: true, cancelable: true, clientX: 0 }));\r\n                    stage = ACTION_CHANGE_HORIZONTAL_ALIGNMENT;\r\n                    break;\r\n                case ACTION_CHANGE_HORIZONTAL_ALIGNMENT:\r\n                    let selectionEntries = store.getState().selection.entries;\r\n                    updateHorizontalAlignment(selectionEntries, prevHorizontalAlignment, newHorizontalAlignment);\r\n                    stage = ASSERT;\r\n                    break;\r\n                case ASSERT:\r\n                    let prevPropertyObj = { horizontalAlignment: prevHorizontalAlignment };\r\n                    let propertyObj = { horizontalAlignment: newHorizontalAlignment };\r\n                    compareDOM(selectedRowNum, selectedColNum, propertyObj);\r\n                    compareStore(selectedRowNum, selectedColNum, prevPropertyObj, propertyObj, prevState, prevHistoryIndex);\r\n                    console.log(' horizontalAlignment affects store and DOM correctly');\r\n                    if (testCaseIndex == totalTestCases) logSuccess('horizontalAlignmentTest()', totalTestCases);\r\n                    nextTurn(turn);\r\n                    clearInterval(timer);\r\n                    break;\r\n            }\r\n        } catch (e) {\r\n            let errMsg = 'Err: checkReactionOfHorizontalAlignment(): { testCaseIndex: ' + testCaseIndex + ', rowNum: ' + selectedRowNum + ', colNum: ' + selectedColNum + ', newHorizontalAlignment: ' + newHorizontalAlignment + ' } :\\n' + e;\r\n            console.log(errMsg);\r\n            logError(errMsg);\r\n            clearInterval(timer);\r\n        }\r\n    }, 200);\r\n}\r\n\r\nexport {  horizontalAlignmentTest, checkReactionOfHorizontalAlignment };","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\components\\Borders\\test.js",["921","922","923","924"],[],"import { compareDOM, compareStore, logError, logSuccess } from '../../../../tests/helper.js';\r\nimport { getInLine, nextTurn } from '../../../../tests/sequenceHelpers.js'\r\nimport { parseBoxShadow } from '../../../TablePanel/handlers/cellHandler/selectionHandler/selectionHandler.js';\r\nimport { store } from './../../../../store/store.js'\r\nimport { translateToBoxShadows, updateBorders } from './Borders.js';\r\n\r\nconst WAIT_IN_QUEUE = -1;\r\nconst ARRANGE = 0;\r\nconst ACTION_SELECT_CELL = 1\r\nconst ACTION_CHANGE_BORDERS = 2;\r\nconst ASSERT = 3;\r\n\r\nfunction bordersTest(turn) {\r\n    let changes = [[4, 5, 'top'], [1, 2, 'right'], [3, 7, 'bottom'], [8, 2, 'left'], [2, 4, 'top']];\r\n    if (changes.length > 0) checkReactionOfBorders(1, changes[0], turn, true, changes.length);\r\n    for (let i = 1; i < changes.length; ++i) checkReactionOfBorders(i + 1, changes[i], turn, false, changes.length);\r\n}\r\n\r\nfunction checkReactionOfBorders(testCaseIndex, testDetails, turn, isFirstCall, totalTestCases) {\r\n    let [selectedRowNum, selectedColNum, newBorders] = testDetails;\r\n    let cellValueDiv = document.querySelector(`.row${selectedRowNum}.col${selectedColNum}>.cellValueDiv`);\r\n    let myTurnNumber = getInLine(turn);\r\n    let stage = WAIT_IN_QUEUE;\r\n    let prevBorders;\r\n    let prevState;\r\n    let prevHistoryIndex;\r\n    let timer = setInterval(() => {\r\n        try {\r\n            switch (stage) {\r\n                case WAIT_IN_QUEUE:\r\n                    if (turn.current == myTurnNumber) {\r\n                        if (isFirstCall) console.log('\\n--------BORDERS TEST--------------------');\r\n                        stage = ARRANGE;\r\n                    }\r\n                    break;\r\n                case ARRANGE:\r\n                    let history = store.getState().history;\r\n                    // arrange\r\n                    prevBorders = parseBoxShadow(cellValueDiv.style.boxShadow);\r\n                    prevState = history.changeHistory[history.changeHistoryIndex];\r\n                    prevHistoryIndex = history.changeHistoryIndex;\r\n                case ACTION_SELECT_CELL:\r\n                    // select cell\r\n                    let cell = document.querySelector(`.row${selectedRowNum}.col${selectedColNum} .coverDiv`);\r\n                    cell.dispatchEvent(new MouseEvent('mousedown', { bubbles: true, cancelable: true, clientX: 0 }));\r\n                    stage = ACTION_CHANGE_BORDERS;\r\n                    break;\r\n                case ACTION_CHANGE_BORDERS:\r\n                    let selectionEntries = store.getState().selection.entries;\r\n                    updateBorders(selectionEntries, prevBorders, newBorders);\r\n                    stage = ASSERT;\r\n                    break;\r\n                case ASSERT:\r\n                    let prevPropertyObj = { borders: prevBorders };\r\n                    let propertyObj = { borders: newBorders };\r\n                    let propertyObjDOM = { borders: translateToBoxShadows([newBorders]) };\r\n                    compareDOM(selectedRowNum, selectedColNum, propertyObjDOM);\r\n                    compareStore(selectedRowNum, selectedColNum, prevPropertyObj, propertyObj, prevState, prevHistoryIndex);\r\n                    console.log('borders affects store and DOM correctly');\r\n                    if (testCaseIndex == totalTestCases) logSuccess('bordersTest()', totalTestCases);\r\n                    nextTurn(turn);\r\n                    clearInterval(timer);\r\n                    break;\r\n            }\r\n        } catch (e) {\r\n            let errMsg = 'Err: checkReactionOfBorders(): { testCaseIndex: ' + testCaseIndex + ', rowNum: ' + selectedRowNum + ', colNum: ' + selectedColNum + ', newBorders: ' + newBorders + ' } :\\n' + e;\r\n            console.log(errMsg);\r\n            logError(errMsg);\r\n            clearInterval(timer);\r\n        }\r\n    }, 200);\r\n}\r\n\r\nexport { bordersTest, checkReactionOfBorders };","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\components\\Strikethrough\\test.js",["925","926","927","928","929","930"],[],"import { compareDOM, compareStore, logError, logSuccess } from '../../../../tests/helper.js';\r\nimport { getInLine, nextTurn } from '../../../../tests/sequenceHelpers.js'\r\nimport { store } from './../../../../store/store.js'\r\n\r\nconst WAIT_IN_QUEUE = -1;\r\nconst ARRANGE = 0;\r\nconst ACTION_SELECT_CELL = 1;\r\nconst ACTION_TOGGLE_STRIKETHROUGH = 2;\r\nconst ASSERT = 3;\r\n\r\nfunction strikethroughTest(turn) {\r\n    let changes = [[4, 5], [1, 2], [3, 7], [8, 2], [2, 4]];\r\n    try {\r\n        if (changes.length > 0) checkReactionOfStrikethrough(1, changes[0], turn, true, changes.length);\r\n        for (let i = 1; i < changes.length; ++i) checkReactionOfStrikethrough(i + 1, changes[i], turn, false, changes.length);\r\n    } catch (e) {\r\n        console.log('Error: checkReactionOfstrikethrough param error: ' + e);\r\n        logError(null, null, null, null, e);\r\n    }\r\n}\r\n\r\nfunction checkReactionOfStrikethrough(testCaseIndex, testDetails, turn, isFirstCall, totalTestCases) {\r\n    let [selectedRowNum, selectedColNum] = testDetails;\r\n    let cellValue = document.querySelector(`.row${selectedRowNum}.col${selectedColNum}>.cellValueDiv>.cellValue`);\r\n    let myTurnNumber = getInLine(turn);\r\n    let stage = WAIT_IN_QUEUE;\r\n    let wasPreviouslyStrikethrough;\r\n    let prevState;\r\n    let prevHistoryIndex;\r\n    let timer = setInterval(() => {\r\n        try {\r\n            switch (stage) {\r\n                case WAIT_IN_QUEUE:\r\n                    if (turn.current == myTurnNumber) {\r\n                        if (isFirstCall) console.log('\\n--------STRIKETHROUGH TEST--------------------');\r\n                        stage = ARRANGE;\r\n                    }\r\n                    break;\r\n                case ARRANGE:\r\n                    let history = store.getState().history;\r\n                    wasPreviouslyStrikethrough = cellValue.style.textDecoration == 'line-through';\r\n                    prevState = history.changeHistory[history.changeHistoryIndex];\r\n                    prevHistoryIndex = history.changeHistoryIndex;\r\n                case ACTION_SELECT_CELL:\r\n                    let cell = document.querySelector(`.row${selectedRowNum}.col${selectedColNum} .coverDiv`);\r\n                    cell.dispatchEvent(new MouseEvent('mousedown', { bubbles: true, cancelable: true, clientX: 0 }));\r\n                    stage = ACTION_TOGGLE_STRIKETHROUGH;\r\n                    break;\r\n                case ACTION_TOGGLE_STRIKETHROUGH:\r\n                    // trigger click event on strikethroughBtn\r\n                    let strikethroughBtn = document.querySelector('.strikethrough__btn');\r\n                    strikethroughBtn.dispatchEvent(new MouseEvent('click', { bubbles: true, cancelable: true, clientX: 0 }));\r\n                    stage = ASSERT;\r\n                    break;\r\n                case ASSERT:\r\n                    let prevPropertyObj = { textDecoration: wasPreviouslyStrikethrough ? 'line-through' : 'none' };\r\n                    let propertyObj = { textDecoration: wasPreviouslyStrikethrough ? 'none' : 'line-through' };\r\n                    compareDOM(selectedRowNum, selectedColNum, propertyObj);\r\n                    compareStore(selectedRowNum, selectedColNum, prevPropertyObj, propertyObj, prevState, prevHistoryIndex);\r\n                    console.log('strikethrough affects store and DOM correctly');\r\n                    if (testCaseIndex == totalTestCases) logSuccess('strikethroughTest()', totalTestCases);\r\n                    nextTurn(turn);\r\n                    clearInterval(timer);\r\n                    break;\r\n            }\r\n        } catch (e) {\r\n            let errMsg = 'Err: checkReactionOfStrikethrough(): { testCaseIndex: ' + testCaseIndex + ', rowNum: ' + selectedRowNum + ', colNum: ' + selectedColNum + ', toggling strikethrough: ' + wasPreviouslyStrikethrough ? 'off' : 'on' + ' } : ' + e;\r\n            console.log(errMsg);\r\n            logError(errMsg);\r\n            clearInterval(timer);\r\n        }\r\n    }, 200);\r\n}\r\n\r\nexport { strikethroughTest, checkReactionOfStrikethrough };","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\misc\\util.js",["931"],[],"function hasClass(domElem, className){\r\n    let reg = new RegExp(className);\r\n    if([...domElem.classList].filter(name=>reg.test(name)).length==0) return false;\r\n    else return true;\r\n}\r\n\r\nexport {hasClass};","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\TablePanel\\handlers\\cellHandler\\selectionHandler\\selectionHandler.js",["932","933","934","935","936","937","938","939","940","941","942","943"],[],"import { store } from '../../../../../store/store.js'\r\nimport { setSelection } from '../../../../../store/reducers/selectionSlice.js'\r\n\r\nfunction applySelectionHandler(entryCell) {\r\n    const selectionLayer = entryCell.querySelector('.coverDiv');\r\n    const input = entryCell.querySelector('input');\r\n\r\n    selectionLayer.addEventListener('mousedown', selectionLayerClickHandler);\r\n    input.addEventListener('blur', inputBlurHandler);\r\n    selectionLayer.addEventListener('dblclick', selectionLayerDoubleClickHandler);\r\n}\r\n\r\nfunction selectionLayerClickHandler(e) {\r\n    for (const cell of store.getState().selection.entries.values()) {\r\n        let [rowNum, colNum] = cell.split(',');\r\n        document.querySelector(`.row${rowNum}.col${colNum}>.coverDiv`).style.boxShadow = 'none';\r\n    }\r\n\r\n    e.target.focus();\r\n    e.target.style.boxShadow = 'inset 0 0 0 2px blue';\r\n    e.target.style.outline = 'none';\r\n\r\n    const rowNum = parseInt([...e.target.parentElement.classList].filter(name => /^row\\d+$/.test(name))[0].match(/(\\d+)/)[0], 10);\r\n    const colNum = parseInt([...e.target.parentElement.classList].filter(name => /^col\\d+$/.test(name))[0].match(/(\\d+)/)[0], 10);\r\n    let cellValueDiv = e.target.parentElement.querySelector('.cellValueDiv');\r\n    let cellValue = e.target.parentElement.querySelector('.cellValue');\r\n    let categories = {\r\n        fontFamily: cellValue.style.fontFamily,\r\n        fontSize: cellValue.style.fontSize == '' ? '12px' : cellValue.style.fontSize,\r\n        fontWeight: cellValue.style.fontWeight == '' ? '400' : cellValue.style.fontWeight,\r\n        fontStyle: cellValue.style.fontStyle == '' ? 'normal' : cellValue.style.fontStyle,\r\n        textDecoration: cellValue.style.textDecoration == '' ? 'none' : cellValue.style.textDecoration,\r\n        fontColor: cellValue.style.color == '' ? 'black' : cellValue.style.color,\r\n        cellColor: cellValueDiv.style.backgroundColor == '' ? 'white' : cellValueDiv.style.backgroundColor,\r\n        borders: cellValueDiv.style.boxShadow == '' ? [] : parseBoxShadow(cellValueDiv.style.boxShadow),\r\n        horizontalAlignment: cellValue.style.textAlign == '' ? 'center' : cellValue.style.textAlign,\r\n        verticalAlignment: cellValueDiv.style.justifyContent == '' ? 'center' : parseVerticalAlignment(cellValueDiv.style.justifyContent),\r\n    }\r\n    updateFormatPanelHighlights(categories);\r\n    store.dispatch(setSelection({ newEntries: [`${rowNum},${colNum}`], categories: categories }));\r\n    updateCellViewPanel([`${rowNum},${colNum}`]);\r\n    // css effect (cut/copy/paste)\r\n}\r\n\r\nfunction updateFormatPanelHighlights(categories) {\r\n    if (categories.fontWeight == '400') document.querySelector('.bold__btn').style.backgroundColor = 'white';\r\n    else document.querySelector('.bold__btn').style.backgroundColor = 'rgb(204, 255, 162)';\r\n    if (categories.fontStyle == 'normal') document.querySelector('.italic__btn').style.backgroundColor = 'white';\r\n    else document.querySelector('.italic__btn').style.backgroundColor = 'rgb(204, 255, 162)';\r\n    if (categories.textDecoration == 'none') document.querySelector('.strikethrough__btn').style.backgroundColor = 'white';\r\n    else document.querySelector('.strikethrough__btn').style.backgroundColor = 'rgb(204, 255, 162)';\r\n}\r\n\r\nfunction updateCellViewPanel(selectedEntries) {\r\n    let cell = selectedEntries.values().next().value;\r\n    let [rowNum, colNum] = cell.split(',');\r\n    let cellValue = document.querySelector(`.row${rowNum}.col${colNum}>.cellValueDiv>.cellValue`);\r\n    if (cellValue == null) return '';\r\n    document.querySelector('#cellViewPanel__cellTextValue').innerText = cellValue.innerText;\r\n}\r\n\r\nfunction parseBoxShadow(term) {\r\n    let boxShadowLabels = [];\r\n    if (term.includes('black 0px 3px 0px -1px inset')) boxShadowLabels.push('top');\r\n    if (term.includes('black -3px 0px 0px -1px inset')) boxShadowLabels.push('right');\r\n    if (term.includes('black 0px -3px 0px -1px inset')) boxShadowLabels.push('bottom');\r\n    if (term.includes('black 3px 0px 0px -1px inset')) boxShadowLabels.push('left');\r\n    return boxShadowLabels;\r\n}\r\n\r\nfunction parseVerticalAlignment(term) {\r\n    switch (term) {\r\n        case 'flex-start': return 'top';\r\n        case 'center': return 'center';\r\n        case 'flex-end': return 'bottom';\r\n        default: break;\r\n    }\r\n}\r\n\r\nfunction inputBlurHandler(e) {\r\n    e.target.parentElement.querySelector('.coverDiv').style.zIndex = 2;\r\n    e.target.style.opacity = 0;\r\n    e.target.parentElement.querySelector('.cellValue').style.opacity = 1;\r\n}\r\n\r\nfunction selectionLayerDoubleClickHandler(e) {\r\n    e.target.style.zIndex = -1;\r\n    e.target.parentElement.querySelector('.cellValue').style.opacity = 0;\r\n    e.target.parentElement.querySelector('input').style.opacity = 1;\r\n    e.target.parentElement.querySelector('input').focus();\r\n}\r\n\r\nexport { applySelectionHandler, parseBoxShadow };","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\TablePanel\\handlers\\cellHandler\\textChangeHandler\\textChangeHandler.js",[],[],"C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\FormatPanel\\helper.js",[],[],"C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\TablePanel\\helpers\\buildSheet\\helpers\\constructAxes.js",["944","945"],[],"import { getWidth, getMarginLeft, getHeight } from \"./util\";\r\n\r\nlet alphabet = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\r\n\r\nfunction constructAxisX(tableData, cols, defaultHeight) {\r\n    let keyIndex = 0;\r\n    let axisXCells = [];\r\n    for (let i = 0; i < cols; ++i) {\r\n        try {\r\n            let letter = alphabet[i < 26 ? i : i % 26];\r\n            let width = getWidth(tableData[0][i]);\r\n            let marginLeft = getMarginLeft(tableData[0][i]);\r\n            axisXCells.push(\r\n                <div key={keyIndex++} className={`row0 col${i + 1} AxisX`} style={{ height: `${defaultHeight}px`, width: `${width}px`, marginLeft: `${marginLeft}px`, lineHeight: `${defaultHeight - 2}px` }}>\r\n                    <p style={{ margin: 0 }}>{letter}</p>\r\n                    <div className='resizer-horizontal'></div>\r\n                </div>)\r\n        } catch (e) {\r\n            throw 'Error: ' + i + ' ' + e;\r\n        }\r\n    }\r\n\r\n    return <div key={keyIndex++} id='axisX' style={{ position: 'absolute', zIndex: 3, height: `${defaultHeight}px`, marginLeft: '50px' }}>{axisXCells}</div>;\r\n}\r\n\r\nfunction constructAxisY(tableData, rows, defaultWidth) {\r\n    let keyIndex = 0;\r\n    let axisYCells = [];\r\n    for (let i = 0; i < rows; ++i) {\r\n        try {\r\n            let height = getHeight(tableData[i][1]);\r\n            axisYCells.push(\r\n                <div key={keyIndex++} className={`row${i + 1} col0 AxisY`} style={{ height: `${height}px`, width: `${defaultWidth / 2}px` }}>\r\n                    <p style={{ margin: 0 }}>{i + 1}</p>\r\n                    <div className='resizer-vertical'></div>\r\n                </div>);\r\n        } catch (e) {\r\n            throw 'Error: ' + i + ' ' + e;\r\n        }\r\n    }\r\n    return <div key={keyIndex++} id='axisY' style={{ position: 'absolute', zIndex: 3, width: `${defaultWidth / 2}px` }}>{axisYCells}</div>;\r\n}\r\n\r\nexport { constructAxisX, constructAxisY };","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\TablePanel\\helpers\\buildSheet\\helpers\\util.js",["946","947","948","949","950"],[],"function getWidth(obj) {\r\n    let widthPair = obj.styleMap.filter(pair => pair[0] == 'width')[0];\r\n    return parseInt(widthPair[1], 10);\r\n}\r\n\r\nfunction getMarginLeft(obj) {\r\n    let marginPair = obj.styleMap.filter(pair => pair[0] == 'marginLeft')[0];\r\n    return parseInt(marginPair[1], 10);\r\n}\r\n\r\nfunction getHeight(obj) {\r\n    let heightPair = obj.styleMap.filter(pair => pair[0] == 'height')[0];\r\n    return parseInt(heightPair[1], 10);\r\n}\r\n\r\nfunction getRowsCols(tableData) {\r\n    return [tableData.length - 1, tableData[0].length - 1];\r\n}\r\n\r\nfunction getRowWidth(tableData) {\r\n    let lastColCellMarginLeft = tableData[0][tableData[0].length - 1].styleMap.filter(pair => pair[0] == 'marginLeft')[0][1];\r\n    let lastColCellWidth = tableData[0][tableData[0].length - 1].styleMap.filter(pair => pair[0] == 'width')[0][1];\r\n    return lastColCellMarginLeft + lastColCellWidth;\r\n}\r\n\r\nexport { getWidth, getMarginLeft, getHeight, getRowsCols, getRowWidth};","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\TablePanel\\helpers\\buildSheet\\helpers\\assembleTableData.js",["951","952","953","954","955","956","957","958","959","960","961","962","963","964","965"],[],"function assembleTableData(loadedSheet, rows, cols, defaultCellHeight, defaultCellWidth) {\r\n    let tableData = createEmptyTable(rows, cols);\r\n    loadTableData(loadedSheet, tableData, rows, cols, defaultCellHeight, defaultCellWidth);\r\n    return tableData;\r\n}\r\n\r\nfunction createEmptyTable(rows, cols) {\r\n    let tableData = [];\r\n    for (let i = 0; i < rows; ++i) {\r\n        let emptyRow = [];\r\n        for (let j = 0; j < cols; ++j) emptyRow.push({});\r\n        tableData.push(emptyRow);\r\n    }\r\n    return tableData;\r\n}\r\n\r\nfunction loadTableData(loadedSheet, tableData, rows, cols, defaultCellHeight, defaultCellWidth) {\r\n    if (loadedSheet != null && loadedSheet.hasOwnProperty('data')) {\r\n        loadWithCellData(loadedSheet, tableData);\r\n        loadWithGroupData(loadedSheet, tableData, defaultCellWidth);\r\n    }\r\n    applyDefaults(tableData, rows, cols, defaultCellHeight, defaultCellWidth);\r\n    calculateAndApplyMarginLefts(tableData, rows, cols);\r\n}\r\n\r\nfunction loadWithCellData(loadedSheet, tableData) { // cellData does not affect axes\r\n    if (loadedSheet.data.hasOwnProperty('individualData')) {\r\n        for (const individual of loadedSheet.data.individualData) {\r\n            if (individual.entryKey != 'spreadsheet' && !/.col\\d+/.test(individual.entryKey)) {\r\n                let rowNum = parseInt(individual.row, 10);\r\n                tableData[rowNum][0].styleMap = individual.hasOwnProperty('styleMap') ?\r\n                    individual.styleMap : [];\r\n            } else if (/.col\\d+/.test(individual.entryKey)) {\r\n                let colNum = parseInt(individual.col, 10);\r\n                let rowNum = parseInt(individual.row, 10);\r\n                tableData[rowNum][colNum].val = individual.val;\r\n                tableData[rowNum][colNum].styleMap = individual.hasOwnProperty('styleMap') ?\r\n                    individual.styleMap : [];\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction loadWithGroupData(loadedSheet, tableData, defaultCellWidth) {\r\n    if (loadedSheet.data.hasOwnProperty('groupData')) {\r\n        for (const group of loadedSheet.data.groupData) {\r\n            if (/^.col\\d+$/.test(group.groupName) && group.hasOwnProperty('styleMap')) {\r\n                let colNum = parseInt(group.groupName.match(/.col(\\d+)/)[1], 10);\r\n                let widthPair = group.styleMap.filter(pair => pair[0] == 'width');\r\n                // set provided groupData for colNum\r\n                for (let i = 0; i < tableData.length; ++i) {\r\n                    if (!tableData[i][colNum + 1].hasOwnProperty('styleMap')) tableData[i][colNum + 1].styleMap = [];\r\n                    if (i == 0) { // add width and other stylePairs\r\n                        if (widthPair.length != 0) tableData[i][colNum + 1].styleMap.push(widthPair[0]);\r\n                    } else tableData[i][colNum + 1].styleMap.push(...group.styleMap);\r\n                    // if width property in groupData, set marginLeft for every col thereafter\r\n                    if (widthPair.length != 0) {\r\n                        let dx = parseInt(widthPair[0][1], 10) - defaultCellWidth; // dx for existing/default marginLeft\r\n                        for (let j = 1 + colNum + 1; j < tableData[0].length; ++j) {\r\n                            if (!tableData[i][j].hasOwnProperty('styleMap')) tableData[i][j].styleMap = [];\r\n                            let alignPair = tableData[i][j].styleMap.filter(pair => pair[0] == 'marginLeft');\r\n                            if (alignPair.length != 0) { // existing marginLeft\r\n                                tableData[i][j].styleMap = updateMarginLeftInStyleMap(tableData[i][j].styleMap, dx);\r\n                            } else { // default marginLeft\r\n                                tableData[i][j].styleMap.push(['marginLeft', defaultCellWidth * (j - 2) + defaultCellWidth / 2 + dx]);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } else if (/^.row\\d+$/.test(group.groupName) && group.hasOwnProperty('styleMap')) {\r\n                let rowNum = parseInt(group.groupName.match(/.row(\\d+)/)[1], 10);\r\n                let heightPair = group.styleMap.filter(pair => pair[0] == 'height');\r\n                if (heightPair.length != 0) {\r\n                    if (!tableData[rowNum][0].hasOwnProperty('styleMap')) tableData[rowNum][0].styleMap = [];\r\n                    if (!tableData[rowNum][1].hasOwnProperty('styleMap')) tableData[rowNum][1].styleMap = [];\r\n                    tableData[rowNum][0].styleMap = [heightPair[0]];\r\n                    tableData[rowNum][1].styleMap = [heightPair[0]];\r\n                }\r\n                for (let i = 2; i < tableData[rowNum].length; ++i) {\r\n                    if (!tableData[rowNum][i].hasOwnProperty('styleMap')) tableData[rowNum][i].styleMap = []; tableData[rowNum][i].styleMap.push(...group.styleMap);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction updateMarginLeftInStyleMap(styleMap, dx) {\r\n    return styleMap.map(pair => pair[0] == 'marginLeft' ?\r\n        [pair[0], parseInt(pair[1], 10) + dx] : pair);\r\n}\r\n\r\n// apply default value, height, and width\r\nfunction applyDefaults(tableData, rows, cols, defaultCellHeight, defaultCellWidth) {\r\n    for (let i = 0; i < rows; ++i) {\r\n        for (let j = 0; j < cols; ++j) {\r\n            let entry = tableData[i][j];\r\n            if (!entry.hasOwnProperty('val')) entry.val = '';\r\n            if (!entry.hasOwnProperty('styleMap')) {\r\n                entry.styleMap = [];\r\n                entry.styleMap.push(['height', defaultCellHeight]);\r\n                entry.styleMap.push(['width', defaultCellWidth]);\r\n            } else {\r\n                let heightPair = entry.styleMap.filter(pair => pair[0] == 'height');\r\n                let widthPair = entry.styleMap.filter(pair => pair[0] == 'width');\r\n                if (heightPair.length == 0) entry.styleMap.push(['height', defaultCellHeight]);\r\n                if (widthPair.length == 0) entry.styleMap.push(['width', defaultCellWidth]);\r\n            }\r\n            tableData[i][j] = entry;\r\n        }\r\n    }\r\n}\r\n\r\nfunction calculateAndApplyMarginLefts(tableData, rows, cols) {\r\n    let margins = getTopAxisMargins(tableData);\r\n    for (let i = 0; i < rows; ++i) {\r\n        for (let j = 0; j < cols; ++j) {\r\n            let entry = tableData[i][j];\r\n            entry.styleMap.push(['marginLeft', margins[j]]);\r\n            tableData[i][j] = entry;\r\n        }\r\n    }\r\n}\r\n\r\nfunction getTopAxisMargins(tableData) {\r\n    let margins = [0];\r\n    for (let j = 1; j < tableData[0].length; ++j) {\r\n        let priorEntry = tableData[0][j - 1];\r\n        let priorEntryWidth = priorEntry.styleMap.filter(pair => pair[0] == 'width')[0][1];\r\n        margins.push(margins[margins.length - 1] + priorEntryWidth);\r\n    }\r\n    return margins;\r\n}\r\n\r\nexport default assembleTableData;","C:\\Users\\rband\\Desktop\\SpreadsheetPanel\\client\\src\\components\\TablePanel\\helpers\\buildSheet\\helpers\\constructTableModel.js",["966","967"],[],"import { getHeight, getWidth, getMarginLeft } from \"./util\";\r\n\r\nfunction constructTableModel(tableData, rows, cols, rowWidth) {\r\n    let keyIndex = 0;\r\n    let tableModel = [];\r\n\r\n    let rowsArr = constructRows(tableData, rows, cols);\r\n    for (let j = 0; j < rowsArr.length; ++j) {\r\n        let height = getHeight(tableData[j][0]);\r\n        tableModel.push(<div key={keyIndex++} id={`row${j + 1}`} className={`row${j + 1}`} style={{ height: `${height}px`, width: `${rowWidth}px` }}>\r\n            {rowsArr[j]}\r\n        </div>);\r\n    }\r\n    return tableModel;\r\n}\r\n\r\nfunction constructRows(tableData, rows, cols) {\r\n    let keyIndex = 0;\r\n    let rowsArr = [];\r\n    for (let i = 0; i < rows; ++i) {\r\n        let row = [];\r\n        for (let j = 0; j < cols; ++j) {\r\n            let val = tableData[i][j].val;\r\n            let height = getHeight(tableData[i][j]);\r\n            let width = getWidth(tableData[i][j]);\r\n            let marginLeft = getMarginLeft(tableData[i][j]);\r\n            row.push(\r\n                <div key={keyIndex++} className={`row${i + 1} col${j + 1} entryCell`} style={{height: `${height}px`, width: `${width}px`, marginLeft: `${marginLeft}px` }}>\r\n                    <input className='cellInput' onKeyDown={stopPropagationKeyDown} onKeyUp={stopPropagationKeyUp} type='text' defaultValue={val}></input>\r\n                    <div className='cellValueDiv'>\r\n                        <p className='cellValue'>{val}</p>\r\n                    </div>\r\n                    <div className='coverDiv' tabIndex='-1' style={{ boxShadow: i == 0 && j == 0 ? 'inset 0 0 0 2px blue' : 'none' }}></div>\r\n                </div>);\r\n        }\r\n        rowsArr.push(row);\r\n    }\r\n    return rowsArr;\r\n}\r\n\r\nfunction stopPropagationKeyDown(e) {\r\n    document.querySelector('#cellViewPanel__cellTextValue').innerText = document.querySelector('#cellViewPanel__cellTextValue').innerText + e.key;\r\n    e.stopPropagation();\r\n}\r\n\r\nfunction stopPropagationKeyUp(e) {\r\n    e.stopPropagation();\r\n}\r\n\r\nexport { constructTableModel };",{"ruleId":"968","severity":1,"message":"969","line":1,"column":8,"nodeType":"970","messageId":"971","endLine":1,"endColumn":13},{"ruleId":"968","severity":1,"message":"972","line":5,"column":10,"nodeType":"970","messageId":"971","endLine":5,"endColumn":20},{"ruleId":"973","severity":1,"message":"974","line":15,"column":31,"nodeType":"975","messageId":"976","endLine":15,"endColumn":46},{"ruleId":"973","severity":1,"message":"977","line":17,"column":29,"nodeType":"975","messageId":"976","endLine":17,"endColumn":42},{"ruleId":"973","severity":1,"message":"978","line":18,"column":39,"nodeType":"975","messageId":"976","endLine":18,"endColumn":62},{"ruleId":"979","severity":1,"message":"980","line":21,"column":40,"nodeType":"981","messageId":"982","endLine":21,"endColumn":42},{"ruleId":"979","severity":1,"message":"980","line":22,"column":38,"nodeType":"981","messageId":"982","endLine":22,"endColumn":40},{"ruleId":"979","severity":1,"message":"980","line":23,"column":48,"nodeType":"981","messageId":"982","endLine":23,"endColumn":50},{"ruleId":"973","severity":1,"message":"983","line":16,"column":35,"nodeType":"975","messageId":"976","endLine":16,"endColumn":54},{"ruleId":"973","severity":1,"message":"984","line":17,"column":40,"nodeType":"975","messageId":"976","endLine":17,"endColumn":64},{"ruleId":"973","severity":1,"message":"985","line":18,"column":35,"nodeType":"975","messageId":"976","endLine":18,"endColumn":54},{"ruleId":"973","severity":1,"message":"986","line":19,"column":30,"nodeType":"975","messageId":"976","endLine":19,"endColumn":44},{"ruleId":"973","severity":1,"message":"987","line":22,"column":33,"nodeType":"975","messageId":"976","endLine":22,"endColumn":50},{"ruleId":"973","severity":1,"message":"986","line":26,"column":30,"nodeType":"975","messageId":"976","endLine":26,"endColumn":44},{"ruleId":"973","severity":1,"message":"987","line":29,"column":33,"nodeType":"975","messageId":"976","endLine":29,"endColumn":50},{"ruleId":"973","severity":1,"message":"983","line":30,"column":35,"nodeType":"975","messageId":"976","endLine":30,"endColumn":54},{"ruleId":"973","severity":1,"message":"986","line":33,"column":30,"nodeType":"975","messageId":"976","endLine":33,"endColumn":44},{"ruleId":"973","severity":1,"message":"987","line":36,"column":33,"nodeType":"975","messageId":"976","endLine":36,"endColumn":50},{"ruleId":"973","severity":1,"message":"983","line":37,"column":35,"nodeType":"975","messageId":"976","endLine":37,"endColumn":54},{"ruleId":"973","severity":1,"message":"986","line":40,"column":30,"nodeType":"975","messageId":"976","endLine":40,"endColumn":44},{"ruleId":"973","severity":1,"message":"987","line":43,"column":33,"nodeType":"975","messageId":"976","endLine":43,"endColumn":50},{"ruleId":"973","severity":1,"message":"987","line":51,"column":33,"nodeType":"975","messageId":"976","endLine":51,"endColumn":50},{"ruleId":"973","severity":1,"message":"983","line":52,"column":35,"nodeType":"975","messageId":"976","endLine":52,"endColumn":54},{"ruleId":"973","severity":1,"message":"984","line":53,"column":40,"nodeType":"975","messageId":"976","endLine":53,"endColumn":64},{"ruleId":"973","severity":1,"message":"987","line":59,"column":33,"nodeType":"975","messageId":"976","endLine":59,"endColumn":50},{"ruleId":"973","severity":1,"message":"983","line":60,"column":35,"nodeType":"975","messageId":"976","endLine":60,"endColumn":54},{"ruleId":"973","severity":1,"message":"984","line":61,"column":40,"nodeType":"975","messageId":"976","endLine":61,"endColumn":64},{"ruleId":"988","severity":1,"message":"989","line":7,"column":99,"nodeType":"990","messageId":"991","endLine":7,"endColumn":165},{"ruleId":"988","severity":1,"message":"989","line":8,"column":41,"nodeType":"990","messageId":"991","endLine":8,"endColumn":105},{"ruleId":"988","severity":1,"message":"989","line":12,"column":52,"nodeType":"990","messageId":"991","endLine":12,"endColumn":106},{"ruleId":"988","severity":1,"message":"989","line":16,"column":52,"nodeType":"990","messageId":"991","endLine":16,"endColumn":106},{"ruleId":"979","severity":1,"message":"992","line":32,"column":23,"nodeType":"981","messageId":"982","endLine":32,"endColumn":25},{"ruleId":"979","severity":1,"message":"992","line":32,"column":46,"nodeType":"981","messageId":"982","endLine":32,"endColumn":48},{"ruleId":"988","severity":1,"message":"989","line":4,"column":41,"nodeType":"990","messageId":"991","endLine":4,"endColumn":91},{"ruleId":"979","severity":1,"message":"992","line":6,"column":26,"nodeType":"981","messageId":"982","endLine":6,"endColumn":28},{"ruleId":"979","severity":1,"message":"992","line":6,"column":50,"nodeType":"981","messageId":"982","endLine":6,"endColumn":52},{"ruleId":"988","severity":1,"message":"989","line":7,"column":82,"nodeType":"990","messageId":"991","endLine":7,"endColumn":163},{"ruleId":"988","severity":1,"message":"989","line":8,"column":20,"nodeType":"990","messageId":"991","endLine":8,"endColumn":95},{"ruleId":"988","severity":1,"message":"989","line":16,"column":99,"nodeType":"990","messageId":"991","endLine":16,"endColumn":164},{"ruleId":"979","severity":1,"message":"992","line":17,"column":22,"nodeType":"981","messageId":"982","endLine":17,"endColumn":24},{"ruleId":"979","severity":1,"message":"992","line":17,"column":45,"nodeType":"981","messageId":"982","endLine":17,"endColumn":47},{"ruleId":"979","severity":1,"message":"980","line":18,"column":67,"nodeType":"981","messageId":"982","endLine":18,"endColumn":69},{"ruleId":"988","severity":1,"message":"989","line":18,"column":77,"nodeType":"990","messageId":"991","endLine":18,"endColumn":147},{"ruleId":"988","severity":1,"message":"989","line":19,"column":16,"nodeType":"990","messageId":"991","endLine":19,"endColumn":79},{"ruleId":"988","severity":1,"message":"989","line":23,"column":41,"nodeType":"990","messageId":"991","endLine":23,"endColumn":92},{"ruleId":"988","severity":1,"message":"989","line":35,"column":41,"nodeType":"990","messageId":"991","endLine":35,"endColumn":102},{"ruleId":"979","severity":1,"message":"992","line":37,"column":26,"nodeType":"981","messageId":"982","endLine":37,"endColumn":28},{"ruleId":"988","severity":1,"message":"989","line":38,"column":82,"nodeType":"990","messageId":"991","endLine":38,"endColumn":155},{"ruleId":"988","severity":1,"message":"989","line":39,"column":20,"nodeType":"990","messageId":"991","endLine":39,"endColumn":93},{"ruleId":"988","severity":1,"message":"989","line":41,"column":68,"nodeType":"990","messageId":"991","endLine":41,"endColumn":126},{"ruleId":"988","severity":1,"message":"989","line":52,"column":99,"nodeType":"990","messageId":"991","endLine":52,"endColumn":162},{"ruleId":"979","severity":1,"message":"992","line":53,"column":22,"nodeType":"981","messageId":"982","endLine":53,"endColumn":24},{"ruleId":"979","severity":1,"message":"980","line":54,"column":67,"nodeType":"981","messageId":"982","endLine":54,"endColumn":69},{"ruleId":"988","severity":1,"message":"989","line":54,"column":77,"nodeType":"990","messageId":"991","endLine":54,"endColumn":139},{"ruleId":"988","severity":1,"message":"989","line":55,"column":16,"nodeType":"990","messageId":"991","endLine":55,"endColumn":77},{"ruleId":"988","severity":1,"message":"989","line":59,"column":41,"nodeType":"990","messageId":"991","endLine":59,"endColumn":102},{"ruleId":"988","severity":1,"message":"989","line":63,"column":68,"nodeType":"990","messageId":"991","endLine":63,"endColumn":121},{"ruleId":"988","severity":1,"message":"989","line":77,"column":41,"nodeType":"990","messageId":"991","endLine":77,"endColumn":103},{"ruleId":"979","severity":1,"message":"992","line":79,"column":26,"nodeType":"981","messageId":"982","endLine":79,"endColumn":28},{"ruleId":"979","severity":1,"message":"992","line":79,"column":50,"nodeType":"981","messageId":"982","endLine":79,"endColumn":52},{"ruleId":"979","severity":1,"message":"992","line":79,"column":73,"nodeType":"981","messageId":"982","endLine":79,"endColumn":75},{"ruleId":"979","severity":1,"message":"992","line":79,"column":101,"nodeType":"981","messageId":"982","endLine":79,"endColumn":103},{"ruleId":"979","severity":1,"message":"992","line":79,"column":128,"nodeType":"981","messageId":"982","endLine":79,"endColumn":130},{"ruleId":"988","severity":1,"message":"989","line":80,"column":82,"nodeType":"990","messageId":"991","endLine":80,"endColumn":166},{"ruleId":"979","severity":1,"message":"992","line":81,"column":33,"nodeType":"981","messageId":"982","endLine":81,"endColumn":35},{"ruleId":"979","severity":1,"message":"992","line":81,"column":60,"nodeType":"981","messageId":"982","endLine":81,"endColumn":62},{"ruleId":"979","severity":1,"message":"992","line":81,"column":92,"nodeType":"981","messageId":"982","endLine":81,"endColumn":94},{"ruleId":"979","severity":1,"message":"992","line":81,"column":119,"nodeType":"981","messageId":"982","endLine":81,"endColumn":121},{"ruleId":"979","severity":1,"message":"992","line":81,"column":146,"nodeType":"981","messageId":"982","endLine":81,"endColumn":148},{"ruleId":"979","severity":1,"message":"992","line":81,"column":183,"nodeType":"981","messageId":"982","endLine":81,"endColumn":185},{"ruleId":"979","severity":1,"message":"992","line":81,"column":218,"nodeType":"981","messageId":"982","endLine":81,"endColumn":220},{"ruleId":"979","severity":1,"message":"992","line":81,"column":246,"nodeType":"981","messageId":"982","endLine":81,"endColumn":248},{"ruleId":"988","severity":1,"message":"989","line":82,"column":20,"nodeType":"990","messageId":"991","endLine":82,"endColumn":94},{"ruleId":"988","severity":1,"message":"989","line":84,"column":68,"nodeType":"990","messageId":"991","endLine":84,"endColumn":127},{"ruleId":"988","severity":1,"message":"989","line":85,"column":68,"nodeType":"990","messageId":"991","endLine":85,"endColumn":127},{"ruleId":"988","severity":1,"message":"989","line":104,"column":99,"nodeType":"990","messageId":"991","endLine":104,"endColumn":163},{"ruleId":"979","severity":1,"message":"992","line":105,"column":22,"nodeType":"981","messageId":"982","endLine":105,"endColumn":24},{"ruleId":"979","severity":1,"message":"992","line":105,"column":45,"nodeType":"981","messageId":"982","endLine":105,"endColumn":47},{"ruleId":"979","severity":1,"message":"992","line":105,"column":69,"nodeType":"981","messageId":"982","endLine":105,"endColumn":71},{"ruleId":"979","severity":1,"message":"992","line":105,"column":97,"nodeType":"981","messageId":"982","endLine":105,"endColumn":99},{"ruleId":"979","severity":1,"message":"992","line":105,"column":124,"nodeType":"981","messageId":"982","endLine":105,"endColumn":126},{"ruleId":"979","severity":1,"message":"980","line":106,"column":67,"nodeType":"981","messageId":"982","endLine":106,"endColumn":69},{"ruleId":"988","severity":1,"message":"989","line":106,"column":77,"nodeType":"990","messageId":"991","endLine":106,"endColumn":150},{"ruleId":"979","severity":1,"message":"992","line":107,"column":29,"nodeType":"981","messageId":"982","endLine":107,"endColumn":31},{"ruleId":"979","severity":1,"message":"992","line":107,"column":56,"nodeType":"981","messageId":"982","endLine":107,"endColumn":58},{"ruleId":"979","severity":1,"message":"992","line":107,"column":88,"nodeType":"981","messageId":"982","endLine":107,"endColumn":90},{"ruleId":"979","severity":1,"message":"992","line":107,"column":115,"nodeType":"981","messageId":"982","endLine":107,"endColumn":117},{"ruleId":"979","severity":1,"message":"992","line":107,"column":142,"nodeType":"981","messageId":"982","endLine":107,"endColumn":144},{"ruleId":"979","severity":1,"message":"992","line":107,"column":179,"nodeType":"981","messageId":"982","endLine":107,"endColumn":181},{"ruleId":"979","severity":1,"message":"992","line":107,"column":214,"nodeType":"981","messageId":"982","endLine":107,"endColumn":216},{"ruleId":"979","severity":1,"message":"992","line":107,"column":242,"nodeType":"981","messageId":"982","endLine":107,"endColumn":244},{"ruleId":"988","severity":1,"message":"989","line":108,"column":16,"nodeType":"990","messageId":"991","endLine":108,"endColumn":78},{"ruleId":"988","severity":1,"message":"989","line":112,"column":41,"nodeType":"990","messageId":"991","endLine":112,"endColumn":103},{"ruleId":"988","severity":1,"message":"989","line":116,"column":68,"nodeType":"990","messageId":"991","endLine":116,"endColumn":126},{"ruleId":"988","severity":1,"message":"989","line":120,"column":68,"nodeType":"990","messageId":"991","endLine":120,"endColumn":126},{"ruleId":"979","severity":1,"message":"992","line":138,"column":22,"nodeType":"981","messageId":"982","endLine":138,"endColumn":24},{"ruleId":"979","severity":1,"message":"992","line":27,"column":35,"nodeType":"981","messageId":"982","endLine":27,"endColumn":37},{"ruleId":"968","severity":1,"message":"993","line":3,"column":21,"nodeType":"970","messageId":"971","endLine":3,"endColumn":37},{"ruleId":"968","severity":1,"message":"994","line":16,"column":5,"nodeType":"970","messageId":"971","endLine":16,"endColumn":16},{"ruleId":"979","severity":1,"message":"992","line":47,"column":36,"nodeType":"981","messageId":"982","endLine":47,"endColumn":38},{"ruleId":"979","severity":1,"message":"992","line":56,"column":40,"nodeType":"981","messageId":"982","endLine":56,"endColumn":42},{"ruleId":"979","severity":1,"message":"992","line":57,"column":44,"nodeType":"981","messageId":"982","endLine":57,"endColumn":46},{"ruleId":"979","severity":1,"message":"992","line":58,"column":44,"nodeType":"981","messageId":"982","endLine":58,"endColumn":46},{"ruleId":"979","severity":1,"message":"992","line":69,"column":35,"nodeType":"981","messageId":"982","endLine":69,"endColumn":37},{"ruleId":"979","severity":1,"message":"992","line":76,"column":35,"nodeType":"981","messageId":"982","endLine":76,"endColumn":37},{"ruleId":"979","severity":1,"message":"992","line":92,"column":40,"nodeType":"981","messageId":"982","endLine":92,"endColumn":42},{"ruleId":"979","severity":1,"message":"980","line":106,"column":76,"nodeType":"981","messageId":"982","endLine":106,"endColumn":78},{"ruleId":"979","severity":1,"message":"980","line":107,"column":68,"nodeType":"981","messageId":"982","endLine":107,"endColumn":70},{"ruleId":"979","severity":1,"message":"992","line":46,"column":32,"nodeType":"981","messageId":"982","endLine":46,"endColumn":34},{"ruleId":"979","severity":1,"message":"992","line":55,"column":31,"nodeType":"981","messageId":"982","endLine":55,"endColumn":33},{"ruleId":"968","severity":1,"message":"995","line":1,"column":10,"nodeType":"970","messageId":"971","endLine":1,"endColumn":29},{"ruleId":"979","severity":1,"message":"992","line":10,"column":25,"nodeType":"981","messageId":"982","endLine":10,"endColumn":27},{"ruleId":"979","severity":1,"message":"992","line":34,"column":35,"nodeType":"981","messageId":"982","endLine":34,"endColumn":37},{"ruleId":"996","severity":1,"message":"997","line":39,"column":8,"nodeType":"998","endLine":39,"endColumn":10,"suggestions":"999"},{"ruleId":"968","severity":1,"message":"1000","line":1,"column":17,"nodeType":"970","messageId":"971","endLine":1,"endColumn":25},{"ruleId":"979","severity":1,"message":"992","line":41,"column":35,"nodeType":"981","messageId":"982","endLine":41,"endColumn":37},{"ruleId":"979","severity":1,"message":"980","line":38,"column":22,"nodeType":"981","messageId":"982","endLine":38,"endColumn":24},{"ruleId":"979","severity":1,"message":"992","line":10,"column":25,"nodeType":"981","messageId":"982","endLine":10,"endColumn":27},{"ruleId":"979","severity":1,"message":"992","line":11,"column":25,"nodeType":"981","messageId":"982","endLine":11,"endColumn":27},{"ruleId":"968","severity":1,"message":"1001","line":1,"column":17,"nodeType":"970","messageId":"971","endLine":1,"endColumn":26},{"ruleId":"968","severity":1,"message":"1000","line":1,"column":28,"nodeType":"970","messageId":"971","endLine":1,"endColumn":36},{"ruleId":"968","severity":1,"message":"1002","line":34,"column":32,"nodeType":"970","messageId":"971","endLine":34,"endColumn":50},{"ruleId":"968","severity":1,"message":"1003","line":1,"column":10,"nodeType":"970","messageId":"971","endLine":1,"endColumn":19},{"ruleId":"968","severity":1,"message":"1004","line":1,"column":21,"nodeType":"970","messageId":"971","endLine":1,"endColumn":29},{"ruleId":"968","severity":1,"message":"1005","line":2,"column":10,"nodeType":"970","messageId":"971","endLine":2,"endColumn":15},{"ruleId":"968","severity":1,"message":"1006","line":4,"column":10,"nodeType":"970","messageId":"971","endLine":4,"endColumn":45},{"ruleId":"979","severity":1,"message":"992","line":21,"column":32,"nodeType":"981","messageId":"982","endLine":21,"endColumn":34},{"ruleId":"979","severity":1,"message":"992","line":29,"column":19,"nodeType":"981","messageId":"982","endLine":29,"endColumn":21},{"ruleId":"979","severity":1,"message":"992","line":36,"column":23,"nodeType":"981","messageId":"982","endLine":36,"endColumn":25},{"ruleId":"979","severity":1,"message":"992","line":36,"column":33,"nodeType":"981","messageId":"982","endLine":36,"endColumn":35},{"ruleId":"979","severity":1,"message":"992","line":42,"column":36,"nodeType":"981","messageId":"982","endLine":42,"endColumn":38},{"ruleId":"979","severity":1,"message":"992","line":43,"column":41,"nodeType":"981","messageId":"982","endLine":43,"endColumn":43},{"ruleId":"979","severity":1,"message":"992","line":44,"column":19,"nodeType":"981","messageId":"982","endLine":44,"endColumn":21},{"ruleId":"979","severity":1,"message":"992","line":51,"column":23,"nodeType":"981","messageId":"982","endLine":51,"endColumn":25},{"ruleId":"979","severity":1,"message":"992","line":51,"column":33,"nodeType":"981","messageId":"982","endLine":51,"endColumn":35},{"ruleId":"979","severity":1,"message":"992","line":56,"column":36,"nodeType":"981","messageId":"982","endLine":56,"endColumn":38},{"ruleId":"979","severity":1,"message":"992","line":16,"column":25,"nodeType":"981","messageId":"982","endLine":16,"endColumn":27},{"ruleId":"979","severity":1,"message":"992","line":16,"column":24,"nodeType":"981","messageId":"982","endLine":16,"endColumn":26},{"ruleId":"979","severity":1,"message":"992","line":23,"column":23,"nodeType":"981","messageId":"982","endLine":23,"endColumn":25},{"ruleId":"979","severity":1,"message":"992","line":23,"column":33,"nodeType":"981","messageId":"982","endLine":23,"endColumn":35},{"ruleId":"979","severity":1,"message":"992","line":48,"column":44,"nodeType":"981","messageId":"982","endLine":48,"endColumn":46},{"ruleId":"979","severity":1,"message":"980","line":56,"column":45,"nodeType":"981","messageId":"982","endLine":56,"endColumn":47},{"ruleId":"979","severity":1,"message":"992","line":59,"column":75,"nodeType":"981","messageId":"982","endLine":59,"endColumn":77},{"ruleId":"979","severity":1,"message":"992","line":67,"column":39,"nodeType":"981","messageId":"982","endLine":67,"endColumn":41},{"ruleId":"979","severity":1,"message":"992","line":92,"column":32,"nodeType":"981","messageId":"982","endLine":92,"endColumn":34},{"ruleId":"988","severity":1,"message":"989","line":94,"column":25,"nodeType":"990","messageId":"991","endLine":94,"endColumn":177},{"ruleId":"988","severity":1,"message":"989","line":98,"column":24,"nodeType":"990","messageId":"991","endLine":98,"endColumn":169},{"ruleId":"988","severity":1,"message":"989","line":102,"column":28,"nodeType":"990","messageId":"991","endLine":102,"endColumn":129},{"ruleId":"979","severity":1,"message":"992","line":111,"column":20,"nodeType":"981","messageId":"982","endLine":111,"endColumn":22},{"ruleId":"979","severity":1,"message":"992","line":113,"column":20,"nodeType":"981","messageId":"982","endLine":113,"endColumn":22},{"ruleId":"979","severity":1,"message":"992","line":114,"column":25,"nodeType":"981","messageId":"982","endLine":114,"endColumn":27},{"ruleId":"979","severity":1,"message":"992","line":124,"column":29,"nodeType":"981","messageId":"982","endLine":124,"endColumn":31},{"ruleId":"979","severity":1,"message":"992","line":126,"column":36,"nodeType":"981","messageId":"982","endLine":126,"endColumn":38},{"ruleId":"988","severity":1,"message":"989","line":128,"column":12,"nodeType":"990","messageId":"991","endLine":128,"endColumn":100},{"ruleId":"979","severity":1,"message":"980","line":135,"column":27,"nodeType":"981","messageId":"982","endLine":135,"endColumn":29},{"ruleId":"988","severity":1,"message":"989","line":135,"column":51,"nodeType":"990","messageId":"991","endLine":135,"endColumn":237},{"ruleId":"979","severity":1,"message":"992","line":136,"column":70,"nodeType":"981","messageId":"982","endLine":136,"endColumn":72},{"ruleId":"979","severity":1,"message":"992","line":141,"column":25,"nodeType":"981","messageId":"982","endLine":141,"endColumn":27},{"ruleId":"979","severity":1,"message":"980","line":146,"column":28,"nodeType":"981","messageId":"982","endLine":146,"endColumn":30},{"ruleId":"988","severity":1,"message":"989","line":146,"column":63,"nodeType":"990","messageId":"991","endLine":146,"endColumn":114},{"ruleId":"979","severity":1,"message":"992","line":148,"column":29,"nodeType":"981","messageId":"982","endLine":148,"endColumn":31},{"ruleId":"979","severity":1,"message":"992","line":150,"column":36,"nodeType":"981","messageId":"982","endLine":150,"endColumn":38},{"ruleId":"979","severity":1,"message":"992","line":157,"column":22,"nodeType":"981","messageId":"982","endLine":157,"endColumn":24},{"ruleId":"979","severity":1,"message":"992","line":175,"column":22,"nodeType":"981","messageId":"982","endLine":175,"endColumn":24},{"ruleId":"979","severity":1,"message":"992","line":176,"column":27,"nodeType":"981","messageId":"982","endLine":176,"endColumn":29},{"ruleId":"979","severity":1,"message":"980","line":179,"column":47,"nodeType":"981","messageId":"982","endLine":179,"endColumn":49},{"ruleId":"988","severity":1,"message":"989","line":179,"column":60,"nodeType":"990","messageId":"991","endLine":179,"endColumn":108},{"ruleId":"979","severity":1,"message":"980","line":182,"column":46,"nodeType":"981","messageId":"982","endLine":182,"endColumn":48},{"ruleId":"988","severity":1,"message":"989","line":182,"column":59,"nodeType":"990","messageId":"991","endLine":182,"endColumn":106},{"ruleId":"979","severity":1,"message":"980","line":185,"column":46,"nodeType":"981","messageId":"982","endLine":185,"endColumn":48},{"ruleId":"979","severity":1,"message":"980","line":185,"column":91,"nodeType":"981","messageId":"982","endLine":185,"endColumn":93},{"ruleId":"988","severity":1,"message":"989","line":185,"column":98,"nodeType":"990","messageId":"991","endLine":185,"endColumn":148},{"ruleId":"979","severity":1,"message":"980","line":189,"column":59,"nodeType":"981","messageId":"982","endLine":189,"endColumn":61},{"ruleId":"988","severity":1,"message":"989","line":189,"column":67,"nodeType":"990","messageId":"991","endLine":189,"endColumn":106},{"ruleId":"1007","severity":1,"message":"1008","line":191,"column":9,"nodeType":"1009","messageId":"1010","endLine":218,"endColumn":10},{"ruleId":"1011","severity":1,"message":"1012","line":193,"column":21,"nodeType":"1013","messageId":"1014","endLine":193,"endColumn":55},{"ruleId":"988","severity":1,"message":"989","line":193,"column":57,"nodeType":"990","messageId":"991","endLine":193,"endColumn":97},{"ruleId":"979","severity":1,"message":"980","line":194,"column":85,"nodeType":"981","messageId":"982","endLine":194,"endColumn":87},{"ruleId":"979","severity":1,"message":"980","line":194,"column":116,"nodeType":"981","messageId":"982","endLine":194,"endColumn":118},{"ruleId":"988","severity":1,"message":"989","line":195,"column":21,"nodeType":"990","messageId":"991","endLine":195,"endColumn":91},{"ruleId":"979","severity":1,"message":"992","line":197,"column":85,"nodeType":"981","messageId":"982","endLine":197,"endColumn":87},{"ruleId":"979","severity":1,"message":"992","line":198,"column":85,"nodeType":"981","messageId":"982","endLine":198,"endColumn":87},{"ruleId":"979","severity":1,"message":"980","line":199,"column":87,"nodeType":"981","messageId":"982","endLine":199,"endColumn":89},{"ruleId":"979","severity":1,"message":"980","line":200,"column":63,"nodeType":"981","messageId":"982","endLine":200,"endColumn":65},{"ruleId":"979","severity":1,"message":"980","line":201,"column":64,"nodeType":"981","messageId":"982","endLine":201,"endColumn":66},{"ruleId":"988","severity":1,"message":"989","line":202,"column":21,"nodeType":"990","messageId":"991","endLine":202,"endColumn":78},{"ruleId":"979","severity":1,"message":"992","line":207,"column":85,"nodeType":"981","messageId":"982","endLine":207,"endColumn":87},{"ruleId":"979","severity":1,"message":"992","line":208,"column":85,"nodeType":"981","messageId":"982","endLine":208,"endColumn":87},{"ruleId":"979","severity":1,"message":"980","line":209,"column":87,"nodeType":"981","messageId":"982","endLine":209,"endColumn":89},{"ruleId":"979","severity":1,"message":"980","line":210,"column":62,"nodeType":"981","messageId":"982","endLine":210,"endColumn":64},{"ruleId":"979","severity":1,"message":"980","line":211,"column":63,"nodeType":"981","messageId":"982","endLine":211,"endColumn":65},{"ruleId":"988","severity":1,"message":"989","line":212,"column":21,"nodeType":"990","messageId":"991","endLine":212,"endColumn":77},{"ruleId":"979","severity":1,"message":"980","line":216,"column":44,"nodeType":"981","messageId":"982","endLine":216,"endColumn":46},{"ruleId":"988","severity":1,"message":"989","line":216,"column":61,"nodeType":"990","messageId":"991","endLine":216,"endColumn":105},{"ruleId":"979","severity":1,"message":"992","line":225,"column":26,"nodeType":"981","messageId":"982","endLine":225,"endColumn":28},{"ruleId":"968","severity":1,"message":"1015","line":227,"column":21,"nodeType":"970","messageId":"971","endLine":227,"endColumn":23},{"ruleId":"979","severity":1,"message":"980","line":228,"column":44,"nodeType":"981","messageId":"982","endLine":228,"endColumn":46},{"ruleId":"988","severity":1,"message":"989","line":228,"column":61,"nodeType":"990","messageId":"991","endLine":228,"endColumn":100},{"ruleId":"979","severity":1,"message":"980","line":230,"column":48,"nodeType":"981","messageId":"982","endLine":230,"endColumn":50},{"ruleId":"988","severity":1,"message":"989","line":230,"column":65,"nodeType":"990","messageId":"991","endLine":230,"endColumn":104},{"ruleId":"979","severity":1,"message":"980","line":231,"column":71,"nodeType":"981","messageId":"982","endLine":231,"endColumn":73},{"ruleId":"988","severity":1,"message":"989","line":231,"column":92,"nodeType":"990","messageId":"991","endLine":231,"endColumn":136},{"ruleId":"979","severity":1,"message":"980","line":232,"column":81,"nodeType":"981","messageId":"982","endLine":232,"endColumn":83},{"ruleId":"988","severity":1,"message":"989","line":232,"column":98,"nodeType":"990","messageId":"991","endLine":232,"endColumn":146},{"ruleId":"979","severity":1,"message":"980","line":233,"column":81,"nodeType":"981","messageId":"982","endLine":233,"endColumn":83},{"ruleId":"988","severity":1,"message":"989","line":233,"column":102,"nodeType":"990","messageId":"991","endLine":233,"endColumn":150},{"ruleId":"968","severity":1,"message":"1016","line":239,"column":25,"nodeType":"970","messageId":"971","endLine":239,"endColumn":29},{"ruleId":"979","severity":1,"message":"980","line":243,"column":57,"nodeType":"981","messageId":"982","endLine":243,"endColumn":59},{"ruleId":"988","severity":1,"message":"989","line":243,"column":80,"nodeType":"990","messageId":"991","endLine":243,"endColumn":124},{"ruleId":"979","severity":1,"message":"992","line":252,"column":26,"nodeType":"981","messageId":"982","endLine":252,"endColumn":28},{"ruleId":"979","severity":1,"message":"980","line":258,"column":49,"nodeType":"981","messageId":"982","endLine":258,"endColumn":51},{"ruleId":"988","severity":1,"message":"989","line":258,"column":66,"nodeType":"990","messageId":"991","endLine":258,"endColumn":106},{"ruleId":"979","severity":1,"message":"980","line":259,"column":72,"nodeType":"981","messageId":"982","endLine":259,"endColumn":74},{"ruleId":"988","severity":1,"message":"989","line":259,"column":93,"nodeType":"990","messageId":"991","endLine":259,"endColumn":138},{"ruleId":"979","severity":1,"message":"980","line":260,"column":82,"nodeType":"981","messageId":"982","endLine":260,"endColumn":84},{"ruleId":"988","severity":1,"message":"989","line":260,"column":99,"nodeType":"990","messageId":"991","endLine":260,"endColumn":148},{"ruleId":"979","severity":1,"message":"980","line":261,"column":82,"nodeType":"981","messageId":"982","endLine":261,"endColumn":84},{"ruleId":"988","severity":1,"message":"989","line":261,"column":103,"nodeType":"990","messageId":"991","endLine":261,"endColumn":152},{"ruleId":"979","severity":1,"message":"992","line":27,"column":25,"nodeType":"981","messageId":"982","endLine":27,"endColumn":27},{"ruleId":"979","severity":1,"message":"992","line":18,"column":18,"nodeType":"981","messageId":"982","endLine":18,"endColumn":20},{"ruleId":"979","severity":1,"message":"980","line":48,"column":28,"nodeType":"981","messageId":"982","endLine":48,"endColumn":30},{"ruleId":"979","severity":1,"message":"980","line":98,"column":28,"nodeType":"981","messageId":"982","endLine":98,"endColumn":30},{"ruleId":"979","severity":1,"message":"980","line":185,"column":74,"nodeType":"981","messageId":"982","endLine":185,"endColumn":76},{"ruleId":"1017","severity":1,"message":"1018","line":186,"column":21,"nodeType":"1019","messageId":"1020","endLine":189,"endColumn":10},{"ruleId":"979","severity":1,"message":"992","line":20,"column":26,"nodeType":"981","messageId":"982","endLine":20,"endColumn":28},{"ruleId":"979","severity":1,"message":"992","line":52,"column":26,"nodeType":"981","messageId":"982","endLine":52,"endColumn":28},{"ruleId":"979","severity":1,"message":"992","line":20,"column":28,"nodeType":"981","messageId":"982","endLine":20,"endColumn":30},{"ruleId":"979","severity":1,"message":"992","line":16,"column":37,"nodeType":"981","messageId":"982","endLine":16,"endColumn":39},{"ruleId":"1017","severity":1,"message":"1021","line":35,"column":102,"nodeType":"1019","messageId":"1020","endLine":35,"endColumn":161},{"ruleId":"979","severity":1,"message":"992","line":37,"column":124,"nodeType":"981","messageId":"982","endLine":37,"endColumn":126},{"ruleId":"979","severity":1,"message":"992","line":37,"column":145,"nodeType":"981","messageId":"982","endLine":37,"endColumn":147},{"ruleId":"979","severity":1,"message":"992","line":70,"column":145,"nodeType":"981","messageId":"982","endLine":70,"endColumn":147},{"ruleId":"979","severity":1,"message":"992","line":20,"column":32,"nodeType":"981","messageId":"982","endLine":20,"endColumn":34},{"ruleId":"968","severity":1,"message":"1001","line":1,"column":17,"nodeType":"970","messageId":"971","endLine":1,"endColumn":26},{"ruleId":"979","severity":1,"message":"992","line":20,"column":27,"nodeType":"981","messageId":"982","endLine":20,"endColumn":29},{"ruleId":"979","severity":1,"message":"992","line":16,"column":37,"nodeType":"981","messageId":"982","endLine":16,"endColumn":39},{"ruleId":"1017","severity":1,"message":"1022","line":35,"column":102,"nodeType":"1019","messageId":"1020","endLine":35,"endColumn":161},{"ruleId":"979","severity":1,"message":"992","line":37,"column":124,"nodeType":"981","messageId":"982","endLine":37,"endColumn":126},{"ruleId":"979","severity":1,"message":"992","line":37,"column":145,"nodeType":"981","messageId":"982","endLine":37,"endColumn":147},{"ruleId":"979","severity":1,"message":"992","line":68,"column":145,"nodeType":"981","messageId":"982","endLine":68,"endColumn":147},{"ruleId":"979","severity":1,"message":"992","line":15,"column":41,"nodeType":"981","messageId":"982","endLine":15,"endColumn":43},{"ruleId":"979","severity":1,"message":"992","line":48,"column":152,"nodeType":"981","messageId":"982","endLine":48,"endColumn":154},{"ruleId":"979","severity":1,"message":"992","line":49,"column":155,"nodeType":"981","messageId":"982","endLine":49,"endColumn":157},{"ruleId":"979","severity":1,"message":"992","line":50,"column":153,"nodeType":"981","messageId":"982","endLine":50,"endColumn":155},{"ruleId":"979","severity":1,"message":"992","line":51,"column":154,"nodeType":"981","messageId":"982","endLine":51,"endColumn":156},{"ruleId":"979","severity":1,"message":"992","line":59,"column":22,"nodeType":"981","messageId":"982","endLine":59,"endColumn":24},{"ruleId":"979","severity":1,"message":"980","line":68,"column":56,"nodeType":"981","messageId":"982","endLine":68,"endColumn":58},{"ruleId":"979","severity":1,"message":"992","line":69,"column":38,"nodeType":"981","messageId":"982","endLine":69,"endColumn":40},{"ruleId":"979","severity":1,"message":"980","line":70,"column":51,"nodeType":"981","messageId":"982","endLine":70,"endColumn":53},{"ruleId":"979","severity":1,"message":"992","line":72,"column":27,"nodeType":"981","messageId":"982","endLine":72,"endColumn":29},{"ruleId":"979","severity":1,"message":"992","line":83,"column":31,"nodeType":"981","messageId":"982","endLine":83,"endColumn":33},{"ruleId":"979","severity":1,"message":"980","line":87,"column":24,"nodeType":"981","messageId":"982","endLine":87,"endColumn":26},{"ruleId":"1023","severity":1,"message":"1024","line":106,"column":13,"nodeType":"1025","messageId":"1026","endLine":106,"endColumn":28},{"ruleId":"979","severity":1,"message":"992","line":15,"column":36,"nodeType":"981","messageId":"982","endLine":15,"endColumn":38},{"ruleId":"979","severity":1,"message":"992","line":77,"column":33,"nodeType":"981","messageId":"982","endLine":77,"endColumn":35},{"ruleId":"979","severity":1,"message":"992","line":15,"column":36,"nodeType":"981","messageId":"982","endLine":15,"endColumn":38},{"ruleId":"979","severity":1,"message":"992","line":65,"column":31,"nodeType":"981","messageId":"982","endLine":65,"endColumn":33},{"ruleId":"979","severity":1,"message":"992","line":8,"column":25,"nodeType":"981","messageId":"982","endLine":8,"endColumn":27},{"ruleId":"979","severity":1,"message":"980","line":9,"column":33,"nodeType":"981","messageId":"982","endLine":9,"endColumn":35},{"ruleId":"988","severity":1,"message":"989","line":9,"column":50,"nodeType":"990","messageId":"991","endLine":9,"endColumn":167},{"ruleId":"979","severity":1,"message":"992","line":10,"column":32,"nodeType":"981","messageId":"982","endLine":10,"endColumn":34},{"ruleId":"979","severity":1,"message":"980","line":11,"column":46,"nodeType":"981","messageId":"982","endLine":11,"endColumn":48},{"ruleId":"988","severity":1,"message":"989","line":11,"column":70,"nodeType":"990","messageId":"991","endLine":11,"endColumn":187},{"ruleId":"979","severity":1,"message":"992","line":12,"column":32,"nodeType":"981","messageId":"982","endLine":12,"endColumn":34},{"ruleId":"979","severity":1,"message":"980","line":13,"column":35,"nodeType":"981","messageId":"982","endLine":13,"endColumn":37},{"ruleId":"988","severity":1,"message":"989","line":13,"column":52,"nodeType":"990","messageId":"991","endLine":13,"endColumn":169},{"ruleId":"979","severity":1,"message":"992","line":14,"column":32,"nodeType":"981","messageId":"982","endLine":14,"endColumn":34},{"ruleId":"979","severity":1,"message":"980","line":15,"column":48,"nodeType":"981","messageId":"982","endLine":15,"endColumn":50},{"ruleId":"988","severity":1,"message":"989","line":15,"column":65,"nodeType":"990","messageId":"991","endLine":15,"endColumn":185},{"ruleId":"979","severity":1,"message":"992","line":16,"column":32,"nodeType":"981","messageId":"982","endLine":16,"endColumn":34},{"ruleId":"979","severity":1,"message":"980","line":17,"column":42,"nodeType":"981","messageId":"982","endLine":17,"endColumn":44},{"ruleId":"988","severity":1,"message":"989","line":17,"column":59,"nodeType":"990","messageId":"991","endLine":17,"endColumn":179},{"ruleId":"979","severity":1,"message":"992","line":18,"column":32,"nodeType":"981","messageId":"982","endLine":18,"endColumn":34},{"ruleId":"979","severity":1,"message":"980","line":19,"column":39,"nodeType":"981","messageId":"982","endLine":19,"endColumn":41},{"ruleId":"988","severity":1,"message":"989","line":19,"column":56,"nodeType":"990","messageId":"991","endLine":19,"endColumn":176},{"ruleId":"979","severity":1,"message":"992","line":20,"column":32,"nodeType":"981","messageId":"982","endLine":20,"endColumn":34},{"ruleId":"979","severity":1,"message":"980","line":21,"column":47,"nodeType":"981","messageId":"982","endLine":21,"endColumn":49},{"ruleId":"988","severity":1,"message":"989","line":21,"column":64,"nodeType":"990","messageId":"991","endLine":21,"endColumn":184},{"ruleId":"979","severity":1,"message":"980","line":23,"column":46,"nodeType":"981","messageId":"982","endLine":23,"endColumn":48},{"ruleId":"988","severity":1,"message":"989","line":23,"column":63,"nodeType":"990","messageId":"991","endLine":23,"endColumn":180},{"ruleId":"979","severity":1,"message":"980","line":30,"column":26,"nodeType":"981","messageId":"982","endLine":30,"endColumn":28},{"ruleId":"988","severity":1,"message":"989","line":30,"column":61,"nodeType":"990","messageId":"991","endLine":30,"endColumn":198},{"ruleId":"1027","severity":1,"message":"1028","line":35,"column":21,"nodeType":"1029","messageId":"1030","endLine":35,"endColumn":22,"suggestions":"1031"},{"ruleId":"1027","severity":1,"message":"1028","line":35,"column":43,"nodeType":"1029","messageId":"1030","endLine":35,"endColumn":44,"suggestions":"1032"},{"ruleId":"979","severity":1,"message":"992","line":44,"column":22,"nodeType":"981","messageId":"982","endLine":44,"endColumn":24},{"ruleId":"979","severity":1,"message":"980","line":49,"column":29,"nodeType":"981","messageId":"982","endLine":49,"endColumn":31},{"ruleId":"979","severity":1,"message":"980","line":49,"column":62,"nodeType":"981","messageId":"982","endLine":49,"endColumn":64},{"ruleId":"988","severity":1,"message":"989","line":53,"column":16,"nodeType":"990","messageId":"991","endLine":53,"endColumn":135},{"ruleId":"979","severity":1,"message":"980","line":67,"column":18,"nodeType":"981","messageId":"982","endLine":67,"endColumn":20},{"ruleId":"979","severity":1,"message":"980","line":67,"column":60,"nodeType":"981","messageId":"982","endLine":67,"endColumn":62},{"ruleId":"988","severity":1,"message":"989","line":67,"column":68,"nodeType":"990","messageId":"991","endLine":67,"endColumn":239},{"ruleId":"979","severity":1,"message":"992","line":68,"column":18,"nodeType":"981","messageId":"982","endLine":68,"endColumn":20},{"ruleId":"979","severity":1,"message":"980","line":69,"column":21,"nodeType":"981","messageId":"982","endLine":69,"endColumn":23},{"ruleId":"988","severity":1,"message":"989","line":69,"column":35,"nodeType":"990","messageId":"991","endLine":69,"endColumn":115},{"ruleId":"979","severity":1,"message":"980","line":70,"column":30,"nodeType":"981","messageId":"982","endLine":70,"endColumn":32},{"ruleId":"979","severity":1,"message":"980","line":71,"column":97,"nodeType":"981","messageId":"982","endLine":71,"endColumn":99},{"ruleId":"988","severity":1,"message":"989","line":71,"column":111,"nodeType":"990","messageId":"991","endLine":71,"endColumn":251},{"ruleId":"979","severity":1,"message":"980","line":74,"column":34,"nodeType":"981","messageId":"982","endLine":74,"endColumn":36},{"ruleId":"988","severity":1,"message":"989","line":74,"column":54,"nodeType":"990","messageId":"991","endLine":74,"endColumn":136},{"ruleId":"979","severity":1,"message":"980","line":76,"column":31,"nodeType":"981","messageId":"982","endLine":76,"endColumn":33},{"ruleId":"988","severity":1,"message":"989","line":76,"column":51,"nodeType":"990","messageId":"991","endLine":76,"endColumn":140},{"ruleId":"979","severity":1,"message":"980","line":84,"column":43,"nodeType":"981","messageId":"982","endLine":84,"endColumn":45},{"ruleId":"988","severity":1,"message":"989","line":84,"column":49,"nodeType":"990","messageId":"991","endLine":84,"endColumn":114},{"ruleId":"979","severity":1,"message":"980","line":85,"column":44,"nodeType":"981","messageId":"982","endLine":85,"endColumn":46},{"ruleId":"988","severity":1,"message":"989","line":85,"column":50,"nodeType":"990","messageId":"991","endLine":85,"endColumn":131},{"ruleId":"988","severity":1,"message":"989","line":86,"column":54,"nodeType":"990","messageId":"991","endLine":86,"endColumn":146},{"ruleId":"979","severity":1,"message":"992","line":88,"column":28,"nodeType":"981","messageId":"982","endLine":88,"endColumn":30},{"ruleId":"988","severity":1,"message":"989","line":88,"column":42,"nodeType":"990","messageId":"991","endLine":88,"endColumn":132},{"ruleId":"979","severity":1,"message":"980","line":92,"column":41,"nodeType":"981","messageId":"982","endLine":92,"endColumn":43},{"ruleId":"988","severity":1,"message":"989","line":92,"column":51,"nodeType":"990","messageId":"991","endLine":92,"endColumn":134},{"ruleId":"979","severity":1,"message":"980","line":94,"column":51,"nodeType":"981","messageId":"982","endLine":94,"endColumn":53},{"ruleId":"988","severity":1,"message":"989","line":94,"column":57,"nodeType":"990","messageId":"991","endLine":94,"endColumn":144},{"ruleId":"979","severity":1,"message":"980","line":95,"column":60,"nodeType":"981","messageId":"982","endLine":95,"endColumn":62},{"ruleId":"988","severity":1,"message":"989","line":95,"column":70,"nodeType":"990","messageId":"991","endLine":95,"endColumn":149},{"ruleId":"979","severity":1,"message":"980","line":118,"column":27,"nodeType":"981","messageId":"982","endLine":118,"endColumn":29},{"ruleId":"988","severity":1,"message":"989","line":118,"column":56,"nodeType":"990","messageId":"991","endLine":118,"endColumn":140},{"ruleId":"979","severity":1,"message":"980","line":120,"column":36,"nodeType":"981","messageId":"982","endLine":120,"endColumn":38},{"ruleId":"988","severity":1,"message":"989","line":120,"column":44,"nodeType":"990","messageId":"991","endLine":120,"endColumn":129},{"ruleId":"979","severity":1,"message":"980","line":125,"column":18,"nodeType":"981","messageId":"982","endLine":125,"endColumn":20},{"ruleId":"988","severity":1,"message":"989","line":125,"column":38,"nodeType":"990","messageId":"991","endLine":125,"endColumn":125},{"ruleId":"979","severity":1,"message":"980","line":129,"column":45,"nodeType":"981","messageId":"982","endLine":129,"endColumn":47},{"ruleId":"988","severity":1,"message":"989","line":129,"column":66,"nodeType":"990","messageId":"991","endLine":129,"endColumn":146},{"ruleId":"979","severity":1,"message":"980","line":27,"column":27,"nodeType":"981","messageId":"982","endLine":27,"endColumn":29},{"ruleId":"979","severity":1,"message":"980","line":31,"column":27,"nodeType":"981","messageId":"982","endLine":31,"endColumn":29},{"ruleId":"979","severity":1,"message":"980","line":46,"column":27,"nodeType":"981","messageId":"982","endLine":46,"endColumn":29},{"ruleId":"979","severity":1,"message":"980","line":50,"column":27,"nodeType":"981","messageId":"982","endLine":50,"endColumn":29},{"ruleId":"979","severity":1,"message":"992","line":76,"column":38,"nodeType":"981","messageId":"982","endLine":76,"endColumn":40},{"ruleId":"979","severity":1,"message":"992","line":91,"column":43,"nodeType":"981","messageId":"982","endLine":91,"endColumn":45},{"ruleId":"979","severity":1,"message":"992","line":112,"column":38,"nodeType":"981","messageId":"982","endLine":112,"endColumn":40},{"ruleId":"988","severity":1,"message":"989","line":122,"column":113,"nodeType":"990","messageId":"991","endLine":122,"endColumn":170},{"ruleId":"988","severity":1,"message":"989","line":123,"column":186,"nodeType":"990","messageId":"991","endLine":123,"endColumn":250},{"ruleId":"988","severity":1,"message":"989","line":144,"column":42,"nodeType":"990","messageId":"991","endLine":144,"endColumn":92},{"ruleId":"979","severity":1,"message":"992","line":145,"column":26,"nodeType":"981","messageId":"982","endLine":145,"endColumn":28},{"ruleId":"988","severity":1,"message":"989","line":145,"column":32,"nodeType":"990","messageId":"991","endLine":145,"endColumn":75},{"ruleId":"988","severity":1,"message":"989","line":146,"column":39,"nodeType":"990","messageId":"991","endLine":146,"endColumn":107},{"ruleId":"988","severity":1,"message":"989","line":147,"column":45,"nodeType":"990","messageId":"991","endLine":147,"endColumn":114},{"ruleId":"979","severity":1,"message":"992","line":149,"column":25,"nodeType":"981","messageId":"982","endLine":149,"endColumn":27},{"ruleId":"988","severity":1,"message":"989","line":149,"column":31,"nodeType":"990","messageId":"991","endLine":149,"endColumn":91},{"ruleId":"979","severity":1,"message":"980","line":150,"column":21,"nodeType":"981","messageId":"982","endLine":150,"endColumn":23},{"ruleId":"979","severity":1,"message":"980","line":150,"column":47,"nodeType":"981","messageId":"982","endLine":150,"endColumn":49},{"ruleId":"988","severity":1,"message":"989","line":150,"column":59,"nodeType":"990","messageId":"991","endLine":150,"endColumn":131},{"ruleId":"988","severity":1,"message":"989","line":155,"column":41,"nodeType":"990","messageId":"991","endLine":155,"endColumn":102},{"ruleId":"979","severity":1,"message":"992","line":158,"column":34,"nodeType":"981","messageId":"982","endLine":158,"endColumn":36},{"ruleId":"988","severity":1,"message":"989","line":158,"column":40,"nodeType":"990","messageId":"991","endLine":158,"endColumn":111},{"ruleId":"979","severity":1,"message":"992","line":159,"column":52,"nodeType":"981","messageId":"982","endLine":159,"endColumn":54},{"ruleId":"1033","severity":1,"message":"1034","line":160,"column":9,"nodeType":"981","messageId":"982","endLine":160,"endColumn":17,"suggestions":"1035"},{"ruleId":"988","severity":1,"message":"989","line":160,"column":38,"nodeType":"990","messageId":"991","endLine":160,"endColumn":90},{"ruleId":"979","severity":1,"message":"992","line":166,"column":19,"nodeType":"981","messageId":"982","endLine":166,"endColumn":21},{"ruleId":"979","severity":1,"message":"992","line":178,"column":19,"nodeType":"981","messageId":"982","endLine":178,"endColumn":21},{"ruleId":"979","severity":1,"message":"992","line":186,"column":23,"nodeType":"981","messageId":"982","endLine":186,"endColumn":25},{"ruleId":"988","severity":1,"message":"989","line":188,"column":72,"nodeType":"990","messageId":"991","endLine":188,"endColumn":154},{"ruleId":"979","severity":1,"message":"980","line":192,"column":41,"nodeType":"981","messageId":"982","endLine":192,"endColumn":43},{"ruleId":"979","severity":1,"message":"980","line":192,"column":68,"nodeType":"981","messageId":"982","endLine":192,"endColumn":70},{"ruleId":"988","severity":1,"message":"989","line":192,"column":74,"nodeType":"990","messageId":"991","endLine":192,"endColumn":135},{"ruleId":"979","severity":1,"message":"992","line":193,"column":30,"nodeType":"981","messageId":"982","endLine":193,"endColumn":32},{"ruleId":"988","severity":1,"message":"989","line":194,"column":100,"nodeType":"990","messageId":"991","endLine":194,"endColumn":148},{"ruleId":"979","severity":1,"message":"980","line":195,"column":61,"nodeType":"981","messageId":"982","endLine":195,"endColumn":63},{"ruleId":"988","severity":1,"message":"989","line":195,"column":92,"nodeType":"990","messageId":"991","endLine":195,"endColumn":139},{"ruleId":"988","severity":1,"message":"989","line":197,"column":100,"nodeType":"990","messageId":"991","endLine":197,"endColumn":148},{"ruleId":"979","severity":1,"message":"980","line":198,"column":61,"nodeType":"981","messageId":"982","endLine":198,"endColumn":63},{"ruleId":"988","severity":1,"message":"989","line":198,"column":92,"nodeType":"990","messageId":"991","endLine":198,"endColumn":139},{"ruleId":"979","severity":1,"message":"980","line":199,"column":34,"nodeType":"981","messageId":"982","endLine":199,"endColumn":36},{"ruleId":"988","severity":1,"message":"989","line":199,"column":52,"nodeType":"990","messageId":"991","endLine":199,"endColumn":91},{"ruleId":"979","severity":1,"message":"980","line":201,"column":38,"nodeType":"981","messageId":"982","endLine":201,"endColumn":40},{"ruleId":"988","severity":1,"message":"989","line":201,"column":60,"nodeType":"990","messageId":"991","endLine":201,"endColumn":99},{"ruleId":"979","severity":1,"message":"980","line":202,"column":38,"nodeType":"981","messageId":"982","endLine":202,"endColumn":40},{"ruleId":"988","severity":1,"message":"989","line":202,"column":60,"nodeType":"990","messageId":"991","endLine":202,"endColumn":99},{"ruleId":"979","severity":1,"message":"980","line":203,"column":34,"nodeType":"981","messageId":"982","endLine":203,"endColumn":36},{"ruleId":"988","severity":1,"message":"989","line":203,"column":52,"nodeType":"990","messageId":"991","endLine":203,"endColumn":91},{"ruleId":"988","severity":1,"message":"989","line":205,"column":114,"nodeType":"990","messageId":"991","endLine":205,"endColumn":167},{"ruleId":"979","severity":1,"message":"980","line":206,"column":70,"nodeType":"981","messageId":"982","endLine":206,"endColumn":72},{"ruleId":"988","severity":1,"message":"989","line":206,"column":106,"nodeType":"990","messageId":"991","endLine":206,"endColumn":158},{"ruleId":"988","severity":1,"message":"989","line":208,"column":65,"nodeType":"990","messageId":"991","endLine":208,"endColumn":113},{"ruleId":"979","severity":1,"message":"980","line":209,"column":65,"nodeType":"981","messageId":"982","endLine":209,"endColumn":67},{"ruleId":"988","severity":1,"message":"989","line":209,"column":96,"nodeType":"990","messageId":"991","endLine":209,"endColumn":143},{"ruleId":"988","severity":1,"message":"989","line":215,"column":72,"nodeType":"990","messageId":"991","endLine":215,"endColumn":154},{"ruleId":"979","severity":1,"message":"980","line":219,"column":41,"nodeType":"981","messageId":"982","endLine":219,"endColumn":43},{"ruleId":"979","severity":1,"message":"980","line":219,"column":68,"nodeType":"981","messageId":"982","endLine":219,"endColumn":70},{"ruleId":"988","severity":1,"message":"989","line":219,"column":74,"nodeType":"990","messageId":"991","endLine":219,"endColumn":135},{"ruleId":"988","severity":1,"message":"989","line":220,"column":98,"nodeType":"990","messageId":"991","endLine":220,"endColumn":147},{"ruleId":"979","severity":1,"message":"980","line":221,"column":58,"nodeType":"981","messageId":"982","endLine":221,"endColumn":60},{"ruleId":"988","severity":1,"message":"989","line":221,"column":90,"nodeType":"990","messageId":"991","endLine":221,"endColumn":138},{"ruleId":"979","severity":1,"message":"980","line":223,"column":34,"nodeType":"981","messageId":"982","endLine":223,"endColumn":36},{"ruleId":"988","severity":1,"message":"989","line":223,"column":52,"nodeType":"990","messageId":"991","endLine":223,"endColumn":91},{"ruleId":"979","severity":1,"message":"980","line":225,"column":38,"nodeType":"981","messageId":"982","endLine":225,"endColumn":40},{"ruleId":"988","severity":1,"message":"989","line":225,"column":60,"nodeType":"990","messageId":"991","endLine":225,"endColumn":99},{"ruleId":"979","severity":1,"message":"980","line":226,"column":38,"nodeType":"981","messageId":"982","endLine":226,"endColumn":40},{"ruleId":"988","severity":1,"message":"989","line":226,"column":60,"nodeType":"990","messageId":"991","endLine":226,"endColumn":99},{"ruleId":"979","severity":1,"message":"980","line":227,"column":34,"nodeType":"981","messageId":"982","endLine":227,"endColumn":36},{"ruleId":"988","severity":1,"message":"989","line":227,"column":52,"nodeType":"990","messageId":"991","endLine":227,"endColumn":91},{"ruleId":"988","severity":1,"message":"989","line":233,"column":9,"nodeType":"990","messageId":"991","endLine":233,"endColumn":50},{"ruleId":"979","severity":1,"message":"980","line":239,"column":42,"nodeType":"981","messageId":"982","endLine":239,"endColumn":44},{"ruleId":"988","severity":1,"message":"989","line":239,"column":78,"nodeType":"990","messageId":"991","endLine":239,"endColumn":126},{"ruleId":"988","severity":1,"message":"989","line":242,"column":101,"nodeType":"990","messageId":"991","endLine":242,"endColumn":129},{"ruleId":"979","severity":1,"message":"980","line":244,"column":42,"nodeType":"981","messageId":"982","endLine":244,"endColumn":44},{"ruleId":"988","severity":1,"message":"989","line":244,"column":80,"nodeType":"990","messageId":"991","endLine":244,"endColumn":146},{"ruleId":"988","severity":1,"message":"989","line":247,"column":67,"nodeType":"990","messageId":"991","endLine":247,"endColumn":132},{"ruleId":"979","severity":1,"message":"980","line":249,"column":85,"nodeType":"981","messageId":"982","endLine":249,"endColumn":87},{"ruleId":"988","severity":1,"message":"989","line":249,"column":113,"nodeType":"990","messageId":"991","endLine":249,"endColumn":167},{"ruleId":"979","severity":1,"message":"980","line":250,"column":70,"nodeType":"981","messageId":"982","endLine":250,"endColumn":72},{"ruleId":"979","severity":1,"message":"980","line":251,"column":39,"nodeType":"981","messageId":"982","endLine":251,"endColumn":41},{"ruleId":"979","severity":1,"message":"980","line":252,"column":35,"nodeType":"981","messageId":"982","endLine":252,"endColumn":37},{"ruleId":"988","severity":1,"message":"989","line":252,"column":64,"nodeType":"990","messageId":"991","endLine":252,"endColumn":134},{"ruleId":"979","severity":1,"message":"980","line":256,"column":51,"nodeType":"981","messageId":"982","endLine":256,"endColumn":53},{"ruleId":"988","severity":1,"message":"989","line":256,"column":57,"nodeType":"990","messageId":"991","endLine":256,"endColumn":105},{"ruleId":"979","severity":1,"message":"992","line":257,"column":27,"nodeType":"981","messageId":"982","endLine":257,"endColumn":29},{"ruleId":"988","severity":1,"message":"989","line":260,"column":74,"nodeType":"990","messageId":"991","endLine":260,"endColumn":144},{"ruleId":"979","severity":1,"message":"980","line":262,"column":68,"nodeType":"981","messageId":"982","endLine":262,"endColumn":70},{"ruleId":"988","severity":1,"message":"989","line":262,"column":82,"nodeType":"990","messageId":"991","endLine":262,"endColumn":135},{"ruleId":"988","severity":1,"message":"989","line":265,"column":77,"nodeType":"990","messageId":"991","endLine":265,"endColumn":147},{"ruleId":"979","severity":1,"message":"980","line":267,"column":73,"nodeType":"981","messageId":"982","endLine":267,"endColumn":75},{"ruleId":"988","severity":1,"message":"989","line":267,"column":88,"nodeType":"990","messageId":"991","endLine":267,"endColumn":138},{"ruleId":"988","severity":1,"message":"989","line":268,"column":24,"nodeType":"990","messageId":"991","endLine":268,"endColumn":108},{"ruleId":"1011","severity":1,"message":"1012","line":269,"column":24,"nodeType":"1013","messageId":"1014","endLine":269,"endColumn":43},{"ruleId":"988","severity":1,"message":"989","line":272,"column":74,"nodeType":"990","messageId":"991","endLine":272,"endColumn":142},{"ruleId":"979","severity":1,"message":"980","line":274,"column":69,"nodeType":"981","messageId":"982","endLine":274,"endColumn":71},{"ruleId":"988","severity":1,"message":"989","line":274,"column":83,"nodeType":"990","messageId":"991","endLine":274,"endColumn":137},{"ruleId":"988","severity":1,"message":"989","line":275,"column":24,"nodeType":"990","messageId":"991","endLine":275,"endColumn":95},{"ruleId":"988","severity":1,"message":"989","line":280,"column":9,"nodeType":"990","messageId":"991","endLine":280,"endColumn":58},{"ruleId":"968","severity":1,"message":"1036","line":5,"column":10,"nodeType":"970","messageId":"971","endLine":5,"endColumn":21},{"ruleId":"979","severity":1,"message":"992","line":13,"column":36,"nodeType":"981","messageId":"982","endLine":13,"endColumn":38},{"ruleId":"979","severity":1,"message":"980","line":21,"column":39,"nodeType":"981","messageId":"982","endLine":21,"endColumn":41},{"ruleId":"979","severity":1,"message":"980","line":21,"column":68,"nodeType":"981","messageId":"982","endLine":21,"endColumn":70},{"ruleId":"988","severity":1,"message":"989","line":21,"column":77,"nodeType":"990","messageId":"991","endLine":21,"endColumn":170},{"ruleId":"979","severity":1,"message":"980","line":23,"column":84,"nodeType":"981","messageId":"982","endLine":23,"endColumn":86},{"ruleId":"988","severity":1,"message":"989","line":23,"column":93,"nodeType":"990","messageId":"991","endLine":23,"endColumn":141},{"ruleId":"979","severity":1,"message":"980","line":32,"column":68,"nodeType":"981","messageId":"982","endLine":32,"endColumn":70},{"ruleId":"988","severity":1,"message":"989","line":32,"column":90,"nodeType":"990","messageId":"991","endLine":32,"endColumn":202},{"ruleId":"979","severity":1,"message":"980","line":37,"column":78,"nodeType":"981","messageId":"982","endLine":37,"endColumn":80},{"ruleId":"988","severity":1,"message":"989","line":37,"column":111,"nodeType":"990","messageId":"991","endLine":37,"endColumn":194},{"ruleId":"979","severity":1,"message":"980","line":40,"column":77,"nodeType":"981","messageId":"982","endLine":40,"endColumn":79},{"ruleId":"988","severity":1,"message":"989","line":40,"column":110,"nodeType":"990","messageId":"991","endLine":40,"endColumn":192},{"ruleId":"979","severity":1,"message":"980","line":43,"column":82,"nodeType":"981","messageId":"982","endLine":43,"endColumn":84},{"ruleId":"988","severity":1,"message":"989","line":43,"column":115,"nodeType":"990","messageId":"991","endLine":43,"endColumn":202},{"ruleId":"979","severity":1,"message":"980","line":21,"column":22,"nodeType":"981","messageId":"982","endLine":21,"endColumn":24},{"ruleId":"979","severity":1,"message":"980","line":31,"column":22,"nodeType":"981","messageId":"982","endLine":31,"endColumn":24},{"ruleId":"979","severity":1,"message":"992","line":9,"column":22,"nodeType":"981","messageId":"982","endLine":9,"endColumn":24},{"ruleId":"979","severity":1,"message":"992","line":10,"column":27,"nodeType":"981","messageId":"982","endLine":10,"endColumn":29},{"ruleId":"979","severity":1,"message":"980","line":24,"column":85,"nodeType":"981","messageId":"982","endLine":24,"endColumn":87},{"ruleId":"979","severity":1,"message":"992","line":27,"column":85,"nodeType":"981","messageId":"982","endLine":27,"endColumn":87},{"ruleId":"979","severity":1,"message":"992","line":28,"column":85,"nodeType":"981","messageId":"982","endLine":28,"endColumn":87},{"ruleId":"979","severity":1,"message":"980","line":29,"column":87,"nodeType":"981","messageId":"982","endLine":29,"endColumn":89},{"ruleId":"979","severity":1,"message":"992","line":35,"column":85,"nodeType":"981","messageId":"982","endLine":35,"endColumn":87},{"ruleId":"979","severity":1,"message":"992","line":36,"column":85,"nodeType":"981","messageId":"982","endLine":36,"endColumn":87},{"ruleId":"979","severity":1,"message":"980","line":37,"column":87,"nodeType":"981","messageId":"982","endLine":37,"endColumn":89},{"ruleId":"979","severity":1,"message":"992","line":100,"column":32,"nodeType":"981","messageId":"982","endLine":100,"endColumn":34},{"ruleId":"979","severity":1,"message":"992","line":111,"column":26,"nodeType":"981","messageId":"982","endLine":111,"endColumn":28},{"ruleId":"968","severity":1,"message":"1016","line":122,"column":25,"nodeType":"970","messageId":"971","endLine":122,"endColumn":29},{"ruleId":"979","severity":1,"message":"992","line":134,"column":26,"nodeType":"981","messageId":"982","endLine":134,"endColumn":28},{"ruleId":"979","severity":1,"message":"980","line":12,"column":22,"nodeType":"981","messageId":"982","endLine":12,"endColumn":24},{"ruleId":"979","severity":1,"message":"980","line":22,"column":22,"nodeType":"981","messageId":"982","endLine":22,"endColumn":24},{"ruleId":"1007","severity":1,"message":"1008","line":34,"column":13,"nodeType":"1009","messageId":"1010","endLine":59,"endColumn":14},{"ruleId":"979","severity":1,"message":"992","line":36,"column":44,"nodeType":"981","messageId":"982","endLine":36,"endColumn":46},{"ruleId":"979","severity":1,"message":"992","line":55,"column":39,"nodeType":"981","messageId":"982","endLine":55,"endColumn":41},{"ruleId":"979","severity":1,"message":"992","line":80,"column":44,"nodeType":"981","messageId":"982","endLine":80,"endColumn":46},{"ruleId":"979","severity":1,"message":"992","line":107,"column":39,"nodeType":"981","messageId":"982","endLine":107,"endColumn":41},{"ruleId":"988","severity":1,"message":"989","line":140,"column":51,"nodeType":"990","messageId":"991","endLine":140,"endColumn":159},{"ruleId":"988","severity":1,"message":"989","line":143,"column":50,"nodeType":"990","messageId":"991","endLine":143,"endColumn":158},{"ruleId":"979","severity":1,"message":"980","line":160,"column":44,"nodeType":"981","messageId":"982","endLine":160,"endColumn":46},{"ruleId":"988","severity":1,"message":"989","line":160,"column":55,"nodeType":"990","messageId":"991","endLine":160,"endColumn":153},{"ruleId":"979","severity":1,"message":"980","line":169,"column":44,"nodeType":"981","messageId":"982","endLine":169,"endColumn":46},{"ruleId":"988","severity":1,"message":"989","line":169,"column":77,"nodeType":"990","messageId":"991","endLine":169,"endColumn":179},{"ruleId":"1007","severity":1,"message":"1008","line":31,"column":13,"nodeType":"1009","messageId":"1010","endLine":64,"endColumn":14},{"ruleId":"979","severity":1,"message":"992","line":33,"column":38,"nodeType":"981","messageId":"982","endLine":33,"endColumn":40},{"ruleId":"979","severity":1,"message":"980","line":44,"column":58,"nodeType":"981","messageId":"982","endLine":44,"endColumn":60},{"ruleId":"979","severity":1,"message":"992","line":60,"column":39,"nodeType":"981","messageId":"982","endLine":60,"endColumn":41},{"ruleId":"1007","severity":1,"message":"1008","line":32,"column":13,"nodeType":"1009","messageId":"1010","endLine":64,"endColumn":14},{"ruleId":"979","severity":1,"message":"992","line":34,"column":38,"nodeType":"981","messageId":"982","endLine":34,"endColumn":40},{"ruleId":"979","severity":1,"message":"992","line":41,"column":68,"nodeType":"981","messageId":"982","endLine":41,"endColumn":70},{"ruleId":"1023","severity":1,"message":"1037","line":44,"column":17,"nodeType":"1025","messageId":"1038","endLine":48,"endColumn":27},{"ruleId":"979","severity":1,"message":"992","line":60,"column":39,"nodeType":"981","messageId":"982","endLine":60,"endColumn":41},{"ruleId":"1007","severity":1,"message":"1008","line":32,"column":13,"nodeType":"1009","messageId":"1010","endLine":65,"endColumn":14},{"ruleId":"979","severity":1,"message":"992","line":34,"column":38,"nodeType":"981","messageId":"982","endLine":34,"endColumn":40},{"ruleId":"979","severity":1,"message":"992","line":41,"column":69,"nodeType":"981","messageId":"982","endLine":41,"endColumn":71},{"ruleId":"1023","severity":1,"message":"1037","line":44,"column":17,"nodeType":"1025","messageId":"1038","endLine":48,"endColumn":27},{"ruleId":"979","severity":1,"message":"992","line":61,"column":39,"nodeType":"981","messageId":"982","endLine":61,"endColumn":41},{"ruleId":"1039","severity":1,"message":"1040","line":67,"column":217,"nodeType":"981","messageId":"1041","endLine":67,"endColumn":218},{"ruleId":"1007","severity":1,"message":"1008","line":28,"column":13,"nodeType":"1009","messageId":"1010","endLine":63,"endColumn":14},{"ruleId":"979","severity":1,"message":"992","line":30,"column":38,"nodeType":"981","messageId":"982","endLine":30,"endColumn":40},{"ruleId":"1023","severity":1,"message":"1037","line":41,"column":17,"nodeType":"1025","messageId":"1038","endLine":46,"endColumn":27},{"ruleId":"979","severity":1,"message":"992","line":59,"column":39,"nodeType":"981","messageId":"982","endLine":59,"endColumn":41},{"ruleId":"1007","severity":1,"message":"1008","line":28,"column":13,"nodeType":"1009","messageId":"1010","endLine":63,"endColumn":14},{"ruleId":"979","severity":1,"message":"992","line":30,"column":38,"nodeType":"981","messageId":"982","endLine":30,"endColumn":40},{"ruleId":"1023","severity":1,"message":"1037","line":41,"column":17,"nodeType":"1025","messageId":"1038","endLine":46,"endColumn":27},{"ruleId":"979","severity":1,"message":"992","line":59,"column":39,"nodeType":"981","messageId":"982","endLine":59,"endColumn":41},{"ruleId":"1007","severity":1,"message":"1008","line":29,"column":13,"nodeType":"1009","messageId":"1010","endLine":63,"endColumn":14},{"ruleId":"979","severity":1,"message":"992","line":31,"column":38,"nodeType":"981","messageId":"982","endLine":31,"endColumn":40},{"ruleId":"1023","severity":1,"message":"1037","line":42,"column":17,"nodeType":"1025","messageId":"1038","endLine":47,"endColumn":27},{"ruleId":"979","severity":1,"message":"992","line":59,"column":39,"nodeType":"981","messageId":"982","endLine":59,"endColumn":41},{"ruleId":"1007","severity":1,"message":"1008","line":28,"column":13,"nodeType":"1009","messageId":"1010","endLine":62,"endColumn":14},{"ruleId":"979","severity":1,"message":"992","line":30,"column":38,"nodeType":"981","messageId":"982","endLine":30,"endColumn":40},{"ruleId":"979","severity":1,"message":"980","line":38,"column":61,"nodeType":"981","messageId":"982","endLine":38,"endColumn":63},{"ruleId":"1023","severity":1,"message":"1037","line":41,"column":17,"nodeType":"1025","messageId":"1038","endLine":46,"endColumn":27},{"ruleId":"979","severity":1,"message":"992","line":58,"column":39,"nodeType":"981","messageId":"982","endLine":58,"endColumn":41},{"ruleId":"1007","severity":1,"message":"1008","line":29,"column":13,"nodeType":"1009","messageId":"1010","endLine":63,"endColumn":14},{"ruleId":"979","severity":1,"message":"992","line":31,"column":38,"nodeType":"981","messageId":"982","endLine":31,"endColumn":40},{"ruleId":"1023","severity":1,"message":"1037","line":42,"column":17,"nodeType":"1025","messageId":"1038","endLine":47,"endColumn":27},{"ruleId":"979","severity":1,"message":"992","line":59,"column":39,"nodeType":"981","messageId":"982","endLine":59,"endColumn":41},{"ruleId":"1007","severity":1,"message":"1008","line":28,"column":13,"nodeType":"1009","messageId":"1010","endLine":62,"endColumn":14},{"ruleId":"979","severity":1,"message":"992","line":30,"column":38,"nodeType":"981","messageId":"982","endLine":30,"endColumn":40},{"ruleId":"1023","severity":1,"message":"1037","line":41,"column":17,"nodeType":"1025","messageId":"1038","endLine":46,"endColumn":27},{"ruleId":"979","severity":1,"message":"992","line":58,"column":39,"nodeType":"981","messageId":"982","endLine":58,"endColumn":41},{"ruleId":"1007","severity":1,"message":"1008","line":29,"column":13,"nodeType":"1009","messageId":"1010","endLine":64,"endColumn":14},{"ruleId":"979","severity":1,"message":"992","line":31,"column":38,"nodeType":"981","messageId":"982","endLine":31,"endColumn":40},{"ruleId":"1023","severity":1,"message":"1037","line":42,"column":17,"nodeType":"1025","messageId":"1038","endLine":47,"endColumn":27},{"ruleId":"979","severity":1,"message":"992","line":60,"column":39,"nodeType":"981","messageId":"982","endLine":60,"endColumn":41},{"ruleId":"1007","severity":1,"message":"1008","line":32,"column":13,"nodeType":"1009","messageId":"1010","endLine":65,"endColumn":14},{"ruleId":"979","severity":1,"message":"992","line":34,"column":38,"nodeType":"981","messageId":"982","endLine":34,"endColumn":40},{"ruleId":"979","severity":1,"message":"992","line":41,"column":81,"nodeType":"981","messageId":"982","endLine":41,"endColumn":83},{"ruleId":"1023","severity":1,"message":"1037","line":44,"column":17,"nodeType":"1025","messageId":"1038","endLine":48,"endColumn":27},{"ruleId":"979","severity":1,"message":"992","line":61,"column":39,"nodeType":"981","messageId":"982","endLine":61,"endColumn":41},{"ruleId":"1039","severity":1,"message":"1040","line":67,"column":238,"nodeType":"981","messageId":"1041","endLine":67,"endColumn":239},{"ruleId":"979","severity":1,"message":"992","line":3,"column":66,"nodeType":"981","messageId":"982","endLine":3,"endColumn":68},{"ruleId":"979","severity":1,"message":"992","line":29,"column":44,"nodeType":"981","messageId":"982","endLine":29,"endColumn":46},{"ruleId":"979","severity":1,"message":"992","line":30,"column":48,"nodeType":"981","messageId":"982","endLine":30,"endColumn":50},{"ruleId":"979","severity":1,"message":"992","line":31,"column":46,"nodeType":"981","messageId":"982","endLine":31,"endColumn":48},{"ruleId":"979","severity":1,"message":"992","line":32,"column":56,"nodeType":"981","messageId":"982","endLine":32,"endColumn":58},{"ruleId":"979","severity":1,"message":"992","line":33,"column":42,"nodeType":"981","messageId":"982","endLine":33,"endColumn":44},{"ruleId":"979","severity":1,"message":"992","line":34,"column":55,"nodeType":"981","messageId":"982","endLine":34,"endColumn":57},{"ruleId":"979","severity":1,"message":"992","line":35,"column":47,"nodeType":"981","messageId":"982","endLine":35,"endColumn":49},{"ruleId":"979","severity":1,"message":"992","line":36,"column":56,"nodeType":"981","messageId":"982","endLine":36,"endColumn":58},{"ruleId":"979","severity":1,"message":"992","line":37,"column":62,"nodeType":"981","messageId":"982","endLine":37,"endColumn":64},{"ruleId":"979","severity":1,"message":"992","line":46,"column":31,"nodeType":"981","messageId":"982","endLine":46,"endColumn":33},{"ruleId":"979","severity":1,"message":"992","line":48,"column":30,"nodeType":"981","messageId":"982","endLine":48,"endColumn":32},{"ruleId":"979","severity":1,"message":"992","line":50,"column":35,"nodeType":"981","messageId":"982","endLine":50,"endColumn":37},{"ruleId":"988","severity":1,"message":"989","line":19,"column":13,"nodeType":"990","messageId":"991","endLine":19,"endColumn":43},{"ruleId":"988","severity":1,"message":"989","line":38,"column":13,"nodeType":"990","messageId":"991","endLine":38,"endColumn":43},{"ruleId":"979","severity":1,"message":"992","line":2,"column":57,"nodeType":"981","messageId":"982","endLine":2,"endColumn":59},{"ruleId":"979","severity":1,"message":"992","line":7,"column":58,"nodeType":"981","messageId":"982","endLine":7,"endColumn":60},{"ruleId":"979","severity":1,"message":"992","line":12,"column":58,"nodeType":"981","messageId":"982","endLine":12,"endColumn":60},{"ruleId":"979","severity":1,"message":"992","line":21,"column":103,"nodeType":"981","messageId":"982","endLine":21,"endColumn":105},{"ruleId":"979","severity":1,"message":"992","line":22,"column":98,"nodeType":"981","messageId":"982","endLine":22,"endColumn":100},{"ruleId":"979","severity":1,"message":"980","line":29,"column":37,"nodeType":"981","messageId":"982","endLine":29,"endColumn":39},{"ruleId":"979","severity":1,"message":"992","line":49,"column":71,"nodeType":"981","messageId":"982","endLine":49,"endColumn":73},{"ruleId":"979","severity":1,"message":"992","line":53,"column":27,"nodeType":"981","messageId":"982","endLine":53,"endColumn":29},{"ruleId":"979","severity":1,"message":"980","line":54,"column":46,"nodeType":"981","messageId":"982","endLine":54,"endColumn":48},{"ruleId":"979","severity":1,"message":"980","line":57,"column":42,"nodeType":"981","messageId":"982","endLine":57,"endColumn":44},{"ruleId":"979","severity":1,"message":"992","line":61,"column":93,"nodeType":"981","messageId":"982","endLine":61,"endColumn":95},{"ruleId":"979","severity":1,"message":"980","line":62,"column":50,"nodeType":"981","messageId":"982","endLine":62,"endColumn":52},{"ruleId":"979","severity":1,"message":"992","line":72,"column":72,"nodeType":"981","messageId":"982","endLine":72,"endColumn":74},{"ruleId":"979","severity":1,"message":"980","line":73,"column":39,"nodeType":"981","messageId":"982","endLine":73,"endColumn":41},{"ruleId":"979","severity":1,"message":"992","line":88,"column":41,"nodeType":"981","messageId":"982","endLine":88,"endColumn":43},{"ruleId":"979","severity":1,"message":"992","line":103,"column":72,"nodeType":"981","messageId":"982","endLine":103,"endColumn":74},{"ruleId":"979","severity":1,"message":"992","line":104,"column":71,"nodeType":"981","messageId":"982","endLine":104,"endColumn":73},{"ruleId":"979","severity":1,"message":"992","line":105,"column":39,"nodeType":"981","messageId":"982","endLine":105,"endColumn":41},{"ruleId":"979","severity":1,"message":"992","line":106,"column":38,"nodeType":"981","messageId":"982","endLine":106,"endColumn":40},{"ruleId":"979","severity":1,"message":"992","line":128,"column":74,"nodeType":"981","messageId":"982","endLine":128,"endColumn":76},{"ruleId":"979","severity":1,"message":"992","line":33,"column":83,"nodeType":"981","messageId":"982","endLine":33,"endColumn":85},{"ruleId":"979","severity":1,"message":"992","line":33,"column":93,"nodeType":"981","messageId":"982","endLine":33,"endColumn":95},"no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'enableTest' is defined but never used.","no-self-assign","'state.inputMode' is assigned to itself.","MemberExpression","selfAssignment","'state.outcome' is assigned to itself.","'state.timeTravelCounter' is assigned to itself.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'state.changeHistory' is assigned to itself.","'state.changeHistoryIndex' is assigned to itself.","'state.collectedData' is assigned to itself.","'state.sentData' is assigned to itself.","'state.loadedSheet' is assigned to itself.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","Expected '===' and instead saw '=='.","'concludeAllTests' is defined but never used.","'loadedSheet' is assigned a value but never used.","'menuInteractionTest' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'colWidth', 'cols', 'rowHeight', and 'rows'. Either include them or remove the dependency array.","ArrayExpression",["1042"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'deleteThisVariable' is assigned a value but never used.","'getInLine' is defined but never used.","'nextTurn' is defined but never used.","'store' is defined but never used.","'checkReactionOfSingleClickSelection' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","'dx' is assigned a value but never used.","'elem' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'idx', 'idx'.","ArrowFunctionExpression","unsafeRefs","Function declared in a loop contains unsafe references to variable(s) 'updateCellColor'.","Function declared in a loop contains unsafe references to variable(s) 'updateFontColor'.","no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","no-useless-escape","Unnecessary escape character: \\..","TemplateElement","unnecessaryEscape",["1043","1044"],["1045","1046"],"no-unsafe-negation","Unexpected negating the left operand of 'instanceof' operator.",["1047","1048"],"'getRowsCols' is defined but never used.","Expected a 'break' statement before 'case'.","case","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat",{"desc":"1049","fix":"1050"},{"messageId":"1051","fix":"1052","desc":"1053"},{"messageId":"1054","fix":"1055","desc":"1056"},{"messageId":"1051","fix":"1057","desc":"1053"},{"messageId":"1054","fix":"1058","desc":"1056"},{"messageId":"1059","data":"1060","fix":"1061","desc":"1062"},{"messageId":"1063","fix":"1064","desc":"1065"},"Update the dependencies array to be: [colWidth, cols, rowHeight, rows]",{"range":"1066","text":"1067"},"removeEscape",{"range":"1068","text":"1069"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"1070","text":"1071"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"1072","text":"1069"},{"range":"1073","text":"1071"},"suggestNegatedExpression",{"operator":"1074"},{"range":"1075","text":"1076"},"Negate 'instanceof' expression instead of its left operand. This changes the current behavior.","suggestParenthesisedNegation",{"range":"1077","text":"1078"},"Wrap negation in '()' to make the intention explicit. This preserves the current behavior.",[1869,1871],"[colWidth, cols, rowHeight, rows]",[2748,2749],"",[2748,2748],"\\",[2770,2771],[2770,2770],"instanceof",[8361,8387],"(resizer instanceof Element)",[8360,8368],"(!resizer)"]