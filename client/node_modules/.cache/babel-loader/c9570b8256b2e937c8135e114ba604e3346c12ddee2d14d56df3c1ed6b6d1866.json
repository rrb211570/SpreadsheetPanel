{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rband\\\\Desktop\\\\SpreadsheetPanel\\\\client\\\\src\\\\components\\\\SpreadSheetPanel\\\\SpreadSheetPanel.js\";\nimport TestConsolePanel from '../TestConsolePanel/TestConsolePanel.js';\nimport React from 'react';\nimport { batchTurn, concludeAllTests, concludeAllTestsWhenDone, testSequence } from '../../tests/sequenceHelpers.js';\nimport unitTest from './tests/unitTest.js';\nimport appTest from './tests/appTest.js';\nimport { loadSheetAPI, saveAPI } from './helpers/API.js';\nimport { keyPressed, keyUpped } from './handlers/keyboardEvents/keyboardEvents.js';\nimport TablePanel from '../TablePanel/TablePanel.js';\nimport FormatPanel from '../FormatPanel/FormatPanel.js';\nimport './SpreadSheetPanel.css';\nimport CellViewPanel from '../CellViewPanel/CellViewPanel.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet loadedSheet = null; // our only global variable\n\nclass SpreadSheetPanel extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sheetID: null,\n      // get_URL_parameter(id)\n      autoSaveTimer: null,\n      title: 'Untitled'\n    };\n    this.setAutoSaveInterval = this.setAutoSaveInterval.bind(this);\n    this.hasSavePayload = this.hasSavePayload.bind(this);\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      id: \"contentID\",\n      style: {\n        height: parseInt(window.innerHeight, 10) - 66 + 'px',\n        width: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(TestConsolePanel, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"spreadsheet\",\n        tabIndex: \"-1\",\n        onKeyDown: keyPressed,\n        onKeyUp: keyUpped,\n        children: [/*#__PURE__*/_jsxDEV(FormatPanel, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CellViewPanel, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TablePanel, {\n          rows: this.props.rows,\n          cols: this.props.cols,\n          rowHeight: this.props.rowHeight,\n          colWidth: this.props.colWidth\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this);\n  }\n  componentDidMount() {\n    if (this.props.storageURL != null) {\n      loadSheetAPI(this.state.sheetID, this.props.storageURL).then(res => {\n        console.log(res);\n        if (res.status == 'success') {\n          let autoSaveInterval = this.setAutoSaveInterval();\n          this.setState({\n            autoSaveInterval: autoSaveInterval\n          });\n          loadedSheet = res;\n          document.querySelector('#back').removeAttribute('disabled');\n          document.querySelector('#logout').removeAttribute('disabled');\n        } else {\n          if (res.status == 'fail') {\n            if (res.reason == 'missing token') this.props.nav('/');\n            if (res.reason == 'sheetID does not exist') this.props.nav('/sheets');\n          }\n        }\n      }).catch(err => {\n        console.log('Error: loadSheetAPI(): ' + err);\n        clearInterval(this.state.autoSaveTimer);\n        this.props.nav('/');\n      });\n    }\n    let timer = setInterval(() => {\n      if (batchTurn.current == testSequence.get('SpreadSheetPanel').turnNumber) {\n        unitTest(testSequence.get('SpreadSheetPanel').tests);\n        clearInterval(timer);\n      }\n    }, 500);\n    let timer2 = setInterval(() => {\n      if (batchTurn.current == testSequence.get('App').turnNumber) {\n        appTest(testSequence.get('App').tests);\n        clearInterval(timer2);\n      }\n    });\n    concludeAllTestsWhenDone();\n  }\n  shouldComponentUpdate() {\n    return false; // prevent re-renders from changes to Redux\n  }\n\n  setAutoSaveInterval() {\n    return setInterval(() => {\n      console.log('autoSave()');\n      if (this.hasSavePayload()) {\n        saveAPI(this.state.sheetID, this.props.storageURL).then(res => {\n          if (res.status == 'success') {\n            console.log(res.dat);\n            this.props.save();\n          } else console.log('autoSave failed');\n        }).catch(err => {\n          console.log('saveError: ' + err);\n          clearInterval(this.state.autoSaveInterval);\n        });\n      }\n    }, 3000);\n  }\n  hasSavePayload() {\n    return [...this.props.collectedData.getIndividualEntries()].length != 0 || [...this.props.collectedData.getGroupEntries()].length != 0;\n  }\n}\nexport default SpreadSheetPanel;","map":{"version":3,"names":["TestConsolePanel","React","batchTurn","concludeAllTests","concludeAllTestsWhenDone","testSequence","unitTest","appTest","loadSheetAPI","saveAPI","keyPressed","keyUpped","TablePanel","FormatPanel","CellViewPanel","loadedSheet","SpreadSheetPanel","Component","constructor","props","state","sheetID","autoSaveTimer","title","setAutoSaveInterval","bind","hasSavePayload","render","height","parseInt","window","innerHeight","width","rows","cols","rowHeight","colWidth","componentDidMount","storageURL","then","res","console","log","status","autoSaveInterval","setState","document","querySelector","removeAttribute","reason","nav","catch","err","clearInterval","timer","setInterval","current","get","turnNumber","tests","timer2","shouldComponentUpdate","dat","save","collectedData","getIndividualEntries","length","getGroupEntries"],"sources":["C:/Users/rband/Desktop/SpreadsheetPanel/client/src/components/SpreadSheetPanel/SpreadSheetPanel.js"],"sourcesContent":["import TestConsolePanel from '../TestConsolePanel/TestConsolePanel.js';\r\nimport React from 'react';\r\nimport { batchTurn, concludeAllTests, concludeAllTestsWhenDone, testSequence } from '../../tests/sequenceHelpers.js';\r\n\r\nimport unitTest from './tests/unitTest.js';\r\nimport appTest from './tests/appTest.js';\r\nimport { loadSheetAPI, saveAPI } from './helpers/API.js';\r\nimport { keyPressed, keyUpped } from './handlers/keyboardEvents/keyboardEvents.js';\r\n\r\nimport TablePanel from '../TablePanel/TablePanel.js'\r\nimport FormatPanel from '../FormatPanel/FormatPanel.js';\r\n\r\nimport './SpreadSheetPanel.css'\r\nimport CellViewPanel from '../CellViewPanel/CellViewPanel.js';\r\n\r\nlet loadedSheet = null; // our only global variable\r\n\r\nclass SpreadSheetPanel extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sheetID: null, // get_URL_parameter(id)\r\n            autoSaveTimer: null,\r\n            title: 'Untitled'\r\n        }\r\n        this.setAutoSaveInterval = this.setAutoSaveInterval.bind(this);\r\n        this.hasSavePayload = this.hasSavePayload.bind(this);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content\" id=\"contentID\" style={{ height: parseInt(window.innerHeight, 10) - 66 + 'px', width: '100%' }}>\r\n                <TestConsolePanel />\r\n                <div id='spreadsheet' tabIndex='-1' onKeyDown={keyPressed} onKeyUp={keyUpped}>\r\n                    <FormatPanel />\r\n                    <CellViewPanel />\r\n                    <TablePanel rows={this.props.rows} cols={this.props.cols} rowHeight={this.props.rowHeight} colWidth={this.props.colWidth} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    componentDidMount() {\r\n        if (this.props.storageURL != null) {\r\n            loadSheetAPI(this.state.sheetID, this.props.storageURL)\r\n                .then(res => {\r\n                    console.log(res);\r\n                    if (res.status == 'success') {\r\n                        let autoSaveInterval = this.setAutoSaveInterval();\r\n                        this.setState({\r\n                            autoSaveInterval: autoSaveInterval,\r\n                        })\r\n                        loadedSheet = res;\r\n                        document.querySelector('#back').removeAttribute('disabled');\r\n                        document.querySelector('#logout').removeAttribute('disabled');\r\n                    } else {\r\n                        if (res.status == 'fail') {\r\n                            if (res.reason == 'missing token') this.props.nav('/');\r\n                            if (res.reason == 'sheetID does not exist') this.props.nav('/sheets')\r\n                        }\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    console.log('Error: loadSheetAPI(): ' + err);\r\n                    clearInterval(this.state.autoSaveTimer);\r\n                    this.props.nav('/');\r\n                });\r\n        }\r\n        let timer = setInterval(() => {\r\n            if (batchTurn.current == testSequence.get('SpreadSheetPanel').turnNumber) {\r\n                unitTest(testSequence.get('SpreadSheetPanel').tests);\r\n                clearInterval(timer);\r\n            }\r\n\r\n        }, 500);\r\n        let timer2 = setInterval(() => {\r\n            if (batchTurn.current == testSequence.get('App').turnNumber) {\r\n                appTest(testSequence.get('App').tests);\r\n                clearInterval(timer2);\r\n            }\r\n        })\r\n        concludeAllTestsWhenDone();\r\n    }\r\n    shouldComponentUpdate() {\r\n        return false; // prevent re-renders from changes to Redux\r\n    }\r\n    setAutoSaveInterval() {\r\n        return setInterval(() => {\r\n            console.log('autoSave()');\r\n            if (this.hasSavePayload()) {\r\n                saveAPI(this.state.sheetID, this.props.storageURL)\r\n                    .then(res => {\r\n                        if (res.status == 'success') {\r\n                            console.log(res.dat);\r\n                            this.props.save();\r\n                        }\r\n                        else console.log('autoSave failed');\r\n                    })\r\n                    .catch(err => {\r\n                        console.log('saveError: ' + err);\r\n                        clearInterval(this.state.autoSaveInterval);\r\n                    });\r\n            }\r\n        }, 3000);\r\n    }\r\n    hasSavePayload() {\r\n        return [...this.props.collectedData.getIndividualEntries()].length != 0 ||\r\n            [...this.props.collectedData.getGroupEntries()].length != 0;\r\n    }\r\n}\r\nexport default SpreadSheetPanel;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}