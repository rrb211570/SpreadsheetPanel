{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rband\\\\Desktop\\\\SpreadsheetPanel\\\\client\\\\src\\\\components\\\\FormatPanel\\\\components\\\\FontFamily\\\\FontFamily.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { store } from './../../../../store/store.js';\nimport { useSelector } from 'react-redux';\nimport { getFontFamily, setFontFamily } from '../../../../store/reducers/selectionSlice.js';\nimport Data from \"../../../../data/data.js\";\nimport recordChange from \"../../../../data/modifiers/recordChange.js\";\nimport './FontFamily.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet fonts = ['Calibri', 'Times New Roman', 'Ebrima', 'Century Gothic'];\nlet options = [];\nfor (let i = 0; i < fonts.length; ++i) {\n  options.push( /*#__PURE__*/_jsxDEV(\"option\", {\n    value: fonts[i],\n    children: fonts[i]\n  }, i, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 18\n  }, this));\n}\nfunction FontFamily(_ref) {\n  _s();\n  let {\n    selectionEntries\n  } = _ref;\n  const fontFamily = useSelector(getFontFamily);\n  let handleChange = e => {\n    updateFontFamily(selectionEntries, fontFamily, e.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fontFamily\",\n    children: /*#__PURE__*/_jsxDEV(\"select\", {\n      className: \"fontFamily__select\",\n      value: fontFamily,\n      onChange: handleChange,\n      children: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n}\n_s(FontFamily, \"gFCjP7JnQRZxTTn8il5kBVU/H/U=\", false, function () {\n  return [useSelector];\n});\n_c = FontFamily;\nfunction updateFontFamily(selectionEntries, prevFontFamily, newFontFamily) {\n  let prevData = new Data();\n  let newData = new Data();\n  for (const cell of selectionEntries.values()) {\n    let [rowNum, colNum] = cell.split(',').map(num => parseInt(num, 10));\n    prevData.setIndividualEntry('.row' + rowNum + '.col' + colNum, new Map([['fontFamily', prevFontFamily]]), rowNum, colNum, null);\n    newData.setIndividualEntry('.row' + rowNum + '.col' + colNum, new Map([['fontFamily', newFontFamily]]), rowNum, colNum, null);\n    document.querySelector(`.row${rowNum}.col${colNum}>.cellValueDiv>.cellValue`).style.fontFamily = newFontFamily;\n  }\n  recordChange(prevData, newData);\n  store.dispatch(setFontFamily({\n    fontFamily: newFontFamily\n  }));\n}\nexport { FontFamily, updateFontFamily };\nvar _c;\n$RefreshReg$(_c, \"FontFamily\");","map":{"version":3,"names":["React","store","useSelector","getFontFamily","setFontFamily","Data","recordChange","fonts","options","i","length","push","FontFamily","selectionEntries","fontFamily","handleChange","e","updateFontFamily","target","value","prevFontFamily","newFontFamily","prevData","newData","cell","values","rowNum","colNum","split","map","num","parseInt","setIndividualEntry","Map","document","querySelector","style","dispatch"],"sources":["C:/Users/rband/Desktop/SpreadsheetPanel/client/src/components/FormatPanel/components/FontFamily/FontFamily.js"],"sourcesContent":["import React from \"react\";\r\nimport { store } from './../../../../store/store.js'\r\nimport { useSelector } from 'react-redux';\r\nimport { getFontFamily, setFontFamily } from '../../../../store/reducers/selectionSlice.js';\r\nimport Data from \"../../../../data/data.js\";\r\nimport recordChange from \"../../../../data/modifiers/recordChange.js\";\r\nimport './FontFamily.css'\r\n\r\nlet fonts = ['Calibri', 'Times New Roman', 'Ebrima', 'Century Gothic'];\r\nlet options = [];\r\nfor (let i = 0; i < fonts.length; ++i) {\r\n    options.push(<option key={i} value={fonts[i]}>{fonts[i]}</option>);\r\n}\r\n\r\nfunction FontFamily({ selectionEntries }) {\r\n    const fontFamily = useSelector(getFontFamily);\r\n\r\n    let handleChange = (e) => {\r\n        updateFontFamily(selectionEntries, fontFamily, e.target.value)\r\n    }\r\n\r\n    return (\r\n        <div className='fontFamily'>\r\n            <select className='fontFamily__select' value={fontFamily} onChange={handleChange}>\r\n                {options}\r\n            </select>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction updateFontFamily(selectionEntries, prevFontFamily, newFontFamily) {\r\n    let prevData = new Data();\r\n    let newData = new Data();\r\n    for (const cell of selectionEntries.values()) {\r\n        let [rowNum, colNum] = cell.split(',').map((num) => parseInt(num, 10));\r\n        prevData.setIndividualEntry('.row' + rowNum + '.col' + colNum, new Map([['fontFamily', prevFontFamily]]), rowNum, colNum, null);\r\n        newData.setIndividualEntry('.row' + rowNum + '.col' + colNum, new Map([['fontFamily', newFontFamily]]), rowNum, colNum, null);\r\n        document.querySelector(`.row${rowNum}.col${colNum}>.cellValueDiv>.cellValue`).style.fontFamily = newFontFamily;\r\n    }\r\n    recordChange(prevData, newData);\r\n    store.dispatch(setFontFamily({ fontFamily: newFontFamily }));\r\n}\r\n\r\nexport { FontFamily, updateFontFamily };"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,8BAA8B;AACpD,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,EAAEC,aAAa,QAAQ,8CAA8C;AAC3F,OAAOC,IAAI,MAAM,0BAA0B;AAC3C,OAAOC,YAAY,MAAM,4CAA4C;AACrE,OAAO,kBAAkB;AAAA;AAEzB,IAAIC,KAAK,GAAG,CAAC,SAAS,EAAE,iBAAiB,EAAE,QAAQ,EAAE,gBAAgB,CAAC;AACtE,IAAIC,OAAO,GAAG,EAAE;AAChB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACG,MAAM,EAAE,EAAED,CAAC,EAAE;EACnCD,OAAO,CAACG,IAAI,eAAC;IAAgB,KAAK,EAAEJ,KAAK,CAACE,CAAC,CAAE;IAAA,UAAEF,KAAK,CAACE,CAAC;EAAC,GAA7BA,CAAC;IAAA;IAAA;IAAA;EAAA,QAAsC,CAAC;AACtE;AAEA,SAASG,UAAU,OAAuB;EAAA;EAAA,IAAtB;IAAEC;EAAiB,CAAC;EACpC,MAAMC,UAAU,GAAGZ,WAAW,CAACC,aAAa,CAAC;EAE7C,IAAIY,YAAY,GAAIC,CAAC,IAAK;IACtBC,gBAAgB,CAACJ,gBAAgB,EAAEC,UAAU,EAAEE,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC;EAClE,CAAC;EAED,oBACI;IAAK,SAAS,EAAC,YAAY;IAAA,uBACvB;MAAQ,SAAS,EAAC,oBAAoB;MAAC,KAAK,EAAEL,UAAW;MAAC,QAAQ,EAAEC,YAAa;MAAA,UAC5EP;IAAO;MAAA;MAAA;MAAA;IAAA;EACH;IAAA;IAAA;IAAA;EAAA,QACP;AAEd;AAAC,GAdQI,UAAU;EAAA,QACIV,WAAW;AAAA;AAAA,KADzBU,UAAU;AAgBnB,SAASK,gBAAgB,CAACJ,gBAAgB,EAAEO,cAAc,EAAEC,aAAa,EAAE;EACvE,IAAIC,QAAQ,GAAG,IAAIjB,IAAI,EAAE;EACzB,IAAIkB,OAAO,GAAG,IAAIlB,IAAI,EAAE;EACxB,KAAK,MAAMmB,IAAI,IAAIX,gBAAgB,CAACY,MAAM,EAAE,EAAE;IAC1C,IAAI,CAACC,MAAM,EAAEC,MAAM,CAAC,GAAGH,IAAI,CAACI,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAEC,GAAG,IAAKC,QAAQ,CAACD,GAAG,EAAE,EAAE,CAAC,CAAC;IACtER,QAAQ,CAACU,kBAAkB,CAAC,MAAM,GAAGN,MAAM,GAAG,MAAM,GAAGC,MAAM,EAAE,IAAIM,GAAG,CAAC,CAAC,CAAC,YAAY,EAAEb,cAAc,CAAC,CAAC,CAAC,EAAEM,MAAM,EAAEC,MAAM,EAAE,IAAI,CAAC;IAC/HJ,OAAO,CAACS,kBAAkB,CAAC,MAAM,GAAGN,MAAM,GAAG,MAAM,GAAGC,MAAM,EAAE,IAAIM,GAAG,CAAC,CAAC,CAAC,YAAY,EAAEZ,aAAa,CAAC,CAAC,CAAC,EAAEK,MAAM,EAAEC,MAAM,EAAE,IAAI,CAAC;IAC7HO,QAAQ,CAACC,aAAa,CAAE,OAAMT,MAAO,OAAMC,MAAO,2BAA0B,CAAC,CAACS,KAAK,CAACtB,UAAU,GAAGO,aAAa;EAClH;EACAf,YAAY,CAACgB,QAAQ,EAAEC,OAAO,CAAC;EAC/BtB,KAAK,CAACoC,QAAQ,CAACjC,aAAa,CAAC;IAAEU,UAAU,EAAEO;EAAc,CAAC,CAAC,CAAC;AAChE;AAEA,SAAST,UAAU,EAAEK,gBAAgB;AAAG;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}