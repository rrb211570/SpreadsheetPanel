{"ast":null,"code":"import { compareDOM, compareStore, logError, logSuccess } from '../../../../tests/helper.js';\nimport { getInLine, nextTurn } from '../../../../tests/sequenceHelpers.js';\nimport { store } from './../../../../store/store.js';\nconst WAIT_IN_QUEUE = -1;\nconst ARRANGE = 0;\nconst ACTION_SELECT_CELL = 1;\nconst ACTION_TOGGLE_ITALIC = 2;\nconst ASSERT = 3;\nfunction italicTest(turn) {\n  let changes = [[4, 5], [1, 2], [3, 7], [8, 2], [2, 4]];\n  try {\n    if (changes.length > 0) checkReactionOfItalic(1, changes[0], turn, true, changes.length);\n    for (let i = 1; i < changes.length; ++i) checkReactionOfItalic(i + 1, changes[i], turn, false, changes.length);\n  } catch (e) {\n    console.log('Error: checkReactionOfItalic param error: ' + e);\n    logError(null, null, null, null, e);\n  }\n}\nfunction checkReactionOfItalic(testCaseIndex, testDetails, turn, isFirstCall, totalTestCases) {\n  let [selectedRowNum, selectedColNum] = testDetails;\n  let cellValue = document.querySelector(`.row${selectedRowNum}.col${selectedColNum}>.cellValueDiv>.cellValue`);\n  let myTurnNumber = getInLine(turn);\n  let stage = WAIT_IN_QUEUE;\n  let wasPreviouslyItalic;\n  let prevState;\n  let prevHistoryIndex;\n  let timer = setInterval(() => {\n    try {\n      switch (stage) {\n        case WAIT_IN_QUEUE:\n          if (turn.current == myTurnNumber) {\n            if (isFirstCall) console.log('\\n--------ITALIC TEST--------------------');\n            stage = ARRANGE;\n          }\n          break;\n        case ARRANGE:\n          let history = store.getState().history;\n          wasPreviouslyItalic = cellValue.style.fontStyle == 'italic';\n          prevState = history.changeHistory[history.changeHistoryIndex];\n          prevHistoryIndex = history.changeHistoryIndex;\n        case ACTION_SELECT_CELL:\n          let cell = document.querySelector(`.row${selectedRowNum}.col${selectedColNum} .coverDiv`);\n          cell.dispatchEvent(new MouseEvent('mousedown', {\n            bubbles: true,\n            cancelable: true,\n            clientX: 0\n          }));\n          stage = ACTION_TOGGLE_ITALIC;\n          break;\n        case ACTION_TOGGLE_ITALIC:\n          // trigger click event on italicBtn\n          let italicBtn = document.querySelector('.italic__btn');\n          italicBtn.dispatchEvent(new MouseEvent('click', {\n            bubbles: true,\n            cancelable: true,\n            clientX: 0\n          }));\n          stage = ASSERT;\n          break;\n        case ASSERT:\n          let prevPropertyObj = {\n            fontStyle: wasPreviouslyItalic ? 'italic' : 'normal'\n          };\n          let propertyObj = {\n            fontStyle: wasPreviouslyItalic ? 'normal' : 'italic'\n          };\n          compareDOM(selectedRowNum, selectedColNum, propertyObj);\n          compareStore(selectedRowNum, selectedColNum, prevPropertyObj, propertyObj, prevState, prevHistoryIndex);\n          console.log('italic affects store and DOM correctly');\n          if (testCaseIndex == totalTestCases) logSuccess('italicTest()', totalTestCases);\n          nextTurn(turn);\n          clearInterval(timer);\n          break;\n      }\n    } catch (e) {\n      let errMsg = 'Err: checkReactionOfItalic(): { testCaseIndex: ' + testCaseIndex + ', rowNum: ' + selectedRowNum + ', colNum: ' + selectedColNum + ', toggling italic: ' + wasPreviouslyItalic ? 'off' : 'on' + ' } : ' + e;\n      console.log(errMsg);\n      logError(errMsg);\n      clearInterval(timer);\n    }\n  }, 200);\n}\nexport { italicTest, checkReactionOfItalic };","map":{"version":3,"names":["compareDOM","compareStore","logError","logSuccess","getInLine","nextTurn","store","WAIT_IN_QUEUE","ARRANGE","ACTION_SELECT_CELL","ACTION_TOGGLE_ITALIC","ASSERT","italicTest","turn","changes","length","checkReactionOfItalic","i","e","console","log","testCaseIndex","testDetails","isFirstCall","totalTestCases","selectedRowNum","selectedColNum","cellValue","document","querySelector","myTurnNumber","stage","wasPreviouslyItalic","prevState","prevHistoryIndex","timer","setInterval","current","history","getState","style","fontStyle","changeHistory","changeHistoryIndex","cell","dispatchEvent","MouseEvent","bubbles","cancelable","clientX","italicBtn","prevPropertyObj","propertyObj","clearInterval","errMsg"],"sources":["C:/Users/rband/Desktop/SpreadsheetPanel/client/src/components/FormatPanel/components/Italic/test.js"],"sourcesContent":["import { compareDOM, compareStore, logError, logSuccess } from '../../../../tests/helper.js';\r\nimport { getInLine, nextTurn } from '../../../../tests/sequenceHelpers.js'\r\nimport { store } from './../../../../store/store.js'\r\n\r\nconst WAIT_IN_QUEUE = -1;\r\nconst ARRANGE = 0;\r\nconst ACTION_SELECT_CELL = 1;\r\nconst ACTION_TOGGLE_ITALIC = 2;\r\nconst ASSERT = 3;\r\n\r\nfunction italicTest(turn) {\r\n    let changes = [[4, 5], [1, 2], [3, 7], [8, 2], [2, 4]];\r\n    try {\r\n        if (changes.length > 0) checkReactionOfItalic(1, changes[0], turn, true, changes.length);\r\n        for (let i = 1; i < changes.length; ++i) checkReactionOfItalic(i + 1, changes[i], turn, false, changes.length);\r\n    } catch (e) {\r\n        console.log('Error: checkReactionOfItalic param error: ' + e);\r\n        logError(null, null, null, null, e);\r\n    }\r\n}\r\n\r\nfunction checkReactionOfItalic(testCaseIndex, testDetails, turn, isFirstCall, totalTestCases) {\r\n    let [selectedRowNum, selectedColNum] = testDetails;\r\n    let cellValue = document.querySelector(`.row${selectedRowNum}.col${selectedColNum}>.cellValueDiv>.cellValue`);\r\n    let myTurnNumber = getInLine(turn);\r\n    let stage = WAIT_IN_QUEUE;\r\n    let wasPreviouslyItalic;\r\n    let prevState;\r\n    let prevHistoryIndex;\r\n    let timer = setInterval(() => {\r\n        try {\r\n            switch (stage) {\r\n                case WAIT_IN_QUEUE:\r\n                    if (turn.current == myTurnNumber) {\r\n                        if (isFirstCall) console.log('\\n--------ITALIC TEST--------------------');\r\n                        stage = ARRANGE;\r\n                    }\r\n                    break;\r\n                case ARRANGE:\r\n                    let history = store.getState().history;\r\n                    wasPreviouslyItalic = cellValue.style.fontStyle == 'italic';\r\n                    prevState = history.changeHistory[history.changeHistoryIndex];\r\n                    prevHistoryIndex = history.changeHistoryIndex;\r\n                case ACTION_SELECT_CELL:\r\n                    let cell = document.querySelector(`.row${selectedRowNum}.col${selectedColNum} .coverDiv`);\r\n                    cell.dispatchEvent(new MouseEvent('mousedown', { bubbles: true, cancelable: true, clientX: 0 }));\r\n                    stage = ACTION_TOGGLE_ITALIC;\r\n                    break;\r\n                case ACTION_TOGGLE_ITALIC:\r\n                    // trigger click event on italicBtn\r\n                    let italicBtn = document.querySelector('.italic__btn');\r\n                    italicBtn.dispatchEvent(new MouseEvent('click', { bubbles: true, cancelable: true, clientX: 0 }));\r\n                    stage = ASSERT;\r\n                    break;\r\n                case ASSERT:\r\n                    let prevPropertyObj = { fontStyle: wasPreviouslyItalic ? 'italic' : 'normal' };\r\n                    let propertyObj = { fontStyle: wasPreviouslyItalic ? 'normal' : 'italic' };\r\n                    compareDOM(selectedRowNum, selectedColNum, propertyObj);\r\n                    compareStore(selectedRowNum, selectedColNum, prevPropertyObj, propertyObj, prevState, prevHistoryIndex);\r\n                    console.log('italic affects store and DOM correctly');\r\n                    if (testCaseIndex == totalTestCases) logSuccess('italicTest()', totalTestCases);\r\n                    nextTurn(turn);\r\n                    clearInterval(timer);\r\n                    break;\r\n            }\r\n        } catch (e) {\r\n            let errMsg = 'Err: checkReactionOfItalic(): { testCaseIndex: ' + testCaseIndex + ', rowNum: ' + selectedRowNum + ', colNum: ' + selectedColNum + ', toggling italic: ' + wasPreviouslyItalic ? 'off' : 'on' + ' } : ' + e;\r\n            console.log(errMsg);\r\n            logError(errMsg);\r\n            clearInterval(timer);\r\n        }\r\n    }, 200);\r\n}\r\n\r\nexport { italicTest, checkReactionOfItalic };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}