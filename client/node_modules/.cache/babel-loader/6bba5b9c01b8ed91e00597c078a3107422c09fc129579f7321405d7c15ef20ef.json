{"ast":null,"code":"import { store } from '../../../../store/store.js';\nconst SCROLL_BAR_ENDPOINT_DELTA = 22 * 4;\nlet curRow = 1;\nlet curCol = 1;\nlet lowestPixel;\nlet rightMostPixel;\nlet pseudoMarginTops;\nfunction applyScrollSnapHandlers() {\n  updateScrollDimensions();\n  document.querySelector('#tableEntryCellsWindow').onwheel = function () {\n    return false;\n  };\n  document.querySelector('#tableEntryCellsWindow').addEventListener('scroll', scrollHandler);\n  document.querySelector('#tableEntryCells').addEventListener('wheel', wheelHandler);\n  window.history.scrollRestoration = 'manual'; // scroll should reset on page reload\n}\n\nfunction updateScrollDimensions() {\n  let tableEntryCellsWindow = document.querySelector('#tableEntryCellsWindow');\n  let tableEntryCells = document.querySelector('#tableEntryCells');\n  let parentDivHeight = parseInt(tableEntryCellsWindow.offsetHeight, 10);\n  let parentDivWidth = parseInt(tableEntryCellsWindow.offsetWidth, 10);\n  let tableHeight = parseInt(tableEntryCells.scrollHeight, 10);\n  let tableWidth = parseInt(tableEntryCells.scrollWidth, 10);\n  let totalRows = store.getState().tableDimensions.totalRows;\n  pseudoMarginTops = [0];\n  for (let i = 1; i < totalRows; ++i) {\n    pseudoMarginTops.push(parseInt(pseudoMarginTops[i - 1], 10) + parseInt(document.querySelector(`#row${i}`).style.height, 10));\n  }\n  lowestPixel = tableHeight - parentDivHeight + 23;\n  rightMostPixel = tableWidth - parentDivWidth + 50 - 18 - 18 + 4;\n  //console.log(lowestPixel + ' ' + rightMostPixel);\n}\n\nfunction scrollHandler() {\n  let scrollBarLayer = document.querySelector('#tableEntryCellsWindow');\n  let newPosX = scrollBarLayer.scrollLeft;\n  let newPosY = scrollBarLayer.scrollTop;\n  while (newPosY > pseudoMarginTops[curRow]) ++curRow;\n  while (newPosY < pseudoMarginTops[curRow - 1]) --curRow;\n  if (newPosY > lowestPixel) newPosY = lowestPixel;else newPosY = pseudoMarginTops[curRow - 1];\n  while (newPosX > getMarginLeft(curCol + 1)) ++curCol;\n  while (newPosX < getMarginLeft(curCol)) --curCol;\n\n  // console.log(newPosX + ' ' + rightMostPixel + ' ' + SCROLL_BAR_ENDPOINT_DELTA);\n  if (newPosX > rightMostPixel - SCROLL_BAR_ENDPOINT_DELTA) newPosX = rightMostPixel;else newPosX = getMarginLeft(curCol);\n\n  //console.log('Scroll');\n  //console.log('Scroll > curRow: ' + curRow + ' curCol: ' + curCol + ' newPosX: ' + newPosX + ' newPosY: ' + newPosY);\n  updateTablePosition(newPosX, newPosY);\n}\nfunction getMarginLeft(curCol) {\n  let totalCols = store.getState().tableDimensions.totalCols;\n  return parseInt(document.querySelector(`.row1.col${curCol < totalCols ? curCol : totalCols}`).style.marginLeft, 10);\n}\nlet scrollTimeout = null;\nfunction wheelHandler(event) {\n  let totalRows = store.getState().tableDimensions.totalRows;\n  let totalCols = store.getState().tableDimensions.totalCols;\n  let newPosX;\n  let newPosY;\n  if (event.deltaY > 0) {\n    if (event.shiftKey) {\n      let nextColCell = document.querySelector(`.row${curRow}.col${curCol < 16 ? curCol + 1 : 16}`);\n      newPosX = parseInt(nextColCell.style.marginLeft, 10);\n      if (newPosX > rightMostPixel - SCROLL_BAR_ENDPOINT_DELTA) {\n        newPosX = rightMostPixel;\n      } else if (curCol < totalCols) ++curCol;\n    } else {\n      newPosY = pseudoMarginTops[curRow < totalRows ? curRow : curRow - 1];\n      if (newPosY > lowestPixel) newPosY = lowestPixel;else if (curRow < totalRows) ++curRow;\n    }\n  } else {\n    if (event.shiftKey) {\n      let prevColCell = document.querySelector(`.row${curRow}.col${curCol > 1 ? curCol - 1 : 1}`);\n      newPosX = parseInt(prevColCell.style.marginLeft, 10);\n      if (newPosX < SCROLL_BAR_ENDPOINT_DELTA) newPosX = 0;else if (curCol > 1) --curCol;\n    } else {\n      newPosY = pseudoMarginTops[curRow > 1 ? curRow - 2 : curRow - 1];\n      if (newPosY > lowestPixel) newPosY = lowestPixel;else if (curRow > 1) --curRow;\n    }\n  }\n\n  // Since we're already scrolling via wheel event, we wrap tableEntryCellsWindow with logic that cancels scroll event\n  document.querySelector('#tableEntryCellsWindow').removeEventListener('scroll', scrollHandler);\n  document.querySelector('#tableEntryCellsWindow').scroll({\n    top: newPosY,\n    left: newPosX,\n    behavior: 'auto'\n  });\n  if (scrollTimeout) clearTimeout(scrollTimeout);\n  scrollTimeout = setTimeout(() => {\n    document.querySelector('#tableEntryCellsWindow').addEventListener('scroll', scrollHandler);\n  }, 500);\n  console.log('Wheel');\n  //console.log('Wheel > curRow: ' + curRow + ' curCol: ' + curCol + ' newPosX: ' + newPosX + ' newPosY: ' + newPosY);\n  updateTablePosition(newPosX, newPosY);\n}\nfunction updateTablePosition(newPosX, newPosY) {\n  document.querySelector('#axisY').style.marginTop = 22 - newPosY + 'px';\n  document.querySelector('#axisX').style.marginLeft = 50 - newPosX + 'px';\n  document.querySelector('#tableEntryCells').scroll({\n    top: newPosY,\n    left: newPosX,\n    behavior: 'auto'\n  });\n}\nexport { applyScrollSnapHandlers, updateScrollDimensions };","map":{"version":3,"names":["store","SCROLL_BAR_ENDPOINT_DELTA","curRow","curCol","lowestPixel","rightMostPixel","pseudoMarginTops","applyScrollSnapHandlers","updateScrollDimensions","document","querySelector","onwheel","addEventListener","scrollHandler","wheelHandler","window","history","scrollRestoration","tableEntryCellsWindow","tableEntryCells","parentDivHeight","parseInt","offsetHeight","parentDivWidth","offsetWidth","tableHeight","scrollHeight","tableWidth","scrollWidth","totalRows","getState","tableDimensions","i","push","style","height","scrollBarLayer","newPosX","scrollLeft","newPosY","scrollTop","getMarginLeft","updateTablePosition","totalCols","marginLeft","scrollTimeout","event","deltaY","shiftKey","nextColCell","prevColCell","removeEventListener","scroll","top","left","behavior","clearTimeout","setTimeout","console","log","marginTop"],"sources":["C:/Users/rband/Desktop/SpreadsheetPanel/client/src/components/TablePanel/handlers/scrollSnapHandler/scrollSnapHandler.js"],"sourcesContent":["import { store } from '../../../../store/store.js';\r\n\r\nconst SCROLL_BAR_ENDPOINT_DELTA = 22 * 4;\r\nlet curRow = 1;\r\nlet curCol = 1;\r\nlet lowestPixel;\r\nlet rightMostPixel;\r\nlet pseudoMarginTops;\r\n\r\nfunction applyScrollSnapHandlers() {\r\n    updateScrollDimensions();\r\n    document.querySelector('#tableEntryCellsWindow').onwheel = function () { return false; }\r\n    document.querySelector('#tableEntryCellsWindow').addEventListener('scroll', scrollHandler);\r\n    document.querySelector('#tableEntryCells').addEventListener('wheel', wheelHandler);\r\n    window.history.scrollRestoration = 'manual'; // scroll should reset on page reload\r\n}\r\n\r\nfunction updateScrollDimensions() {\r\n    let tableEntryCellsWindow = document.querySelector('#tableEntryCellsWindow');\r\n    let tableEntryCells = document.querySelector('#tableEntryCells');\r\n\r\n    let parentDivHeight = parseInt(tableEntryCellsWindow.offsetHeight, 10);\r\n    let parentDivWidth = parseInt(tableEntryCellsWindow.offsetWidth, 10);\r\n    let tableHeight = parseInt(tableEntryCells.scrollHeight, 10);\r\n    let tableWidth = parseInt(tableEntryCells.scrollWidth, 10);\r\n    let totalRows = store.getState().tableDimensions.totalRows;\r\n    pseudoMarginTops = [0];\r\n    for (let i = 1; i < totalRows; ++i) {\r\n        pseudoMarginTops.push(parseInt(pseudoMarginTops[i - 1], 10) + parseInt(document.querySelector(`#row${i}`).style.height, 10));\r\n    }\r\n\r\n    lowestPixel = tableHeight - parentDivHeight + 23;\r\n    rightMostPixel = tableWidth - parentDivWidth + 50 - 18 - 18 + 4;\r\n    //console.log(lowestPixel + ' ' + rightMostPixel);\r\n}\r\n\r\nfunction scrollHandler() {\r\n    let scrollBarLayer = document.querySelector('#tableEntryCellsWindow');\r\n    let newPosX = scrollBarLayer.scrollLeft;\r\n    let newPosY = scrollBarLayer.scrollTop;\r\n\r\n    while (newPosY > pseudoMarginTops[curRow]) ++curRow;\r\n    while (newPosY < pseudoMarginTops[curRow - 1]) --curRow;\r\n\r\n    if (newPosY > lowestPixel) newPosY = lowestPixel;\r\n    else newPosY = pseudoMarginTops[curRow - 1];\r\n\r\n    while (newPosX > getMarginLeft(curCol + 1)) ++curCol;\r\n    while (newPosX < getMarginLeft(curCol)) --curCol;\r\n\r\n    // console.log(newPosX + ' ' + rightMostPixel + ' ' + SCROLL_BAR_ENDPOINT_DELTA);\r\n    if (newPosX > rightMostPixel - SCROLL_BAR_ENDPOINT_DELTA) newPosX = rightMostPixel;\r\n    else newPosX = getMarginLeft(curCol);\r\n\r\n    //console.log('Scroll');\r\n    //console.log('Scroll > curRow: ' + curRow + ' curCol: ' + curCol + ' newPosX: ' + newPosX + ' newPosY: ' + newPosY);\r\n    updateTablePosition(newPosX, newPosY);\r\n}\r\n\r\nfunction getMarginLeft(curCol) {\r\n    let totalCols = store.getState().tableDimensions.totalCols;\r\n    return parseInt(document.querySelector(`.row1.col${curCol < totalCols ? curCol : totalCols}`).style.marginLeft, 10);\r\n}\r\n\r\nlet scrollTimeout = null;\r\nfunction wheelHandler(event) {\r\n    let totalRows = store.getState().tableDimensions.totalRows;\r\n    let totalCols = store.getState().tableDimensions.totalCols;\r\n    let newPosX;\r\n    let newPosY;\r\n\r\n    if (event.deltaY > 0) {\r\n        if (event.shiftKey) {\r\n            let nextColCell = document.querySelector(`.row${curRow}.col${curCol < 16 ? curCol + 1 : 16}`);\r\n            newPosX = parseInt(nextColCell.style.marginLeft, 10);\r\n            if (newPosX > rightMostPixel - SCROLL_BAR_ENDPOINT_DELTA) {\r\n                newPosX = rightMostPixel;\r\n            }\r\n            else if (curCol < totalCols) ++curCol;\r\n        } else {\r\n            newPosY = pseudoMarginTops[curRow < totalRows ? curRow : curRow - 1];\r\n            if (newPosY > lowestPixel) newPosY = lowestPixel;\r\n            else if (curRow < totalRows) ++curRow;\r\n        }\r\n    } else {\r\n        if (event.shiftKey) {\r\n            let prevColCell = document.querySelector(`.row${curRow}.col${curCol > 1 ? curCol - 1 : 1}`);\r\n            newPosX = parseInt(prevColCell.style.marginLeft, 10);\r\n            if (newPosX < SCROLL_BAR_ENDPOINT_DELTA) newPosX = 0;\r\n            else if (curCol > 1) --curCol;\r\n        } else {\r\n            newPosY = pseudoMarginTops[curRow > 1 ? curRow - 2 : curRow - 1];\r\n            if (newPosY > lowestPixel) newPosY = lowestPixel;\r\n            else if (curRow > 1) --curRow;\r\n        }\r\n    }\r\n\r\n    // Since we're already scrolling via wheel event, we wrap tableEntryCellsWindow with logic that cancels scroll event\r\n    document.querySelector('#tableEntryCellsWindow').removeEventListener('scroll', scrollHandler);\r\n    document.querySelector('#tableEntryCellsWindow').scroll({\r\n        top: newPosY,\r\n        left: newPosX,\r\n        behavior: 'auto'\r\n    });\r\n    if (scrollTimeout) clearTimeout(scrollTimeout);\r\n    scrollTimeout = setTimeout(() => {\r\n        document.querySelector('#tableEntryCellsWindow').addEventListener('scroll', scrollHandler);\r\n    }, 500);\r\n\r\n    console.log('Wheel');\r\n    //console.log('Wheel > curRow: ' + curRow + ' curCol: ' + curCol + ' newPosX: ' + newPosX + ' newPosY: ' + newPosY);\r\n    updateTablePosition(newPosX, newPosY);\r\n}\r\n\r\nfunction updateTablePosition(newPosX, newPosY) {\r\n    document.querySelector('#axisY').style.marginTop = 22 - newPosY + 'px';\r\n    document.querySelector('#axisX').style.marginLeft = 50 - newPosX  + 'px';\r\n    document.querySelector('#tableEntryCells').scroll({\r\n        top: newPosY,\r\n        left: newPosX,\r\n        behavior: 'auto'\r\n    });\r\n}\r\n\r\nexport { applyScrollSnapHandlers, updateScrollDimensions };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}