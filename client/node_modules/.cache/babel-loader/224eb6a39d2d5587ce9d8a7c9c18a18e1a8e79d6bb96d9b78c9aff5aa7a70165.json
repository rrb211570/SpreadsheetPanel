{"ast":null,"code":"import { checkReactionOfResizing } from \"../components/TablePanel/handlers/resizingHandler/test\";\nimport { checkReactionOfTextChange } from \"../components/TablePanel/handlers/cellHandler/textChangeHandler/test\";\nimport { validateSequence, checkReactionOfKeyInput } from \"../components/SpreadSheetPanel/handlers/keyboardEvents/test\";\nimport { checkReactionOfSingleClickSelection, checkReactionOfDoubleClickSelection } from \"../components/TablePanel/handlers/cellHandler/selectionHandler/test\";\nimport { UNDO_DISPATCH, UNDO_FINISH, REDO_DISPATCH, REDO_FINISH, FLUFF_FULL } from './../components/SpreadSheetPanel/handlers/keyboardEvents/keyMacros.js';\nconst X_AXIS = 'X_AXIS';\nconst Y_AXIS = 'Y_AXIS';\nfunction endToEnd(atomicTurn) {\n  // sequence of atomic tests\n  let axisCellsX = document.querySelectorAll('.AxisX');\n  let axisCellsY = document.querySelectorAll('.AxisY');\n  let resizeEvents = [[Y_AXIS, [1, 2, 3], 20], [Y_AXIS, [2, 5, 6], 10], [Y_AXIS, [1, 2, 3], -10], [X_AXIS, [2, 5, 6], -20]];\n  let keyEvents = [UNDO_DISPATCH, UNDO_FINISH, UNDO_DISPATCH, UNDO_FINISH, REDO_DISPATCH, REDO_FINISH, REDO_DISPATCH, REDO_FINISH, REDO_DISPATCH, REDO_FINISH, FLUFF_FULL];\n  let clickSelections = [[4, 5], [1, 1], [3, 7], [8, 2], [2, 4]];\n  let textEntries = ['blah', 'burger', 'hello', 'world', 'apple', 'fun'];\n  let totalKeyInputTestCases = validateSequence(keyEvents);\n  if (totalKeyInputTestCases == -1) return;\n  let keyInputTestCaseIndex = 1;\n  try {\n    /*for (let i = 0; i < clickSelections.length; ++i) {\r\n        if (i == 0) checkReactionOfSingleClickSelection(clickSelections[i][0], clickSelections[i][1], atomicTurn, true);\r\n        else checkReactionOfSingleClickSelection(clickSelections[i][0], clickSelections[i][1], atomicTurn);\r\n    }*/\n    for (let i = 0; i < clickSelections.length; ++i) {\n      if (i == 0) checkReactionOfDoubleClickSelection(i + 1, clickSelections[i], atomicTurn, true, clickSelections.length);else checkReactionOfDoubleClickSelection(i + 1, clickSelections[i], atomicTurn, false, clickSelections.length);\n      if (i < textEntries.length) checkReactionOfTextChange(i + 1, [...clickSelections[i], textEntries[i]], atomicTurn, false, clickSelections.length);\n    }\n    let keyState = new Set();\n    for (let i = 0; i < keyEvents.length; ++i) {\n      for (let j = 0; j < keyEvents[i].length; ++j) {\n        if (i == 0 && j == 0) checkReactionOfKeyInput(keyInputTestCaseIndex, keyEvents[i][j], keyState, atomicTurn, true, totalKeyInputTestCases);else checkReactionOfKeyInput(++keyInputTestCaseIndex, keyEvents[i][j], keyState, atomicTurn, false, totalKeyInputTestCases);\n      }\n    }\n    for (let i = 0; i < resizeEvents.length; ++i) {\n      let chosenCells = [];\n      if (resizeEvents[i][0] == X_AXIS) resizeEvents[i][1].map(cellNum => chosenCells.push(axisCellsX[cellNum]));else if (resizeEvents[i][0] == Y_AXIS) resizeEvents[i][1].map(cellNum => chosenCells.push(axisCellsY[cellNum]));\n      if (i == 0) checkReactionOfResizing(i + 1, [chosenCells, resizeEvents[i][2]], atomicTurn, true, resizeEvents.length);else checkReactionOfResizing(i + 1, [chosenCells, resizeEvents[i][2]], atomicTurn, false, resizeEvents.length);\n    }\n    keyInputTestCaseIndex = 1;\n    keyState = new Set();\n    for (let i = 0; i < keyEvents.length; ++i) {\n      for (let j = 0; j < keyEvents[i].length; ++j) {\n        if (i == 0 && j == 0) checkReactionOfKeyInput(keyInputTestCaseIndex, keyEvents[i][j], keyState, atomicTurn, true, totalKeyInputTestCases);else checkReactionOfKeyInput(++keyInputTestCaseIndex, keyEvents[i][j], keyState, atomicTurn, false, totalKeyInputTestCases);\n      }\n    }\n    let timer = setInterval(() => {\n      if (atomicTurn.current == atomicTurn.nextAvailable) {\n        let testNum = document.querySelector('#testConsoleStatus').innerHTML.match(/(\\d+)/)[0];\n        document.querySelector('#testConsoleStatus').innerHTML = parseInt(testNum, 10) + 1 + ' SUCCESS';\n        clearInterval(timer);\n      }\n    }, 500);\n  } catch (e) {\n    console.log('Error: ' + e);\n  }\n}\nexport default endToEnd;","map":{"version":3,"names":["checkReactionOfResizing","checkReactionOfTextChange","validateSequence","checkReactionOfKeyInput","checkReactionOfSingleClickSelection","checkReactionOfDoubleClickSelection","UNDO_DISPATCH","UNDO_FINISH","REDO_DISPATCH","REDO_FINISH","FLUFF_FULL","X_AXIS","Y_AXIS","endToEnd","atomicTurn","axisCellsX","document","querySelectorAll","axisCellsY","resizeEvents","keyEvents","clickSelections","textEntries","totalKeyInputTestCases","keyInputTestCaseIndex","i","length","keyState","Set","j","chosenCells","map","cellNum","push","timer","setInterval","current","nextAvailable","testNum","querySelector","innerHTML","match","parseInt","clearInterval","e","console","log"],"sources":["C:/Users/rband/Desktop/SpreadsheetPanel/client/src/tests/endToEnd.js"],"sourcesContent":["import { checkReactionOfResizing } from \"../components/TablePanel/handlers/resizingHandler/test\";\r\nimport { checkReactionOfTextChange } from \"../components/TablePanel/handlers/cellHandler/textChangeHandler/test\";\r\nimport { validateSequence, checkReactionOfKeyInput } from \"../components/SpreadSheetPanel/handlers/keyboardEvents/test\";\r\nimport { checkReactionOfSingleClickSelection, checkReactionOfDoubleClickSelection } from \"../components/TablePanel/handlers/cellHandler/selectionHandler/test\";\r\nimport { UNDO_DISPATCH, UNDO_FINISH, REDO_DISPATCH, REDO_FINISH, FLUFF_FULL } from './../components/SpreadSheetPanel/handlers/keyboardEvents/keyMacros.js'\r\n\r\nconst X_AXIS = 'X_AXIS';\r\nconst Y_AXIS = 'Y_AXIS';\r\n\r\nfunction endToEnd(atomicTurn) {\r\n\r\n    // sequence of atomic tests\r\n    let axisCellsX = document.querySelectorAll('.AxisX');\r\n    let axisCellsY = document.querySelectorAll('.AxisY');\r\n    let resizeEvents = [[Y_AXIS, [1, 2, 3], 20], [Y_AXIS, [2, 5, 6], 10], [Y_AXIS, [1, 2, 3], -10], [X_AXIS, [2, 5, 6], -20]];\r\n    let keyEvents = [UNDO_DISPATCH, UNDO_FINISH, UNDO_DISPATCH, UNDO_FINISH, REDO_DISPATCH, REDO_FINISH, REDO_DISPATCH, REDO_FINISH, REDO_DISPATCH, REDO_FINISH, FLUFF_FULL];\r\n    let clickSelections = [[4, 5], [1, 1], [3, 7], [8, 2], [2, 4]];\r\n    let textEntries = ['blah', 'burger', 'hello', 'world', 'apple', 'fun'];\r\n\r\n    let totalKeyInputTestCases = validateSequence(keyEvents);\r\n    if (totalKeyInputTestCases == -1) return;\r\n    let keyInputTestCaseIndex = 1;\r\n    try {\r\n        /*for (let i = 0; i < clickSelections.length; ++i) {\r\n            if (i == 0) checkReactionOfSingleClickSelection(clickSelections[i][0], clickSelections[i][1], atomicTurn, true);\r\n            else checkReactionOfSingleClickSelection(clickSelections[i][0], clickSelections[i][1], atomicTurn);\r\n        }*/\r\n        for (let i = 0; i < clickSelections.length; ++i) {\r\n            if (i == 0) checkReactionOfDoubleClickSelection(i + 1, clickSelections[i], atomicTurn, true, clickSelections.length);\r\n            else checkReactionOfDoubleClickSelection(i + 1, clickSelections[i], atomicTurn, false, clickSelections.length);\r\n            if (i < textEntries.length) checkReactionOfTextChange(i + 1, [...clickSelections[i], textEntries[i]], atomicTurn, false, clickSelections.length)\r\n        }\r\n        let keyState = new Set();\r\n        for (let i = 0; i < keyEvents.length; ++i) {\r\n            for (let j = 0; j < keyEvents[i].length; ++j) {\r\n                if (i == 0 && j == 0) checkReactionOfKeyInput(keyInputTestCaseIndex, keyEvents[i][j], keyState, atomicTurn, true, totalKeyInputTestCases);\r\n                else checkReactionOfKeyInput(++keyInputTestCaseIndex, keyEvents[i][j], keyState, atomicTurn, false, totalKeyInputTestCases);\r\n            }\r\n        }\r\n        for (let i = 0; i < resizeEvents.length; ++i) {\r\n            let chosenCells = [];\r\n            if (resizeEvents[i][0] == X_AXIS) resizeEvents[i][1].map(cellNum => chosenCells.push(axisCellsX[cellNum]))\r\n            else if (resizeEvents[i][0] == Y_AXIS) resizeEvents[i][1].map(cellNum => chosenCells.push(axisCellsY[cellNum]))\r\n            if (i == 0) checkReactionOfResizing(i + 1, [chosenCells, resizeEvents[i][2]], atomicTurn, true, resizeEvents.length);\r\n            else checkReactionOfResizing(i + 1, [chosenCells, resizeEvents[i][2]], atomicTurn, false, resizeEvents.length);\r\n        }\r\n        keyInputTestCaseIndex = 1;\r\n        keyState = new Set();\r\n        for (let i = 0; i < keyEvents.length; ++i) {\r\n            for (let j = 0; j < keyEvents[i].length; ++j) {\r\n                if (i == 0 && j == 0) checkReactionOfKeyInput(keyInputTestCaseIndex, keyEvents[i][j], keyState, atomicTurn, true, totalKeyInputTestCases);\r\n                else checkReactionOfKeyInput(++keyInputTestCaseIndex, keyEvents[i][j], keyState, atomicTurn, false, totalKeyInputTestCases);\r\n            }\r\n        }\r\n        let timer = setInterval(() => {\r\n            if (atomicTurn.current == atomicTurn.nextAvailable) {\r\n                let testNum = document.querySelector('#testConsoleStatus').innerHTML.match(/(\\d+)/)[0];\r\n                document.querySelector('#testConsoleStatus').innerHTML = parseInt(testNum, 10) + 1 + ' SUCCESS';\r\n                clearInterval(timer);\r\n            }\r\n        }, 500)\r\n    } catch (e) {\r\n        console.log('Error: ' + e);\r\n    }\r\n}\r\n\r\nexport default endToEnd;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}