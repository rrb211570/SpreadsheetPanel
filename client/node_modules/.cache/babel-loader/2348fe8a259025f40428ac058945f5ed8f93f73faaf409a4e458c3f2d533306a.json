{"ast":null,"code":"import { compareDOM, compareStore, logError, logSuccess } from '../../../../tests/helper.js';\nimport { getInLine, nextTurn } from '../../../../tests/sequenceHelpers.js';\nimport { store } from './../../../../store/store.js';\nimport { updateFontFamily } from './FontFamily.js';\nconst WAIT_IN_QUEUE = -1;\nconst ARRANGE = 0;\nconst ACTION_SELECT_CELL = 1;\nconst ACTION_CHANGE_FONT_FAMILY = 2;\nconst ASSERT = 3;\nfunction fontFamilyTest(turn) {\n  let changes = [[4, 5, 'Times New Roman'], [1, 2, 'Ebrima'], [3, 7, 'Century Gothic'], [8, 2, 'Times New Roman'], [2, 4, 'Times New Roman']];\n  if (changes.length > 0) checkReactionOfFontFamily(1, changes[0], turn, true, changes.length);\n  for (let i = 1; i < changes.length; ++i) checkReactionOfFontFamily(i + 1, changes[i], turn, false, changes.length);\n}\nfunction checkReactionOfFontFamily(testCaseIndex, testDetails, turn, isFirstCall, totalTestCases) {\n  let [selectedRowNum, selectedColNum, newFontFamily] = testDetails;\n  let cellValue = document.querySelector(`.row${selectedRowNum}.col${selectedColNum}>.cellValueDiv>.cellValue`);\n  let myTurnNumber = getInLine(turn);\n  let stage = WAIT_IN_QUEUE;\n  let prevFontFamily;\n  let prevState;\n  let prevHistoryIndex;\n  let timer = setInterval(() => {\n    try {\n      switch (stage) {\n        case WAIT_IN_QUEUE:\n          if (turn.current == myTurnNumber) {\n            if (isFirstCall) console.log('\\n--------FONT FAMILY TEST--------------------');\n            stage = ARRANGE;\n          }\n          break;\n        case ARRANGE:\n          let history = store.getState().history;\n          // arrange\n          prevFontFamily = cellValue.style.fontFamily;\n          prevState = history.changeHistory[history.changeHistoryIndex];\n          prevHistoryIndex = history.changeHistoryIndex;\n        case ACTION_SELECT_CELL:\n          // select cell\n          let cell = document.querySelector(`.row${selectedRowNum}.col${selectedColNum} .coverDiv`);\n          cell.dispatchEvent(new MouseEvent('mousedown', {\n            bubbles: true,\n            cancelable: true,\n            clientX: 0\n          }));\n          stage = ACTION_CHANGE_FONT_FAMILY;\n          break;\n        case ACTION_CHANGE_FONT_FAMILY:\n          // trigger click event on fontFamilyBtn\n          let selectionEntries = store.getState().selection.entries;\n          updateFontFamily(selectionEntries, prevFontFamily, newFontFamily);\n          stage = ASSERT;\n          break;\n        case ASSERT:\n          let prevPropertyObj = {\n            fontFamily: prevFontFamily\n          };\n          let propertyObj = {\n            fontFamily: newFontFamily\n          };\n          compareDOM(selectedRowNum, selectedColNum, propertyObj);\n          compareStore(selectedRowNum, selectedColNum, prevPropertyObj, propertyObj, prevState, prevHistoryIndex);\n          console.log('fontFamily affects store and DOM correctly');\n          if (testCaseIndex == totalTestCases) logSuccess('fontFamilyTest()', totalTestCases);\n          nextTurn(turn);\n          clearInterval(timer);\n          break;\n      }\n    } catch (e) {\n      let errMsg = 'Err: checkReactionOfFontFamily(): { testCaseIndex: ' + testCaseIndex + ', rowNum: ' + selectedRowNum + ', colNum: ' + selectedColNum + ', newFontFamily: ' + newFontFamily + ' } :\\n' + e;\n      console.log(errMsg);\n      logError(errMsg);\n      clearInterval(timer);\n    }\n  }, 200);\n}\nexport { fontFamilyTest, checkReactionOfFontFamily };","map":{"version":3,"names":["compareDOM","compareStore","logError","logSuccess","getInLine","nextTurn","store","updateFontFamily","WAIT_IN_QUEUE","ARRANGE","ACTION_SELECT_CELL","ACTION_CHANGE_FONT_FAMILY","ASSERT","fontFamilyTest","turn","changes","length","checkReactionOfFontFamily","i","testCaseIndex","testDetails","isFirstCall","totalTestCases","selectedRowNum","selectedColNum","newFontFamily","cellValue","document","querySelector","myTurnNumber","stage","prevFontFamily","prevState","prevHistoryIndex","timer","setInterval","current","console","log","history","getState","style","fontFamily","changeHistory","changeHistoryIndex","cell","dispatchEvent","MouseEvent","bubbles","cancelable","clientX","selectionEntries","selection","entries","prevPropertyObj","propertyObj","clearInterval","e","errMsg"],"sources":["C:/Users/rband/Desktop/SpreadsheetPanel/client/src/components/FormatPanel/components/FontFamily/test.js"],"sourcesContent":["import { compareDOM, compareStore, logError, logSuccess } from '../../../../tests/helper.js';\r\nimport { getInLine, nextTurn } from '../../../../tests/sequenceHelpers.js'\r\nimport { store } from './../../../../store/store.js'\r\nimport { updateFontFamily } from './FontFamily.js';\r\n\r\nconst WAIT_IN_QUEUE = -1;\r\nconst ARRANGE = 0;\r\nconst ACTION_SELECT_CELL = 1\r\nconst ACTION_CHANGE_FONT_FAMILY = 2;\r\nconst ASSERT = 3;\r\n\r\nfunction fontFamilyTest(turn) {\r\n    let changes = [[4, 5, 'Times New Roman'], [1, 2, 'Ebrima'], [3, 7, 'Century Gothic'], [8, 2, 'Times New Roman'], [2, 4, 'Times New Roman']];\r\n    if (changes.length > 0) checkReactionOfFontFamily(1, changes[0], turn, true, changes.length);\r\n    for (let i = 1; i < changes.length; ++i) checkReactionOfFontFamily(i + 1, changes[i], turn, false, changes.length);\r\n}\r\n\r\nfunction checkReactionOfFontFamily(testCaseIndex, testDetails, turn, isFirstCall, totalTestCases) {\r\n    let [selectedRowNum, selectedColNum, newFontFamily] = testDetails;\r\n    let cellValue = document.querySelector(`.row${selectedRowNum}.col${selectedColNum}>.cellValueDiv>.cellValue`);\r\n    let myTurnNumber = getInLine(turn);\r\n    let stage = WAIT_IN_QUEUE;\r\n    let prevFontFamily;\r\n    let prevState;\r\n    let prevHistoryIndex;\r\n    let timer = setInterval(() => {\r\n        try {\r\n            switch (stage) {\r\n                case WAIT_IN_QUEUE:\r\n                    if (turn.current == myTurnNumber) {\r\n                        if (isFirstCall) console.log('\\n--------FONT FAMILY TEST--------------------');\r\n                        stage = ARRANGE;\r\n                    }\r\n                    break;\r\n                case ARRANGE:\r\n                    let history = store.getState().history;\r\n                    // arrange\r\n                    prevFontFamily = cellValue.style.fontFamily;\r\n                    prevState = history.changeHistory[history.changeHistoryIndex];\r\n                    prevHistoryIndex = history.changeHistoryIndex;\r\n                case ACTION_SELECT_CELL:\r\n                    // select cell\r\n                    let cell = document.querySelector(`.row${selectedRowNum}.col${selectedColNum} .coverDiv`);\r\n                    cell.dispatchEvent(new MouseEvent('mousedown', { bubbles: true, cancelable: true, clientX: 0 }));\r\n                    stage = ACTION_CHANGE_FONT_FAMILY;\r\n                    break;\r\n                case ACTION_CHANGE_FONT_FAMILY:\r\n                    // trigger click event on fontFamilyBtn\r\n                    let selectionEntries = store.getState().selection.entries;\r\n                    updateFontFamily(selectionEntries, prevFontFamily, newFontFamily);\r\n                    stage = ASSERT;\r\n                    break;\r\n                case ASSERT:\r\n                    let prevPropertyObj = { fontFamily: prevFontFamily };\r\n                    let propertyObj = { fontFamily: newFontFamily };\r\n                    compareDOM(selectedRowNum, selectedColNum, propertyObj);\r\n                    compareStore(selectedRowNum, selectedColNum, prevPropertyObj, propertyObj, prevState, prevHistoryIndex);\r\n                    console.log('fontFamily affects store and DOM correctly');\r\n                    if (testCaseIndex == totalTestCases) logSuccess('fontFamilyTest()', totalTestCases);\r\n                    nextTurn(turn);\r\n                    clearInterval(timer);\r\n                    break;\r\n            }\r\n        } catch (e) {\r\n            let errMsg = 'Err: checkReactionOfFontFamily(): { testCaseIndex: ' + testCaseIndex + ', rowNum: ' + selectedRowNum + ', colNum: ' + selectedColNum + ', newFontFamily: ' + newFontFamily + ' } :\\n' + e;\r\n            console.log(errMsg);\r\n            logError(errMsg);\r\n            clearInterval(timer);\r\n        }\r\n    }, 200);\r\n}\r\n\r\nexport { fontFamilyTest, checkReactionOfFontFamily };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}