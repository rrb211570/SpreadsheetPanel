{"ast":null,"code":"import Data from '../data.js';\nfunction updateCollectedData(dataAfterChange, prevCollectedData) {\n  let updatedCollectedData = new Data();\n  for (const [entryKey, data] of dataAfterChange.getIndividualEntries()) {\n    let styleMap = new Map();\n    if (prevCollectedData.hasIndividualEntry(entryKey)) {\n      styleMap = prevCollectedData.getIndividualEntry(entryKey).getStyleMap();\n    }\n    for (const [property, val] of data.getStyleMap().entries()) styleMap.set(property, val);\n    let args = [entryKey, styleMap];\n    if (entryKey != 'table' && !/\\.col\\d+/.test(entryKey)) args.push(data.getRow());\n    if (/\\.col\\d+/.test(entryKey)) {\n      args.push(data.getCellRow(), data.getCellCol());\n      if (prevCollectedData.hasIndividualEntry(entryKey)) args.push(prevCollectedData.getIndividualEntry(entryKey).getVal());else args.push(data.getVal());\n    }\n    updatedCollectedData.setIndividualEntry(...args);\n  }\n  for (const [entryKey, data] of prevCollectedData.getIndividualEntries()) {\n    let args = [entryKey, data.getStyleMap()];\n    if (entryKey != 'table' && !/\\.col\\d+/.test(entryKey)) args.push(data.getRow());\n    if (/\\.col\\d+/.test(entryKey)) args.push(data.getCellRow(), data.getCellCol(), data.getVal());\n    if (!updatedCollectedData.hasIndividualEntry(entryKey)) updatedCollectedData.setIndividualEntry(...args);\n  }\n  // group entries\n  for (const [group, styleMap] of dataAfterChange.getGroupEntries()) {\n    let updatedStyleMap = new Map();\n    if (prevCollectedData.hasGroup(group)) {\n      updatedStyleMap = prevCollectedData.getGroup(group);\n    }\n    for (const [property, val] of styleMap.entries()) updatedStyleMap.set(property, val);\n    updatedCollectedData.setGroup(group, updatedStyleMap);\n  }\n  for (const [group, styleMap] of prevCollectedData.getGroupEntries()) {\n    if (!updatedCollectedData.hasGroup(group)) updatedCollectedData.setGroup(group, styleMap);\n  }\n  return updatedCollectedData;\n}\nexport default updateCollectedData;","map":{"version":3,"names":["Data","updateCollectedData","dataAfterChange","prevCollectedData","updatedCollectedData","entryKey","data","getIndividualEntries","styleMap","Map","hasIndividualEntry","getIndividualEntry","getStyleMap","property","val","entries","set","args","test","push","getRow","getCellRow","getCellCol","getVal","setIndividualEntry","group","getGroupEntries","updatedStyleMap","hasGroup","getGroup","setGroup"],"sources":["C:/Users/rband/Desktop/SpreadsheetPanel/client/src/data/modifiers/updateCollectedData.js"],"sourcesContent":["import Data from '../data.js';\r\n\r\nfunction updateCollectedData(dataAfterChange, prevCollectedData) {\r\n    let updatedCollectedData = new Data();\r\n    for (const [entryKey, data] of dataAfterChange.getIndividualEntries()) {\r\n        let styleMap = new Map();\r\n        if (prevCollectedData.hasIndividualEntry(entryKey)) {\r\n            styleMap = prevCollectedData.getIndividualEntry(entryKey).getStyleMap();\r\n        }\r\n        for (const [property, val] of data.getStyleMap().entries()) styleMap.set(property, val);\r\n        let args = [entryKey, styleMap];\r\n        if (entryKey != 'table' && !/\\.col\\d+/.test(entryKey)) args.push(data.getRow());\r\n        if (/\\.col\\d+/.test(entryKey)) {\r\n            args.push(data.getCellRow(), data.getCellCol());\r\n            if (prevCollectedData.hasIndividualEntry(entryKey)) args.push(prevCollectedData.getIndividualEntry(entryKey).getVal());\r\n            else args.push(data.getVal());\r\n        }\r\n        updatedCollectedData.setIndividualEntry(...args);\r\n    }\r\n    for (const [entryKey, data] of prevCollectedData.getIndividualEntries()) {\r\n        let args = [entryKey, data.getStyleMap()];\r\n        if (entryKey != 'table' && !/\\.col\\d+/.test(entryKey)) args.push(data.getRow());\r\n        if (/\\.col\\d+/.test(entryKey)) args.push(data.getCellRow(), data.getCellCol(), data.getVal());\r\n        if (!updatedCollectedData.hasIndividualEntry(entryKey)) updatedCollectedData.setIndividualEntry(...args)\r\n    }\r\n    // group entries\r\n    for (const [group, styleMap] of dataAfterChange.getGroupEntries()) {\r\n        let updatedStyleMap = new Map();\r\n        if (prevCollectedData.hasGroup(group)) {\r\n            updatedStyleMap = prevCollectedData.getGroup(group);\r\n        }\r\n        for (const [property, val] of styleMap.entries()) updatedStyleMap.set(property, val);\r\n        updatedCollectedData.setGroup(group, updatedStyleMap);\r\n    }\r\n    for (const [group, styleMap] of prevCollectedData.getGroupEntries()) {\r\n        if (!updatedCollectedData.hasGroup(group)) updatedCollectedData.setGroup(group, styleMap)\r\n    }\r\n    return updatedCollectedData;\r\n}\r\nexport default updateCollectedData;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}