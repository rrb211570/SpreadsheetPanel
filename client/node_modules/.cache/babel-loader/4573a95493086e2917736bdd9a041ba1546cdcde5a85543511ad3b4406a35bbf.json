{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport { loadSheet, newHistoryState, undo, redo, clearHistory, save, rollBackAndMerge } from './reducers/historySlice.js';\nimport { setSelection } from './reducers/selectionSlice.js';\nimport { enableTest, trackEvent } from './reducers/keyboardEventsSlice.js';\nimport { setTableDimensions } from './reducers/tableDimensionsSlice.js';\nimport historyReducer from './reducers/historySlice.js';\nimport selectionReducer from './reducers/selectionSlice.js';\nimport keyboardEventsReducer from './reducers/keyboardEventsSlice.js';\nimport tableDimensionsReducer from './reducers/tableDimensionsSlice.js';\nconst mapStateToProps = state => {\n  return {\n    loadedSheet: state.history.loadedSheet,\n    changeHistory: state.history.changeHistory,\n    changeHistoryIndex: state.history.changeHistoryIndex,\n    collectedData: state.history.collectedData,\n    sentData: state.history.sentData,\n    selectionEntries: state.selection.entries,\n    inputMode: state.keyboardEvents.inputMode,\n    enableTest: state.keyboardEvents.enableTest,\n    outcome: state.keyboardEvents.outcome,\n    timeTravelCounter: state.keyboardEvents.timeTravelCounter,\n    tableHeight: state.tableDimensions.height,\n    tableWidth: state.tableDimensions.width\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    loadSheet: sheet => {\n      dispatch(loadSheet(sheet));\n    },\n    newHistoryState: (prevRecordedData, dataAfterChange, collectedData) => {\n      dispatch(newHistoryState(prevRecordedData, dataAfterChange, collectedData));\n    },\n    undo: collectedData => {\n      dispatch(undo(collectedData));\n    },\n    redo: collectedData => {\n      dispatch(redo(collectedData));\n    },\n    clearHistoryState: () => {\n      dispatch(clearHistory());\n    },\n    save: () => {\n      dispatch(save());\n    },\n    rollBackAndMerge: () => {\n      dispatch(rollBackAndMerge());\n    },\n    setSelection: (entries, categories) => {\n      dispatch(setSelection(entries, categories));\n    },\n    enableTest: enableTest => {\n      dispatch(enableTest(enableTest));\n    },\n    trackEvent: (inputMode, outcome, timeTravelCounter) => {\n      dispatch(trackEvent(inputMode, outcome, timeTravelCounter));\n    },\n    setTableDimensions: (height, width) => {\n      dispatch(setTableDimensions(height, width));\n    }\n  };\n};\nconst store = configureStore({\n  reducer: {\n    history: historyReducer,\n    selection: selectionReducer,\n    keyboardEvents: keyboardEventsReducer,\n    tableDimensions: tableDimensionsReducer\n  },\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: {\n      // Ignore these action types\n      ignoredActions: ['history/newHistoryState'],\n      // Ignore these field paths in all actions\n      ignoredActionPaths: ['payload.prevRecordedData', 'payload.collectedData'],\n      // Ignore these paths in the state\n      ignoredPaths: ['history.changeHistory', 'history.collectedData', 'history.sentData', 'selection.entries']\n    }\n  })\n});\nexport { store, mapStateToProps, mapDispatchToProps };","map":{"version":3,"names":["configureStore","loadSheet","newHistoryState","undo","redo","clearHistory","save","rollBackAndMerge","setSelection","enableTest","trackEvent","setTableDimensions","historyReducer","selectionReducer","keyboardEventsReducer","tableDimensionsReducer","mapStateToProps","state","loadedSheet","history","changeHistory","changeHistoryIndex","collectedData","sentData","selectionEntries","selection","entries","inputMode","keyboardEvents","outcome","timeTravelCounter","tableHeight","tableDimensions","height","tableWidth","width","mapDispatchToProps","dispatch","sheet","prevRecordedData","dataAfterChange","clearHistoryState","categories","store","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","ignoredActionPaths","ignoredPaths"],"sources":["C:/Users/rband/Desktop/SpreadsheetPanel/client/src/store/store.js"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit'\r\n\r\nimport { loadSheet, newHistoryState, undo, redo, clearHistory, save, rollBackAndMerge } from './reducers/historySlice.js'\r\nimport { setSelection } from './reducers/selectionSlice.js'\r\nimport { enableTest, trackEvent } from './reducers/keyboardEventsSlice.js'\r\nimport { setTableDimensions } from './reducers/tableDimensionsSlice.js'\r\n\r\nimport historyReducer from './reducers/historySlice.js'\r\nimport selectionReducer from './reducers/selectionSlice.js'\r\nimport keyboardEventsReducer from './reducers/keyboardEventsSlice.js'\r\nimport tableDimensionsReducer from './reducers/tableDimensionsSlice.js'\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        loadedSheet: state.history.loadedSheet,\r\n        changeHistory: state.history.changeHistory,\r\n        changeHistoryIndex: state.history.changeHistoryIndex,\r\n        collectedData: state.history.collectedData,\r\n        sentData: state.history.sentData,\r\n\r\n        selectionEntries: state.selection.entries,\r\n\r\n        inputMode: state.keyboardEvents.inputMode,\r\n        enableTest: state.keyboardEvents.enableTest,\r\n        outcome: state.keyboardEvents.outcome,\r\n        timeTravelCounter: state.keyboardEvents.timeTravelCounter,\r\n\r\n        tableHeight: state.tableDimensions.height,\r\n        tableWidth: state.tableDimensions.width,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        loadSheet: (sheet) => {\r\n            dispatch(loadSheet(sheet));\r\n        },\r\n        newHistoryState: (prevRecordedData, dataAfterChange, collectedData) => {\r\n            dispatch(newHistoryState(prevRecordedData, dataAfterChange, collectedData));\r\n        },\r\n        undo: (collectedData) => {\r\n            dispatch(undo(collectedData));\r\n        },\r\n        redo: (collectedData) => {\r\n            dispatch(redo(collectedData));\r\n        },\r\n        clearHistoryState: () => {\r\n            dispatch(clearHistory());\r\n        },\r\n        save: () => {\r\n            dispatch(save());\r\n        },\r\n        rollBackAndMerge: () => {\r\n            dispatch(rollBackAndMerge());\r\n        },\r\n        setSelection: (entries, categories) => {\r\n            dispatch(setSelection(entries, categories));\r\n        },\r\n        enableTest: (enableTest) => {\r\n            dispatch(enableTest(enableTest));\r\n        },\r\n        trackEvent: (inputMode, outcome, timeTravelCounter) => {\r\n            dispatch(trackEvent(inputMode, outcome, timeTravelCounter))\r\n        },\r\n        setTableDimensions: (height, width) => {\r\n            dispatch(setTableDimensions(height, width));\r\n        },\r\n\r\n    }\r\n};\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        history: historyReducer,\r\n        selection: selectionReducer,\r\n        keyboardEvents: keyboardEventsReducer,\r\n        tableDimensions: tableDimensionsReducer,\r\n    },\r\n    middleware: (getDefaultMiddleware) =>\r\n        getDefaultMiddleware({\r\n            serializableCheck: {\r\n                // Ignore these action types\r\n                ignoredActions: ['history/newHistoryState'],\r\n                // Ignore these field paths in all actions\r\n                ignoredActionPaths: ['payload.prevRecordedData', 'payload.collectedData'],\r\n                // Ignore these paths in the state\r\n                ignoredPaths: ['history.changeHistory', 'history.collectedData', 'history.sentData', 'selection.entries'],\r\n            },\r\n        })\r\n})\r\n\r\nexport { store, mapStateToProps, mapDispatchToProps };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}