{"ast":null,"code":"import { compareDOM, compareStore, logError, logSuccess } from '../../../../tests/helper.js';\nimport { getInLine, nextTurn } from '../../../../tests/sequenceHelpers.js';\nimport { store } from './../../../../store/store.js';\nconst WAIT_IN_QUEUE = -1;\nconst ARRANGE = 0;\nconst ACTION_SELECT_CELL = 1;\nconst ACTION_TOGGLE_BOLD = 2;\nconst ASSERT = 3;\nfunction boldTest(turn) {\n  let changes = [[4, 5], [1, 2], [3, 7], [8, 2], [2, 4]];\n  try {\n    if (changes.length > 0) checkReactionOfBold(1, changes[0], turn, true, changes.length);\n    for (let i = 1; i < changes.length; ++i) checkReactionOfBold(i + 1, changes[i], turn, false, changes.length);\n  } catch (e) {\n    console.log('Error: checkReactionOfBold param error: ' + e);\n    logError(null, null, null, null, e);\n  }\n}\nfunction checkReactionOfBold(testCaseIndex, testDetails, turn, isFirstCall, totalTestCases) {\n  let [selectedRowNum, selectedColNum] = testDetails;\n  let cellValue = document.querySelector(`.row${selectedRowNum}.col${selectedColNum}>.cellValueDiv>.cellValue`);\n  let myTurnNumber = getInLine(turn);\n  let stage = WAIT_IN_QUEUE;\n  let wasPreviouslyBold;\n  let prevState;\n  let prevHistoryIndex;\n  let timer = setInterval(() => {\n    try {\n      switch (stage) {\n        case WAIT_IN_QUEUE:\n          if (turn.current == myTurnNumber) {\n            if (isFirstCall) console.log('\\n--------BOLD TEST--------------------');\n            stage = ARRANGE;\n          }\n          break;\n        case ARRANGE:\n          let history = store.getState().history;\n          wasPreviouslyBold = cellValue.style.fontWeight == 700;\n          prevState = history.changeHistory[history.changeHistoryIndex];\n          prevHistoryIndex = history.changeHistoryIndex;\n        case ACTION_SELECT_CELL:\n          let cell = document.querySelector(`.row${selectedRowNum}.col${selectedColNum} .coverDiv`);\n          cell.dispatchEvent(new MouseEvent('mousedown', {\n            bubbles: true,\n            cancelable: true,\n            clientX: 0\n          }));\n          stage = ACTION_TOGGLE_BOLD;\n          break;\n        case ACTION_TOGGLE_BOLD:\n          let boldBtn = document.querySelector('.bold__btn');\n          boldBtn.dispatchEvent(new MouseEvent('click', {\n            bubbles: true,\n            cancelable: true,\n            clientX: 0\n          }));\n          stage = ASSERT;\n          break;\n        case ASSERT:\n          let prevPropertyObj = {\n            fontWeight: wasPreviouslyBold ? 700 : 400\n          };\n          let propertyObj = {\n            fontWeight: wasPreviouslyBold ? 400 : 700\n          };\n          compareDOM(selectedRowNum, selectedColNum, propertyObj);\n          compareStore(selectedRowNum, selectedColNum, prevPropertyObj, propertyObj, prevState, prevHistoryIndex);\n          console.log('bold affects store and DOM correctly');\n          if (testCaseIndex == totalTestCases) logSuccess('boldTest()', totalTestCases);\n          nextTurn(turn);\n          clearInterval(timer);\n          break;\n      }\n    } catch (e) {\n      let errMsg = 'Err: checkReactionOfBold(): { testCaseIndex: ' + testCaseIndex + ', rowNum: ' + selectedRowNum + ', colNum: ' + selectedColNum + ', toggling bold: ' + (wasPreviouslyBold ? 'off' : 'on') + ' } : ' + e;\n      console.log(errMsg);\n      logError(errMsg);\n      clearInterval(timer);\n    }\n  }, 200);\n}\nexport { boldTest, checkReactionOfBold };","map":{"version":3,"names":["compareDOM","compareStore","logError","logSuccess","getInLine","nextTurn","store","WAIT_IN_QUEUE","ARRANGE","ACTION_SELECT_CELL","ACTION_TOGGLE_BOLD","ASSERT","boldTest","turn","changes","length","checkReactionOfBold","i","e","console","log","testCaseIndex","testDetails","isFirstCall","totalTestCases","selectedRowNum","selectedColNum","cellValue","document","querySelector","myTurnNumber","stage","wasPreviouslyBold","prevState","prevHistoryIndex","timer","setInterval","current","history","getState","style","fontWeight","changeHistory","changeHistoryIndex","cell","dispatchEvent","MouseEvent","bubbles","cancelable","clientX","boldBtn","prevPropertyObj","propertyObj","clearInterval","errMsg"],"sources":["C:/Users/rband/Desktop/SpreadsheetPanel/client/src/components/FormatPanel/components/Bold/test.js"],"sourcesContent":["import { compareDOM, compareStore, logError, logSuccess } from '../../../../tests/helper.js';\r\nimport { getInLine, nextTurn } from '../../../../tests/sequenceHelpers.js'\r\nimport { store } from './../../../../store/store.js'\r\n\r\nconst WAIT_IN_QUEUE = -1;\r\nconst ARRANGE = 0;\r\nconst ACTION_SELECT_CELL = 1\r\nconst ACTION_TOGGLE_BOLD = 2;\r\nconst ASSERT = 3;\r\n\r\nfunction boldTest(turn) {\r\n    let changes = [[4, 5], [1, 2], [3, 7], [8, 2], [2, 4]];\r\n    try {\r\n        if (changes.length > 0) checkReactionOfBold(1, changes[0], turn, true, changes.length);\r\n        for (let i = 1; i < changes.length; ++i) checkReactionOfBold(i + 1, changes[i], turn, false, changes.length);\r\n    } catch (e) {\r\n        console.log('Error: checkReactionOfBold param error: ' + e);\r\n        logError(null, null, null, null, e);\r\n    }\r\n}\r\n\r\nfunction checkReactionOfBold(testCaseIndex, testDetails, turn, isFirstCall, totalTestCases) {\r\n    let [selectedRowNum, selectedColNum] = testDetails;\r\n    let cellValue = document.querySelector(`.row${selectedRowNum}.col${selectedColNum}>.cellValueDiv>.cellValue`);\r\n    let myTurnNumber = getInLine(turn);\r\n    let stage = WAIT_IN_QUEUE;\r\n    let wasPreviouslyBold;\r\n    let prevState;\r\n    let prevHistoryIndex;\r\n    let timer = setInterval(() => {\r\n        try {\r\n            switch (stage) {\r\n                case WAIT_IN_QUEUE:\r\n                    if (turn.current == myTurnNumber) {\r\n                        if (isFirstCall) console.log('\\n--------BOLD TEST--------------------');\r\n                        stage = ARRANGE;\r\n                    }\r\n                    break;\r\n                case ARRANGE:\r\n                    let history = store.getState().history;\r\n                    wasPreviouslyBold = cellValue.style.fontWeight == 700;\r\n                    prevState = history.changeHistory[history.changeHistoryIndex];\r\n                    prevHistoryIndex = history.changeHistoryIndex;\r\n                case ACTION_SELECT_CELL:\r\n                    let cell = document.querySelector(`.row${selectedRowNum}.col${selectedColNum} .coverDiv`);\r\n                    cell.dispatchEvent(new MouseEvent('mousedown', { bubbles: true, cancelable: true, clientX: 0 }));\r\n                    stage = ACTION_TOGGLE_BOLD;\r\n                    break;\r\n                case ACTION_TOGGLE_BOLD:\r\n                    let boldBtn = document.querySelector('.bold__btn');\r\n                    boldBtn.dispatchEvent(new MouseEvent('click', { bubbles: true, cancelable: true, clientX: 0 }));\r\n                    stage = ASSERT;\r\n                    break;\r\n                case ASSERT:\r\n                    let prevPropertyObj = { fontWeight: wasPreviouslyBold ? 700 : 400 };\r\n                    let propertyObj = { fontWeight: wasPreviouslyBold ? 400 : 700 };\r\n                    compareDOM(selectedRowNum, selectedColNum, propertyObj);\r\n                    compareStore(selectedRowNum, selectedColNum, prevPropertyObj, propertyObj, prevState, prevHistoryIndex);\r\n                    console.log('bold affects store and DOM correctly');\r\n                    if (testCaseIndex == totalTestCases) logSuccess('boldTest()', totalTestCases);\r\n                    nextTurn(turn);\r\n                    clearInterval(timer);\r\n                    break;\r\n            }\r\n        } catch (e) {\r\n            let errMsg = 'Err: checkReactionOfBold(): { testCaseIndex: ' + testCaseIndex + ', rowNum: ' + selectedRowNum + ', colNum: ' + selectedColNum + ', toggling bold: ' + (wasPreviouslyBold ? 'off' : 'on') + ' } : ' + e;\r\n            console.log(errMsg);\r\n            logError(errMsg);\r\n            clearInterval(timer);\r\n        }\r\n    }, 200);\r\n}\r\n\r\nexport { boldTest, checkReactionOfBold };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}