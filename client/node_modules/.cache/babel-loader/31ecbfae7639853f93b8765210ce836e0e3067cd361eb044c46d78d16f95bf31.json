{"ast":null,"code":"import { store } from \"../../../../store/store\";\nimport { logError, logSuccess } from \"../../../../tests/helper\";\nimport { getInLine, nextTurn } from \"../../../../tests/sequenceHelpers\";\nimport assembleTableData from './helpers/assembleTableData.js';\nimport { getRowsCols } from './helpers/util.js';\nfunction buildSheetTest(atomicTurn, loadedSheet, rows, cols, defaultCellHeight, defaultCellWidth) {\n  let myTurnNumber = getInLine(atomicTurn);\n  let timer;\n  timer = setInterval(() => {\n    try {\n      if (atomicTurn.current == myTurnNumber) {\n        console.log('\\n--------BUILD TEST-----------------------');\n        let tableData = assembleTableData(loadedSheet, rows, cols, defaultCellHeight, defaultCellWidth);\n        [rows, cols] = [store.getState().tableDimensions.totalRows, store.getState().tableDimensions.totalCols];\n\n        // assert that all axis cells exist\n        let axisCellsX = document.querySelectorAll('.AxisX');\n        let axisCellsY = document.querySelectorAll('.AxisY');\n        if (axisCellsX.length != cols || axisCellsY.length != rows) throw 'incorrect rows/cols in DOM: cols ' + axisCellsX.length + ' rows ' + axisCellsY.length;\n        for (let i = 0; i < rows; ++i) {\n          if (document.querySelectorAll(`.row${i + 1}.entryCell`).length != cols) throw 'incorrect #entryCells for row: ' + i + 1;\n        }\n\n        // assert that each cell has correct value and styling\n        for (let i = 0; i < rows; i++) {\n          for (let j = 0; j < cols; j++) {\n            let entryCell = document.querySelector(`.row${i + 1}.col${j + 1}.entryCell`);\n            let entryCellData = tableData[i][j];\n            if (entryCell.querySelector('input').value != entryCellData.val) throw 'DOM value does not match tableData for cell: row' + (i + 1) + ' col' + (j + 1) + ' ' + entryCellData.val;\n            for (let p = 0; p < entryCellData.styleMap.length; ++p) {\n              switch (entryCellData.styleMap[p][0]) {\n                case 'height':\n                  if (parseInt(entryCell.style.height, 10) != entryCellData.styleMap[p][1]) throw 'DOM cell height does not match tableData: row' + (i + 1) + ' col' + (j + 1);\n                  break;\n                case 'width':\n                  if (parseInt(entryCell.style.width, 10) != entryCellData.styleMap[p][1]) throw 'DOM cell width does not match tableData: row' + (i + 1) + ' col' + (j + 1);\n                  break;\n                case 'marginLeft':\n                  if (parseInt(entryCell.style.marginLeft, 10) != entryCellData.styleMap[p][1]) throw 'DOM cell marginLeft does not match tableData: row' + (i + 1) + ' col' + (j + 1);\n                  break;\n                default:\n                  break;\n              }\n            }\n          }\n        }\n        console.log('buildTest successful');\n        logSuccess('buildTest()', 1);\n        nextTurn(atomicTurn);\n        clearInterval(timer);\n      }\n    } catch (e) {\n      let errMsg = 'Err: buildSheetTest(): ' + e;\n      console.log(errMsg);\n      logError(errMsg);\n      clearInterval(timer);\n    }\n  }, 100);\n}\nexport default buildSheetTest;","map":{"version":3,"names":["store","logError","logSuccess","getInLine","nextTurn","assembleTableData","getRowsCols","buildSheetTest","atomicTurn","loadedSheet","rows","cols","defaultCellHeight","defaultCellWidth","myTurnNumber","timer","setInterval","current","console","log","tableData","getState","tableDimensions","totalRows","totalCols","axisCellsX","document","querySelectorAll","axisCellsY","length","i","j","entryCell","querySelector","entryCellData","value","val","p","styleMap","parseInt","style","height","width","marginLeft","clearInterval","e","errMsg"],"sources":["C:/Users/rband/Desktop/SpreadsheetPanel/client/src/components/TablePanel/helpers/buildSheet/test.js"],"sourcesContent":["import { store } from \"../../../../store/store\";\r\nimport { logError, logSuccess } from \"../../../../tests/helper\";\r\nimport { getInLine, nextTurn } from \"../../../../tests/sequenceHelpers\";\r\nimport assembleTableData from './helpers/assembleTableData.js';\r\nimport { getRowsCols } from './helpers/util.js';\r\n\r\nfunction buildSheetTest(atomicTurn, loadedSheet, rows, cols, defaultCellHeight, defaultCellWidth) {\r\n    let myTurnNumber = getInLine(atomicTurn);\r\n    let timer;\r\n\r\n    timer = setInterval(() => {\r\n        try {\r\n            if (atomicTurn.current == myTurnNumber) {\r\n                console.log('\\n--------BUILD TEST-----------------------');\r\n                let tableData = assembleTableData(loadedSheet, rows, cols, defaultCellHeight, defaultCellWidth);\r\n                [rows, cols] = [store.getState().tableDimensions.totalRows, store.getState().tableDimensions.totalCols];\r\n\r\n                // assert that all axis cells exist\r\n                let axisCellsX = document.querySelectorAll('.AxisX');\r\n                let axisCellsY = document.querySelectorAll('.AxisY');\r\n                if (axisCellsX.length != cols || axisCellsY.length != rows) throw 'incorrect rows/cols in DOM: cols ' + axisCellsX.length + ' rows ' + axisCellsY.length;\r\n                for (let i = 0; i < rows; ++i) {\r\n                    if (document.querySelectorAll(`.row${i + 1}.entryCell`).length != cols) throw 'incorrect #entryCells for row: ' + i + 1;\r\n                }\r\n\r\n                // assert that each cell has correct value and styling\r\n                for (let i = 0; i < rows; i++) {\r\n                    for (let j = 0; j < cols; j++) {\r\n                        let entryCell = document.querySelector(`.row${i + 1}.col${j + 1}.entryCell`);\r\n                        let entryCellData = tableData[i][j];\r\n\r\n                        if (entryCell.querySelector('input').value != entryCellData.val) throw 'DOM value does not match tableData for cell: row' + (i + 1) + ' col' + (j + 1) + ' ' + entryCellData.val;\r\n\r\n                        for (let p = 0; p < entryCellData.styleMap.length; ++p) {\r\n                            switch (entryCellData.styleMap[p][0]) {\r\n                                case 'height':\r\n                                    if (parseInt(entryCell.style.height, 10) != entryCellData.styleMap[p][1]) throw 'DOM cell height does not match tableData: row' + (i + 1) + ' col' + (j + 1);\r\n                                    break;\r\n                                case 'width':\r\n                                    if (parseInt(entryCell.style.width, 10) != entryCellData.styleMap[p][1]) throw 'DOM cell width does not match tableData: row' + (i + 1) + ' col' + (j + 1);\r\n                                    break;\r\n                                case 'marginLeft':\r\n                                    if (parseInt(entryCell.style.marginLeft, 10) != entryCellData.styleMap[p][1]) throw 'DOM cell marginLeft does not match tableData: row' + (i + 1) + ' col' + (j + 1);\r\n                                    break;\r\n                                default: break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                console.log('buildTest successful');\r\n                logSuccess('buildTest()', 1);\r\n                nextTurn(atomicTurn);\r\n                clearInterval(timer);\r\n            }\r\n        } catch (e) {\r\n            let errMsg = 'Err: buildSheetTest(): ' + e;\r\n            console.log(errMsg);\r\n            logError(errMsg);\r\n            clearInterval(timer);\r\n        }\r\n    }, 100);\r\n}\r\n\r\nexport default buildSheetTest;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}