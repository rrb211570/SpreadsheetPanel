{"ast":null,"code":"import { logError, logSuccess } from '../../../../../tests/helper.js';\nimport { getInLine, nextTurn } from '../../../../../tests/sequenceHelpers.js';\nimport { store } from './../../../../../store/store.js';\nconst WAIT_IN_QUEUE = -1;\nconst ARRANGE_AND_ACTION = 0;\nconst ASSERT = 1;\nconst ARRANGE_AND_ACTION_SINGLE_CLICK = 0;\nconst ASSERT_SINGLE_CLICK = 1;\nconst ACTION_DOUBLE_CLICK = 2;\nconst ASSERT_DOUBLE_CLICK = 3;\nfunction selectionTest(atomicTurn) {\n  let selections = [[4, 5], [1, 1], [3, 7], [8, 2], [2, 4]];\n  try {\n    if (selections.length > 0) checkReactionOfDoubleClickSelection(1, selections[0], atomicTurn, true, selections.length);\n    for (let i = 1; i < selections.length; ++i) checkReactionOfDoubleClickSelection(i + 1, selections[i], atomicTurn, false, selections.length);\n  } catch (e) {\n    console.log('Error: checkReactionOfDoubleClickSelection param error: ' + e);\n    logError(null, null, null, e);\n  }\n}\nfunction checkReactionOfSingleClickSelection(testCaseIndex, testDetails, atomicTurn, isFirstCall, totalTestCases) {\n  let [rowNum, colNum] = testDetails;\n  let cell = document.querySelector(`.row${rowNum}.col${colNum} .coverDiv`);\n  let myTurnNumber = getInLine(atomicTurn);\n  let stage = WAIT_IN_QUEUE;\n  let prevSelectionEntries;\n  let expectedSelectionEntries;\n  let timer = setInterval(() => {\n    try {\n      switch (stage) {\n        case WAIT_IN_QUEUE:\n          if (atomicTurn.current == myTurnNumber) {\n            if (isFirstCall) console.log('\\n--------SELECTION TEST (single click)--------------------');\n            stage = ARRANGE_AND_ACTION;\n          }\n          break;\n        case ARRANGE_AND_ACTION:\n          // arrange\n          prevSelectionEntries = store.getState().selection.entries;\n          expectedSelectionEntries = new Set([`${rowNum},${colNum}`]);\n\n          // action\n          cell.focus();\n          cell.dispatchEvent(new MouseEvent('mousedown', {\n            bubbles: true,\n            cancelable: true,\n            clientX: 0\n          }));\n          stage = ASSERT;\n          break;\n        case ASSERT:\n          compareStoreAndDOM_singleClick(prevSelectionEntries, expectedSelectionEntries);\n          console.log('selection (single click) affects store and DOM correctly');\n          if (testCaseIndex == totalTestCases) logSuccess('singleClickSelectionTest', totalTestCases);\n          nextTurn(atomicTurn);\n          clearInterval(timer);\n          break;\n      }\n    } catch (e) {\n      let errMsg = 'Err: checkReactionOfSingleClickSelection(): { testCaseIndex: ' + testCaseIndex + ' } : ' + e;\n      console.log(errMsg);\n      logError(errMsg);\n      clearInterval(timer);\n    }\n  }, 200);\n}\nfunction checkReactionOfDoubleClickSelection(testCaseIndex, testDetails, atomicTurn, isFirstCall, totalTestCases) {\n  let [rowNum, colNum] = testDetails;\n  let cell = document.querySelector(`.row${rowNum}.col${colNum} .coverDiv`);\n  let myTurnNumber = getInLine(atomicTurn);\n  let stage = WAIT_IN_QUEUE;\n  let prevSelectionEntries;\n  let expectedSelectionEntries;\n  let timer = setInterval(() => {\n    try {\n      switch (stage) {\n        case WAIT_IN_QUEUE:\n          if (atomicTurn.current == myTurnNumber) {\n            if (isFirstCall) console.log('\\n--------SELECTION TEST (DOUBLE CLICK)--------------------');\n            stage = ARRANGE_AND_ACTION_SINGLE_CLICK;\n          }\n          break;\n        case ARRANGE_AND_ACTION_SINGLE_CLICK:\n          // arrange\n          prevSelectionEntries = store.getState().selection.entries;\n          expectedSelectionEntries = new Set([`${rowNum},${colNum}`]);\n\n          // action\n          cell.focus();\n          cell.dispatchEvent(new MouseEvent('mousedown', {\n            bubbles: true,\n            cancelable: true,\n            clientX: 0\n          }));\n          stage = ASSERT_SINGLE_CLICK;\n          break;\n        case ASSERT_SINGLE_CLICK:\n          compareStoreAndDOM_singleClick(prevSelectionEntries, expectedSelectionEntries);\n          console.log('selection (single click) affects store and DOM correctly');\n          stage = ACTION_DOUBLE_CLICK;\n          break;\n        case ACTION_DOUBLE_CLICK:\n          cell.dispatchEvent(new MouseEvent('dblclick', {\n            bubbles: true,\n            cancelable: true,\n            clientX: 0\n          }));\n          stage = ASSERT_DOUBLE_CLICK;\n          break;\n        case ASSERT_DOUBLE_CLICK:\n          compareStoreAndDOM_doubleClick(prevSelectionEntries, expectedSelectionEntries);\n          console.log('selection (double click) affects store and DOM correctly');\n          if (testCaseIndex == totalTestCases) logSuccess('doubleClickSelectionTest', totalTestCases);\n          nextTurn(atomicTurn);\n          clearInterval(timer);\n          break;\n        default:\n          break;\n      }\n    } catch (e) {\n      let errMsg = 'Err: checkReactionOfDoubleClickSelection(): { testCaseIndex: ' + testCaseIndex + ' } : ' + e;\n      console.log(errMsg);\n      logError(errMsg);\n      clearInterval(timer);\n    }\n  }, 200);\n}\nfunction compareStoreAndDOM_singleClick(prevSelectionEntries, expectedSelectionEntries) {\n  let currentSelectionEntries = store.getState().selection.entries;\n  assertCurrentSelectionEqualsExpectedSelection(currentSelectionEntries, expectedSelectionEntries);\n  let setDifference = getSetDifference(prevSelectionEntries, currentSelectionEntries);\n  assertSetDifferenceClearedOfHighlights(setDifference);\n  assertCurrentSelectionHighlighted(currentSelectionEntries); // different here\n}\n\nfunction compareStoreAndDOM_doubleClick(prevSelectionEntries, expectedSelectionEntries) {\n  let currentSelectionEntries = store.getState().selection.entries;\n  assertCurrentSelectionEqualsExpectedSelection(currentSelectionEntries, expectedSelectionEntries);\n  let setDifference = getSetDifference(prevSelectionEntries, currentSelectionEntries);\n  assertSetDifferenceClearedOfHighlights(setDifference);\n  assertCurrentSelectionHighlighted(currentSelectionEntries); // different here\n}\n\nfunction assertCurrentSelectionEqualsExpectedSelection(currentSelectionEntries, expectedSelectionEntries) {\n  for (const entry of currentSelectionEntries.values()) {\n    if (!expectedSelectionEntries.has(entry)) throw 'compareStoreAndDOM(): currentSelectionEntries has entry that expectedSelectionEntries does not have';\n  }\n  for (const entry of expectedSelectionEntries.values()) {\n    if (!currentSelectionEntries.has(entry)) throw 'compareStoreAndDOM(): expectedSelectionEntries has entry that currentSelectionEntries does not have';\n  }\n}\nfunction getSetDifference(prevSelectionEntries, currentSelectionEntries) {\n  let setDifference = new Set();\n  for (const entry of prevSelectionEntries.values()) {\n    if (!currentSelectionEntries.has(entry)) setDifference.add(entry);\n  }\n  return setDifference;\n}\nfunction assertSetDifferenceClearedOfHighlights(setDifference) {\n  for (const entry of setDifference.values()) {\n    let rowNum = parseInt(entry.split(',')[0], 10);\n    let colNum = parseInt(entry.split(',')[1], 10);\n    let highlightLayer = document.querySelector(`.row${rowNum}.col${colNum} .coverDiv`);\n    if (highlightLayer.style.boxShadow != 'none') throw 'compareStoreAndDOM(): prevSelectedCell not cleared of highlight: ' + rowNum + ' ' + colNum;\n  }\n}\nfunction assertCurrentSelectionHighlighted(currentSelectionEntries) {\n  for (const entry of currentSelectionEntries.values()) {\n    let rowNum = parseInt(entry.split(',')[0], 10);\n    let colNum = parseInt(entry.split(',')[1], 10);\n    let highlightLayer = document.querySelector(`.row${rowNum}.col${colNum} .coverDiv`);\n    if (highlightLayer.style.boxShadow != 'blue 0px 0px 0px 2px inset') throw 'compareStoreAndDOM(): currentSelectionEntry not highlighted properly ' + rowNum + ' ' + colNum;\n  }\n}\nexport { selectionTest, checkReactionOfSingleClickSelection, checkReactionOfDoubleClickSelection };","map":{"version":3,"names":["logError","logSuccess","getInLine","nextTurn","store","WAIT_IN_QUEUE","ARRANGE_AND_ACTION","ASSERT","ARRANGE_AND_ACTION_SINGLE_CLICK","ASSERT_SINGLE_CLICK","ACTION_DOUBLE_CLICK","ASSERT_DOUBLE_CLICK","selectionTest","atomicTurn","selections","length","checkReactionOfDoubleClickSelection","i","e","console","log","checkReactionOfSingleClickSelection","testCaseIndex","testDetails","isFirstCall","totalTestCases","rowNum","colNum","cell","document","querySelector","myTurnNumber","stage","prevSelectionEntries","expectedSelectionEntries","timer","setInterval","current","getState","selection","entries","Set","focus","dispatchEvent","MouseEvent","bubbles","cancelable","clientX","compareStoreAndDOM_singleClick","clearInterval","errMsg","compareStoreAndDOM_doubleClick","currentSelectionEntries","assertCurrentSelectionEqualsExpectedSelection","setDifference","getSetDifference","assertSetDifferenceClearedOfHighlights","assertCurrentSelectionHighlighted","entry","values","has","add","parseInt","split","highlightLayer","style","boxShadow"],"sources":["C:/Users/rband/Desktop/SpreadsheetPanel/client/src/components/TablePanel/handlers/cellHandler/selectionHandler/test.js"],"sourcesContent":["import { logError, logSuccess } from '../../../../../tests/helper.js';\r\nimport { getInLine, nextTurn } from '../../../../../tests/sequenceHelpers.js'\r\nimport { store } from './../../../../../store/store.js'\r\n\r\nconst WAIT_IN_QUEUE = -1;\r\nconst ARRANGE_AND_ACTION = 0;\r\nconst ASSERT = 1;\r\n\r\nconst ARRANGE_AND_ACTION_SINGLE_CLICK = 0;\r\nconst ASSERT_SINGLE_CLICK = 1;\r\nconst ACTION_DOUBLE_CLICK = 2;\r\nconst ASSERT_DOUBLE_CLICK = 3;\r\n\r\nfunction selectionTest(atomicTurn) {\r\n    let selections = [[4, 5], [1, 1], [3, 7], [8, 2], [2, 4]];\r\n    try {\r\n        if (selections.length > 0) checkReactionOfDoubleClickSelection(1, selections[0], atomicTurn, true, selections.length);\r\n        for (let i = 1; i < selections.length; ++i) checkReactionOfDoubleClickSelection(i + 1, selections[i], atomicTurn, false, selections.length);\r\n    } catch (e) {\r\n        console.log('Error: checkReactionOfDoubleClickSelection param error: ' + e);\r\n        logError(null, null, null, e);\r\n    }\r\n}\r\n\r\nfunction checkReactionOfSingleClickSelection(testCaseIndex, testDetails, atomicTurn, isFirstCall, totalTestCases) {\r\n    let [rowNum, colNum] = testDetails;\r\n    let cell = document.querySelector(`.row${rowNum}.col${colNum} .coverDiv`);\r\n    let myTurnNumber = getInLine(atomicTurn);\r\n    let stage = WAIT_IN_QUEUE;\r\n    let prevSelectionEntries;\r\n    let expectedSelectionEntries;\r\n    let timer = setInterval(() => {\r\n        try {\r\n            switch (stage) {\r\n                case WAIT_IN_QUEUE:\r\n                    if (atomicTurn.current == myTurnNumber) {\r\n                        if (isFirstCall) console.log('\\n--------SELECTION TEST (single click)--------------------');\r\n                        stage = ARRANGE_AND_ACTION;\r\n                    }\r\n                    break;\r\n                case ARRANGE_AND_ACTION:\r\n                    // arrange\r\n                    prevSelectionEntries = store.getState().selection.entries;\r\n                    expectedSelectionEntries = new Set([`${rowNum},${colNum}`])\r\n\r\n                    // action\r\n                    cell.focus();\r\n                    cell.dispatchEvent(new MouseEvent('mousedown', { bubbles: true, cancelable: true, clientX: 0 }));\r\n\r\n                    stage = ASSERT;\r\n                    break;\r\n                case ASSERT:\r\n                    compareStoreAndDOM_singleClick(prevSelectionEntries, expectedSelectionEntries);\r\n                    console.log('selection (single click) affects store and DOM correctly');\r\n                    if (testCaseIndex == totalTestCases) logSuccess('singleClickSelectionTest', totalTestCases);\r\n                    nextTurn(atomicTurn);\r\n                    clearInterval(timer);\r\n                    break;\r\n            }\r\n        } catch (e) {\r\n            let errMsg = 'Err: checkReactionOfSingleClickSelection(): { testCaseIndex: ' + testCaseIndex + ' } : ' + e;\r\n            console.log(errMsg);\r\n            logError(errMsg);\r\n            clearInterval(timer);\r\n        }\r\n    }, 200);\r\n}\r\n\r\nfunction checkReactionOfDoubleClickSelection(testCaseIndex, testDetails, atomicTurn, isFirstCall, totalTestCases) {\r\n    let [rowNum, colNum] = testDetails;\r\n    let cell = document.querySelector(`.row${rowNum}.col${colNum} .coverDiv`);\r\n    let myTurnNumber = getInLine(atomicTurn);\r\n    let stage = WAIT_IN_QUEUE;\r\n    let prevSelectionEntries;\r\n    let expectedSelectionEntries;\r\n    let timer = setInterval(() => {\r\n        try {\r\n            switch (stage) {\r\n                case WAIT_IN_QUEUE:\r\n                    if (atomicTurn.current == myTurnNumber) {\r\n                        if (isFirstCall) console.log('\\n--------SELECTION TEST (DOUBLE CLICK)--------------------');\r\n                        stage = ARRANGE_AND_ACTION_SINGLE_CLICK;\r\n                    }\r\n                    break;\r\n                case ARRANGE_AND_ACTION_SINGLE_CLICK:\r\n                    // arrange\r\n                    prevSelectionEntries = store.getState().selection.entries;\r\n                    expectedSelectionEntries = new Set([`${rowNum},${colNum}`])\r\n\r\n                    // action\r\n                    cell.focus();\r\n                    cell.dispatchEvent(new MouseEvent('mousedown', { bubbles: true, cancelable: true, clientX: 0 }));\r\n                    stage = ASSERT_SINGLE_CLICK;\r\n                    break;\r\n                case ASSERT_SINGLE_CLICK:\r\n                    compareStoreAndDOM_singleClick(prevSelectionEntries, expectedSelectionEntries);\r\n                    console.log('selection (single click) affects store and DOM correctly');\r\n                    stage = ACTION_DOUBLE_CLICK;\r\n                    break;\r\n                case ACTION_DOUBLE_CLICK:\r\n                    cell.dispatchEvent(new MouseEvent('dblclick', { bubbles: true, cancelable: true, clientX: 0 }));\r\n                    stage = ASSERT_DOUBLE_CLICK;\r\n                    break;\r\n                case ASSERT_DOUBLE_CLICK:\r\n                    compareStoreAndDOM_doubleClick(prevSelectionEntries, expectedSelectionEntries);\r\n                    console.log('selection (double click) affects store and DOM correctly');\r\n                    if (testCaseIndex == totalTestCases) logSuccess('doubleClickSelectionTest', totalTestCases);\r\n                    nextTurn(atomicTurn);\r\n                    clearInterval(timer);\r\n                    break;\r\n                default: break;\r\n            }\r\n        } catch (e) {\r\n            let errMsg = 'Err: checkReactionOfDoubleClickSelection(): { testCaseIndex: ' + testCaseIndex + ' } : ' + e;\r\n            console.log(errMsg);\r\n            logError(errMsg);\r\n            clearInterval(timer);\r\n        }\r\n    }, 200);\r\n}\r\n\r\nfunction compareStoreAndDOM_singleClick(prevSelectionEntries, expectedSelectionEntries) {\r\n    let currentSelectionEntries = store.getState().selection.entries;\r\n    assertCurrentSelectionEqualsExpectedSelection(currentSelectionEntries, expectedSelectionEntries);\r\n    let setDifference = getSetDifference(prevSelectionEntries, currentSelectionEntries);\r\n    assertSetDifferenceClearedOfHighlights(setDifference);\r\n    assertCurrentSelectionHighlighted(currentSelectionEntries); // different here\r\n}\r\n\r\nfunction compareStoreAndDOM_doubleClick(prevSelectionEntries, expectedSelectionEntries) {\r\n    let currentSelectionEntries = store.getState().selection.entries;\r\n    assertCurrentSelectionEqualsExpectedSelection(currentSelectionEntries, expectedSelectionEntries);\r\n    let setDifference = getSetDifference(prevSelectionEntries, currentSelectionEntries);\r\n    assertSetDifferenceClearedOfHighlights(setDifference);\r\n    assertCurrentSelectionHighlighted(currentSelectionEntries); // different here\r\n}\r\n\r\nfunction assertCurrentSelectionEqualsExpectedSelection(currentSelectionEntries, expectedSelectionEntries) {\r\n    for (const entry of currentSelectionEntries.values()) {\r\n        if (!expectedSelectionEntries.has(entry)) throw 'compareStoreAndDOM(): currentSelectionEntries has entry that expectedSelectionEntries does not have';\r\n    }\r\n    for (const entry of expectedSelectionEntries.values()) {\r\n        if (!currentSelectionEntries.has(entry)) throw 'compareStoreAndDOM(): expectedSelectionEntries has entry that currentSelectionEntries does not have';\r\n    }\r\n}\r\n\r\nfunction getSetDifference(prevSelectionEntries, currentSelectionEntries) {\r\n    let setDifference = new Set();\r\n    for (const entry of prevSelectionEntries.values()) {\r\n        if (!currentSelectionEntries.has(entry)) setDifference.add(entry);\r\n    }\r\n    return setDifference;\r\n}\r\n\r\nfunction assertSetDifferenceClearedOfHighlights(setDifference) {\r\n    for (const entry of setDifference.values()) {\r\n        let rowNum = parseInt(entry.split(',')[0], 10);\r\n        let colNum = parseInt(entry.split(',')[1], 10);\r\n        let highlightLayer = document.querySelector(`.row${rowNum}.col${colNum} .coverDiv`);\r\n        if (highlightLayer.style.boxShadow != 'none') throw 'compareStoreAndDOM(): prevSelectedCell not cleared of highlight: ' + rowNum + ' ' + colNum;\r\n    }\r\n}\r\n\r\nfunction assertCurrentSelectionHighlighted(currentSelectionEntries) {\r\n    for (const entry of currentSelectionEntries.values()) {\r\n        let rowNum = parseInt(entry.split(',')[0], 10);\r\n        let colNum = parseInt(entry.split(',')[1], 10);\r\n        let highlightLayer = document.querySelector(`.row${rowNum}.col${colNum} .coverDiv`);\r\n        if (highlightLayer.style.boxShadow != 'blue 0px 0px 0px 2px inset') throw 'compareStoreAndDOM(): currentSelectionEntry not highlighted properly ' + rowNum + ' ' + colNum;\r\n    }\r\n}\r\n\r\nexport { selectionTest, checkReactionOfSingleClickSelection, checkReactionOfDoubleClickSelection };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}