{"ast":null,"code":"import { compareDOM, compareStore, logError, logSuccess } from '../../../../tests/helper.js';\nimport { getInLine, nextTurn } from '../../../../tests/sequenceHelpers.js';\nimport { store } from '../../../../store/store.js';\nimport { parseVerticalAlignment, updateVerticalAlignment } from './VerticalAlignment.js';\nconst WAIT_IN_QUEUE = -1;\nconst ARRANGE = 0;\nconst ACTION_SELECT_CELL = 1;\nconst ACTION_CHANGE_VERTICAL_ALIGNMENT = 2;\nconst ASSERT = 3;\nfunction verticalAlignmentTest(turn) {\n  let changes = [[4, 5, 'top'], [1, 2, 'center'], [3, 7, 'bottom'], [8, 2, 'top'], [2, 4, 'bottom']];\n  if (changes.length > 0) checkReactionOfVerticalAlignment(1, changes[0], turn, true, changes.length);\n  for (let i = 1; i < changes.length; ++i) checkReactionOfVerticalAlignment(i + 1, changes[i], turn, false, changes.length);\n}\nfunction checkReactionOfVerticalAlignment(testCaseIndex, testDetails, turn, isFirstCall, totalTestCases) {\n  let [selectedRowNum, selectedColNum, newVerticalAlignment] = testDetails;\n  let cellValue = document.querySelector(`.row${selectedRowNum}.col${selectedColNum}>.cellValueDiv>.cellValue`);\n  let myTurnNumber = getInLine(turn);\n  let stage = WAIT_IN_QUEUE;\n  let prevVerticalAlignment;\n  let prevState;\n  let prevHistoryIndex;\n  let timer = setInterval(() => {\n    try {\n      switch (stage) {\n        case WAIT_IN_QUEUE:\n          if (turn.current == myTurnNumber) {\n            if (isFirstCall) console.log('\\n--------VERTICAL ALIGNMENT TEST--------------------');\n            stage = ARRANGE;\n          }\n          break;\n        case ARRANGE:\n          let history = store.getState().history;\n          // arrange\n          prevVerticalAlignment = cellValue.style.textAlign;\n          prevState = history.changeHistory[history.changeHistoryIndex];\n          prevHistoryIndex = history.changeHistoryIndex;\n        case ACTION_SELECT_CELL:\n          // select cell\n          let cell = document.querySelector(`.row${selectedRowNum}.col${selectedColNum} .coverDiv`);\n          cell.dispatchEvent(new MouseEvent('mousedown', {\n            bubbles: true,\n            cancelable: true,\n            clientX: 0\n          }));\n          stage = ACTION_CHANGE_VERTICAL_ALIGNMENT;\n          break;\n        case ACTION_CHANGE_VERTICAL_ALIGNMENT:\n          let selectionEntries = store.getState().selection.entries;\n          updateVerticalAlignment(selectionEntries, prevVerticalAlignment, newVerticalAlignment);\n          stage = ASSERT;\n          break;\n        case ASSERT:\n          let prevPropertyObj = {\n            verticalAlignment: prevVerticalAlignment\n          };\n          let propertyObj = {\n            verticalAlignment: newVerticalAlignment\n          };\n          let propertyObjDOM = {\n            verticalAlignment: parseVerticalAlignment(newVerticalAlignment)\n          };\n          compareDOM(selectedRowNum, selectedColNum, propertyObjDOM);\n          compareStore(selectedRowNum, selectedColNum, prevPropertyObj, propertyObj, prevState, prevHistoryIndex);\n          console.log(' verticalAlignment affects store and DOM correctly');\n          if (testCaseIndex == totalTestCases) logSuccess('verticalAlignmentTest()', totalTestCases);\n          nextTurn(turn);\n          clearInterval(timer);\n          break;\n      }\n    } catch (e) {\n      let errMsg = 'Err: checkReactionOfVerticalAlignment(): { testCaseIndex: ' + testCaseIndex + ', rowNum: ' + selectedRowNum + ', colNum: ' + selectedColNum + ', newVerticalAlignment: ' + newVerticalAlignment + ' } :\\n' + e;\n      console.log(errMsg);\n      logError(errMsg);\n      clearInterval(timer);\n    }\n  }, 200);\n}\nexport { verticalAlignmentTest, checkReactionOfVerticalAlignment };","map":{"version":3,"names":["compareDOM","compareStore","logError","logSuccess","getInLine","nextTurn","store","parseVerticalAlignment","updateVerticalAlignment","WAIT_IN_QUEUE","ARRANGE","ACTION_SELECT_CELL","ACTION_CHANGE_VERTICAL_ALIGNMENT","ASSERT","verticalAlignmentTest","turn","changes","length","checkReactionOfVerticalAlignment","i","testCaseIndex","testDetails","isFirstCall","totalTestCases","selectedRowNum","selectedColNum","newVerticalAlignment","cellValue","document","querySelector","myTurnNumber","stage","prevVerticalAlignment","prevState","prevHistoryIndex","timer","setInterval","current","console","log","history","getState","style","textAlign","changeHistory","changeHistoryIndex","cell","dispatchEvent","MouseEvent","bubbles","cancelable","clientX","selectionEntries","selection","entries","prevPropertyObj","verticalAlignment","propertyObj","propertyObjDOM","clearInterval","e","errMsg"],"sources":["C:/Users/rband/Desktop/SpreadsheetPanel/client/src/components/FormatPanel/components/VerticalAlignment/test.js"],"sourcesContent":["import { compareDOM, compareStore, logError, logSuccess } from '../../../../tests/helper.js';\r\nimport { getInLine, nextTurn } from '../../../../tests/sequenceHelpers.js'\r\nimport { store } from '../../../../store/store.js'\r\nimport { parseVerticalAlignment, updateVerticalAlignment } from './VerticalAlignment.js';\r\n\r\nconst WAIT_IN_QUEUE = -1;\r\nconst ARRANGE = 0;\r\nconst ACTION_SELECT_CELL = 1\r\nconst ACTION_CHANGE_VERTICAL_ALIGNMENT = 2;\r\nconst ASSERT = 3;\r\n\r\nfunction verticalAlignmentTest(turn) {\r\n    let changes = [[4, 5, 'top'], [1, 2, 'center'], [3, 7, 'bottom'], [8, 2, 'top'], [2, 4, 'bottom']];\r\n    if (changes.length > 0) checkReactionOfVerticalAlignment(1, changes[0], turn, true, changes.length);\r\n    for (let i = 1; i < changes.length; ++i) checkReactionOfVerticalAlignment(i + 1, changes[i], turn, false, changes.length);\r\n}\r\n\r\nfunction checkReactionOfVerticalAlignment(testCaseIndex, testDetails, turn, isFirstCall, totalTestCases) {\r\n    let [selectedRowNum, selectedColNum, newVerticalAlignment] = testDetails;\r\n    let cellValue = document.querySelector(`.row${selectedRowNum}.col${selectedColNum}>.cellValueDiv>.cellValue`);\r\n    let myTurnNumber = getInLine(turn);\r\n    let stage = WAIT_IN_QUEUE;\r\n    let prevVerticalAlignment;\r\n    let prevState;\r\n    let prevHistoryIndex;\r\n    let timer = setInterval(() => {\r\n        try {\r\n            switch (stage) {\r\n                case WAIT_IN_QUEUE:\r\n                    if (turn.current == myTurnNumber) {\r\n                        if (isFirstCall) console.log('\\n--------VERTICAL ALIGNMENT TEST--------------------');\r\n                        stage = ARRANGE;\r\n                    }\r\n                    break;\r\n                case ARRANGE:\r\n                    let history = store.getState().history;\r\n                    // arrange\r\n                    prevVerticalAlignment = cellValue.style.textAlign;\r\n                    prevState = history.changeHistory[history.changeHistoryIndex];\r\n                    prevHistoryIndex = history.changeHistoryIndex;\r\n                case ACTION_SELECT_CELL:\r\n                    // select cell\r\n                    let cell = document.querySelector(`.row${selectedRowNum}.col${selectedColNum} .coverDiv`);\r\n                    cell.dispatchEvent(new MouseEvent('mousedown', { bubbles: true, cancelable: true, clientX: 0 }));\r\n                    stage = ACTION_CHANGE_VERTICAL_ALIGNMENT;\r\n                    break;\r\n                case ACTION_CHANGE_VERTICAL_ALIGNMENT:\r\n                    let selectionEntries = store.getState().selection.entries;\r\n                    updateVerticalAlignment(selectionEntries, prevVerticalAlignment, newVerticalAlignment);\r\n                    stage = ASSERT;\r\n                    break;\r\n                case ASSERT:\r\n                    let prevPropertyObj = { verticalAlignment: prevVerticalAlignment };\r\n                    let propertyObj = { verticalAlignment: newVerticalAlignment };\r\n                    let propertyObjDOM = { verticalAlignment: parseVerticalAlignment(newVerticalAlignment) };\r\n                    compareDOM(selectedRowNum, selectedColNum, propertyObjDOM);\r\n                    compareStore(selectedRowNum, selectedColNum, prevPropertyObj, propertyObj, prevState, prevHistoryIndex);\r\n                    console.log(' verticalAlignment affects store and DOM correctly');\r\n                    if (testCaseIndex == totalTestCases) logSuccess('verticalAlignmentTest()', totalTestCases);\r\n                    nextTurn(turn);\r\n                    clearInterval(timer);\r\n                    break;\r\n            }\r\n        } catch (e) {\r\n            let errMsg = 'Err: checkReactionOfVerticalAlignment(): { testCaseIndex: ' + testCaseIndex + ', rowNum: ' + selectedRowNum + ', colNum: ' + selectedColNum + ', newVerticalAlignment: ' + newVerticalAlignment + ' } :\\n' + e;\r\n            console.log(errMsg);\r\n            logError(errMsg);\r\n            clearInterval(timer);\r\n        }\r\n    }, 200);\r\n}\r\n\r\nexport {  verticalAlignmentTest, checkReactionOfVerticalAlignment };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}