{"ast":null,"code":"import Data from '../../../../data/data.js';\nimport { hasClass } from '../../../../misc/util.js';\nimport recordChange from '../../../../data/modifiers/recordChange.js';\nimport { store } from './../../../../store/store.js';\nimport { setTableDimensions } from '../../../../store/reducers/tableDimensionsSlice.js';\nimport { updateScrollDimensions } from '../scrollSnapHandler/scrollSnapHandler.js';\nfunction applyResizers() {\n  fixResizers('AxisX');\n  fixResizers('AxisY');\n}\nfunction fixResizers(axis) {\n  const axisEntries = [...document.querySelectorAll('.' + axis)];\n  axisEntries.forEach(axisCell => {\n    let resizer = axisCell.querySelector('div');\n    setResizerDimensions(resizer, parseInt(axisCell.style.height, 10), parseInt(axisCell.style.width, 10));\n    if (axis == 'AxisX') createResizableCol(axisCell, resizer);else createResizableRow(axisCell, resizer);\n  });\n}\nfunction createResizableCol(axisCell, resizer) {\n  let x = 0;\n  let w = 0;\n  const colNum = parseInt([...axisCell.classList].filter(name => /^col\\d+$/.test(name))[0].match(/(\\d+)/)[0], 10);\n  let initialTableHeight, initialTableWidth;\n  let dataBeforeChange = new Data();\n  let dataAfterChange = new Data();\n  let colMarginsLeft = [];\n  let changeOccurred = false;\n  const mouseDownHandler = function (e) {\n    let tableDimensions = store.getState().tableDimensions;\n    [initialTableHeight, initialTableWidth] = [tableDimensions.height, tableDimensions.width];\n    document.querySelector(`.AxisX.col${colNum} > .resizer-horizontal`).style.height = `${initialTableHeight}px`;\n    x = e.clientX;\n    w = parseInt(window.getComputedStyle(axisCell).width, 10);\n    dataBeforeChange = getResizableColData(colNum, w, initialTableWidth); // store current state\n    storeColMargins(colMarginsLeft, colNum);\n    document.addEventListener('mousemove', mouseMoveHandler);\n    document.addEventListener('mouseup', mouseUpHandler);\n    resizer.classList.add('resizing-horizontal');\n  };\n\n  // disable resizing if document.width == content.width\n  const mouseMoveHandler = function (e) {\n    changeOccurred = x != e.clientX ? true : false;\n    const dx = w + e.clientX - x < 0 ? -w + 1 : e.clientX - x; // set dx so as to maintain 1 pixel minimum width\n    updateWidths(colNum, w, dx);\n    updateColMargins(colNum + 1, colMarginsLeft, dx);\n    let newTableWidth = initialTableWidth + dx;\n    store.dispatch(setTableDimensions({\n      height: initialTableHeight,\n      width: newTableWidth\n    }));\n  };\n  const mouseUpHandler = function () {\n    document.removeEventListener('mousemove', mouseMoveHandler);\n    document.removeEventListener('mouseup', mouseUpHandler);\n    resizer.classList.remove('resizing-horizontal');\n    resizer.style.height = document.querySelector('.AxisX').style.height;\n    if (changeOccurred) {\n      let newWidth = parseInt(axisCell.style.width, 10);\n      dataAfterChange = getResizableColData(colNum, newWidth, store.getState().tableDimensions.width);\n      recordChange(dataBeforeChange, dataAfterChange);\n      changeOccurred = false;\n    }\n    colMarginsLeft = [];\n    document.querySelector('#scrollBarLayer').style.width = store.getState().tableDimensions.width - 50 + 'px';\n    updateScrollDimensions();\n  };\n  resizer.addEventListener('mousedown', mouseDownHandler);\n}\nfunction createResizableRow(axisCell, resizer) {\n  let y = 0;\n  let h = 0;\n  const rowNum = parseInt([...axisCell.classList].filter(name => /^row\\d+$/.test(name))[0].match(/(\\d+)/)[0], 10);\n  let initialTableHeight, initialTableWidth;\n  let dataBeforeChange = new Data();\n  let dataAfterChange = new Data();\n  let changeOccurred = false;\n  const mouseDownHandler = function (e) {\n    let tableDimensions = store.getState().tableDimensions;\n    [initialTableHeight, initialTableWidth] = [tableDimensions.height, tableDimensions.width];\n    document.querySelector(`.AxisY.row${rowNum} > .resizer-vertical`).style.width = `${initialTableWidth}px`;\n    y = e.clientY;\n    h = parseInt(window.getComputedStyle(axisCell).height, 10);\n    dataBeforeChange = getResizableRowData(rowNum, h, initialTableHeight); // store current state\n    document.addEventListener('mousemove', mouseMoveHandler);\n    document.addEventListener('mouseup', mouseUpHandler);\n    resizer.classList.add('resizing-vertical');\n  };\n\n  // disable resizing if document.width == content.width\n  const mouseMoveHandler = function (e) {\n    changeOccurred = y != e.clientY ? true : false;\n    const dy = h + e.clientY - y < 0 ? -h + 1 : e.clientY - y; // set dy so as to maintain 1 pixel minimum height\n    updateHeights(rowNum, h, dy);\n    let newTableHeight = initialTableHeight + dy;\n    store.dispatch(setTableDimensions({\n      height: newTableHeight,\n      width: initialTableWidth\n    }));\n  };\n  const mouseUpHandler = function () {\n    document.removeEventListener('mousemove', mouseMoveHandler);\n    document.removeEventListener('mouseup', mouseUpHandler);\n    resizer.classList.remove('resizing-vertical');\n    resizer.style.width = document.querySelector('.AxisY').style.width;\n    if (changeOccurred) {\n      let newHeight = parseInt(axisCell.style.height, 10);\n      dataAfterChange = getResizableRowData(rowNum, newHeight, store.getState().tableDimensions.height);\n      recordChange(dataBeforeChange, dataAfterChange);\n      changeOccurred = false;\n    }\n    document.querySelector('#scrollBarLayer').style.height = store.getState().tableDimensions.height - 22 + 'px';\n    updateScrollDimensions();\n  };\n  resizer.addEventListener('mousedown', mouseDownHandler);\n}\n\n//---------------------------------------------------------------\n// ----------- BASEMENT -----------------------------------------\n//---------------------------------------------------------------\n\nfunction setResizerDimensions(resizer, cellHeight, cellWidth) {\n  if (hasClass(resizer, 'resizer-horizontal')) resizer.style.height = `${cellHeight}px`;else resizer.style.width = `${cellWidth}px`;\n}\nfunction getResizableColData(index, width, tableWidth) {\n  let myData = new Data();\n  let groupStyleMap = new Map();\n  groupStyleMap.set('width', width);\n  myData.setGroup(`.col${index}`, groupStyleMap);\n  let individualStyleMap = new Map();\n  individualStyleMap.set('width', tableWidth);\n  myData.setIndividualEntry(`table`, individualStyleMap);\n  return myData;\n}\nfunction getResizableRowData(index, height, tableHeight) {\n  let myData = new Data();\n  let groupStyleMap = new Map();\n  groupStyleMap.set('height', height);\n  myData.setGroup(`.row${index}`, groupStyleMap);\n  let individualStyleMap = new Map();\n  individualStyleMap.set('height', tableHeight);\n  myData.setIndividualEntry(`table`, individualStyleMap);\n  return myData;\n}\nfunction storeColMargins(colMarginsLeft, colNum) {\n  let elem = null;\n  while ((elem = document.querySelector(`.row1.col${++colNum}`)) != null) {\n    colMarginsLeft.push(parseInt(elem.style.marginLeft, 10));\n  }\n}\nfunction updateHeights(rowIndex, height, dy) {\n  let arr = [...document.querySelectorAll(`.row${rowIndex}`)];\n  arr[1].style.lineHeight = height + dy + 'px';\n  arr.forEach((cell, index) => {\n    if (index > 1) {\n      cell.querySelector('.coverDiv').style.height = height + dy + 'px';\n    }\n    cell.style.height = height + dy + 'px';\n  });\n}\nfunction updateWidths(colIndex, width, dx) {\n  let arr = [...document.querySelectorAll(`.col${colIndex}`)];\n  arr.forEach((cell, index) => {\n    cell.style.width = width + dx + 'px';\n    if (index > 0) {\n      cell.querySelector('input').style.width = width + dx - 8 + 'px';\n      cell.querySelector('.coverDiv').style.width = width + dx + 'px';\n    }\n  });\n}\nfunction updateColMargins(colIndex, colMarginsLeft, dx) {\n  let idx = colIndex - 1;\n  let arr = [];\n  while ((arr = [...document.querySelectorAll(`.col${++idx}`)]).length != 0) {\n    arr.forEach(box => {\n      if (box.classList.contains('AxisX')) box.style.marginLeft = colMarginsLeft[idx - colIndex] + dx + 'px';else box.style.marginLeft = colMarginsLeft[idx - colIndex] + dx + 'px';\n    });\n  }\n}\nexport { applyResizers, getResizableColData, getResizableRowData };","map":{"version":3,"names":["Data","hasClass","recordChange","store","setTableDimensions","updateScrollDimensions","applyResizers","fixResizers","axis","axisEntries","document","querySelectorAll","forEach","axisCell","resizer","querySelector","setResizerDimensions","parseInt","style","height","width","createResizableCol","createResizableRow","x","w","colNum","classList","filter","name","test","match","initialTableHeight","initialTableWidth","dataBeforeChange","dataAfterChange","colMarginsLeft","changeOccurred","mouseDownHandler","e","tableDimensions","getState","clientX","window","getComputedStyle","getResizableColData","storeColMargins","addEventListener","mouseMoveHandler","mouseUpHandler","add","dx","updateWidths","updateColMargins","newTableWidth","dispatch","removeEventListener","remove","newWidth","y","h","rowNum","clientY","getResizableRowData","dy","updateHeights","newTableHeight","newHeight","cellHeight","cellWidth","index","tableWidth","myData","groupStyleMap","Map","set","setGroup","individualStyleMap","setIndividualEntry","tableHeight","elem","push","marginLeft","rowIndex","arr","lineHeight","cell","colIndex","idx","length","box","contains"],"sources":["C:/Users/rband/Desktop/SpreadsheetPanel/client/src/components/TablePanel/handlers/resizingHandler/resizingHandler.js"],"sourcesContent":["import Data from '../../../../data/data.js';\r\nimport { hasClass } from '../../../../misc/util.js'\r\nimport recordChange from '../../../../data/modifiers/recordChange.js';\r\nimport { store } from './../../../../store/store.js'\r\nimport { setTableDimensions } from '../../../../store/reducers/tableDimensionsSlice.js'\r\nimport { updateScrollDimensions } from '../scrollSnapHandler/scrollSnapHandler.js';\r\n\r\nfunction applyResizers() {\r\n    fixResizers('AxisX');\r\n    fixResizers('AxisY');\r\n}\r\n\r\nfunction fixResizers(axis) {\r\n    const axisEntries = [...document.querySelectorAll('.' + axis)]\r\n    axisEntries.forEach(axisCell => {\r\n        let resizer = axisCell.querySelector('div');\r\n        setResizerDimensions(resizer, parseInt(axisCell.style.height, 10), parseInt(axisCell.style.width, 10));\r\n        if (axis == 'AxisX') createResizableCol(axisCell, resizer);\r\n        else createResizableRow(axisCell, resizer)\r\n    });\r\n}\r\n\r\nfunction createResizableCol(axisCell, resizer) {\r\n    let x = 0;\r\n    let w = 0;\r\n    const colNum = parseInt([...axisCell.classList].filter(name => /^col\\d+$/.test(name))[0].match(/(\\d+)/)[0], 10);\r\n    let initialTableHeight, initialTableWidth;\r\n    let dataBeforeChange = new Data();\r\n    let dataAfterChange = new Data();\r\n    let colMarginsLeft = [];\r\n    let changeOccurred = false;\r\n\r\n    const mouseDownHandler = function (e) {\r\n        let tableDimensions = store.getState().tableDimensions;\r\n        [initialTableHeight, initialTableWidth] = [tableDimensions.height, tableDimensions.width];\r\n        document.querySelector(`.AxisX.col${colNum} > .resizer-horizontal`).style.height = `${initialTableHeight}px`;\r\n        x = e.clientX;\r\n        w = parseInt(window.getComputedStyle(axisCell).width, 10);\r\n        dataBeforeChange = getResizableColData(colNum, w, initialTableWidth); // store current state\r\n        storeColMargins(colMarginsLeft, colNum);\r\n        document.addEventListener('mousemove', mouseMoveHandler);\r\n        document.addEventListener('mouseup', mouseUpHandler);\r\n        resizer.classList.add('resizing-horizontal');\r\n    };\r\n\r\n    // disable resizing if document.width == content.width\r\n    const mouseMoveHandler = function (e) {\r\n        changeOccurred = x != e.clientX ? true : false;\r\n        const dx = w + e.clientX - x < 0 ? -w + 1 : e.clientX - x; // set dx so as to maintain 1 pixel minimum width\r\n        updateWidths(colNum, w, dx);\r\n        updateColMargins(colNum + 1, colMarginsLeft, dx);\r\n        let newTableWidth = initialTableWidth + dx;\r\n        store.dispatch(setTableDimensions({ height: initialTableHeight, width: newTableWidth }));\r\n    };\r\n\r\n    const mouseUpHandler = function () {\r\n        document.removeEventListener('mousemove', mouseMoveHandler);\r\n        document.removeEventListener('mouseup', mouseUpHandler);\r\n        resizer.classList.remove('resizing-horizontal');\r\n        resizer.style.height = document.querySelector('.AxisX').style.height;\r\n        if (changeOccurred) {\r\n            let newWidth = parseInt(axisCell.style.width, 10);\r\n            dataAfterChange = getResizableColData(colNum, newWidth, store.getState().tableDimensions.width)\r\n            recordChange(dataBeforeChange, dataAfterChange);\r\n            changeOccurred = false;\r\n        }\r\n        colMarginsLeft = [];\r\n        document.querySelector('#scrollBarLayer').style.width = store.getState().tableDimensions.width - 50 + 'px';\r\n        updateScrollDimensions();\r\n    };\r\n\r\n    resizer.addEventListener('mousedown', mouseDownHandler);\r\n}\r\n\r\nfunction createResizableRow(axisCell, resizer) {\r\n    let y = 0;\r\n    let h = 0;\r\n    const rowNum = parseInt([...axisCell.classList].filter(name => /^row\\d+$/.test(name))[0].match(/(\\d+)/)[0], 10);\r\n    let initialTableHeight, initialTableWidth;\r\n    let dataBeforeChange = new Data();\r\n    let dataAfterChange = new Data();\r\n    let changeOccurred = false;\r\n\r\n    const mouseDownHandler = function (e) {\r\n        let tableDimensions = store.getState().tableDimensions;\r\n        [initialTableHeight, initialTableWidth] = [tableDimensions.height, tableDimensions.width];\r\n        document.querySelector(`.AxisY.row${rowNum} > .resizer-vertical`).style.width = `${initialTableWidth}px`;\r\n        y = e.clientY;\r\n        h = parseInt(window.getComputedStyle(axisCell).height, 10);\r\n        dataBeforeChange = getResizableRowData(rowNum, h, initialTableHeight); // store current state\r\n        document.addEventListener('mousemove', mouseMoveHandler);\r\n        document.addEventListener('mouseup', mouseUpHandler);\r\n        resizer.classList.add('resizing-vertical');\r\n    };\r\n\r\n    // disable resizing if document.width == content.width\r\n    const mouseMoveHandler = function (e) {\r\n        changeOccurred = y != e.clientY ? true : false;\r\n        const dy = h + e.clientY - y < 0 ? -h + 1 : e.clientY - y; // set dy so as to maintain 1 pixel minimum height\r\n        updateHeights(rowNum, h, dy);\r\n        let newTableHeight = initialTableHeight + dy;\r\n        store.dispatch(setTableDimensions({ height: newTableHeight, width: initialTableWidth }));\r\n    };\r\n\r\n    const mouseUpHandler = function () {\r\n        document.removeEventListener('mousemove', mouseMoveHandler);\r\n        document.removeEventListener('mouseup', mouseUpHandler);\r\n        resizer.classList.remove('resizing-vertical');\r\n        resizer.style.width = document.querySelector('.AxisY').style.width;\r\n        if (changeOccurred) {\r\n            let newHeight = parseInt(axisCell.style.height, 10);\r\n            dataAfterChange = getResizableRowData(rowNum, newHeight, store.getState().tableDimensions.height);\r\n            recordChange(dataBeforeChange, dataAfterChange);\r\n            changeOccurred = false;\r\n        }\r\n        document.querySelector('#scrollBarLayer').style.height = store.getState().tableDimensions.height - 22 + 'px';\r\n        updateScrollDimensions();\r\n    };\r\n\r\n    resizer.addEventListener('mousedown', mouseDownHandler);\r\n}\r\n\r\n//---------------------------------------------------------------\r\n// ----------- BASEMENT -----------------------------------------\r\n//---------------------------------------------------------------\r\n\r\nfunction setResizerDimensions(resizer, cellHeight, cellWidth) {\r\n    if (hasClass(resizer, 'resizer-horizontal')) resizer.style.height = `${cellHeight}px`;\r\n    else resizer.style.width = `${cellWidth}px`;\r\n}\r\n\r\nfunction getResizableColData(index, width, tableWidth) {\r\n    let myData = new Data();\r\n    let groupStyleMap = new Map();\r\n    groupStyleMap.set('width', width)\r\n    myData.setGroup(`.col${index}`, groupStyleMap);\r\n    let individualStyleMap = new Map();\r\n    individualStyleMap.set('width', tableWidth);\r\n    myData.setIndividualEntry(`table`, individualStyleMap);\r\n    return myData;\r\n}\r\nfunction getResizableRowData(index, height, tableHeight) {\r\n    let myData = new Data();\r\n    let groupStyleMap = new Map();\r\n    groupStyleMap.set('height', height)\r\n    myData.setGroup(`.row${index}`, groupStyleMap);\r\n    let individualStyleMap = new Map();\r\n    individualStyleMap.set('height', tableHeight);\r\n    myData.setIndividualEntry(`table`, individualStyleMap);\r\n    return myData;\r\n}\r\n\r\nfunction storeColMargins(colMarginsLeft, colNum) {\r\n    let elem = null;\r\n    while ((elem = document.querySelector(`.row1.col${++colNum}`)) != null) {\r\n        colMarginsLeft.push(parseInt(elem.style.marginLeft, 10));\r\n    }\r\n}\r\n\r\nfunction updateHeights(rowIndex, height, dy) {\r\n    let arr = [...document.querySelectorAll(`.row${rowIndex}`)];\r\n    arr[1].style.lineHeight = height + dy + 'px';\r\n    arr.forEach((cell, index) => {\r\n        if (index > 1) {\r\n            cell.querySelector('.coverDiv').style.height = height + dy + 'px';\r\n        }\r\n        cell.style.height = height + dy + 'px';\r\n    });\r\n}\r\n\r\nfunction updateWidths(colIndex, width, dx) {\r\n    let arr = [...document.querySelectorAll(`.col${colIndex}`)];\r\n    arr.forEach((cell, index) => {\r\n        cell.style.width = width + dx + 'px';\r\n        if (index > 0) {\r\n            cell.querySelector('input').style.width = width + dx - 8 + 'px';\r\n            cell.querySelector('.coverDiv').style.width = width + dx + 'px';\r\n        }\r\n    });\r\n}\r\n\r\nfunction updateColMargins(colIndex, colMarginsLeft, dx) {\r\n    let idx = colIndex - 1;\r\n    let arr = [];\r\n    while ((arr = [...document.querySelectorAll(`.col${++idx}`)]).length != 0) {\r\n        arr.forEach(box => {\r\n            if (box.classList.contains('AxisX')) box.style.marginLeft = colMarginsLeft[idx - colIndex] + dx + 'px';\r\n            else box.style.marginLeft = colMarginsLeft[idx - colIndex] + dx + 'px';\r\n        });\r\n    }\r\n}\r\n\r\nexport { applyResizers, getResizableColData, getResizableRowData };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}