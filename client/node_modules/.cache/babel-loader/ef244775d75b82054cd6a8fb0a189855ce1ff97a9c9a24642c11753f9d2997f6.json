{"ast":null,"code":"// ----------Possible Tests-=------------\n// TablePanel: BUILD_SHEET, SELECTION, TEXT_CHANGE, RESIZING\n// SpreadSheetPanel: KEY_INPUT\n// MenuPanel: MENU_INTERACTION\n// FormatPanel: BOLD, ITALIC, STRIKETHROUGH, FONT_FAMILY\n// (not implemented) FunctionPanel: FUNCTIONS\n// (not implemented) ChartPanel: BAR, LINE, PIE, DOT\n//\nlet testSequence = new Map([['TablePanel', {\n  turnNumber: 1,\n  tests: new Set(['BUILD_SHEET', 'SELECTION', 'TEXT_CHANGE', 'RESIZING'])\n}], ['SpreadSheetPanel', {\n  turnNumber: 5,\n  tests: new Set([/*'KEY_INPUT'*/])\n}], ['MenuPanel', {\n  turnNumber: 3,\n  tests: new Set([/*'MENU_INTERACTION'*/])\n}], ['FormatPanel', {\n  turnNumber: 2,\n  tests: new Set(['BOLD', 'ITALIC', 'STRIKETHROUGH', 'FONT_FAMILY', 'FONT_SIZE', 'FONT_COLOR', 'CELL_COLOR', 'BORDERS', 'HORIZONTAL_ALIGNMENT', 'VERTICAL_ALIGNMENT'])\n}], ['App', {\n  turnNumber: 4,\n  tests: new Set([/*'END_TO_END'*/])\n}]]);\nlet batchTurn = {\n  current: 1\n};\nfunction getInLine(turn) {\n  let myTurnNumber = turn.nextAvailable++;\n  return myTurnNumber;\n}\nfunction nextTurn(turn) {\n  turn.current++;\n}\nfunction concludeTestingBatch(atomicTurn) {\n  let timer = setInterval(() => {\n    if (atomicTurn.current == atomicTurn.nextAvailable) {\n      // if all turns have finished\n      nextTurn(batchTurn);\n      clearInterval(timer);\n    }\n  }, 100);\n}\nfunction concludeAllTestsWhenDone() {\n  let timer = setInterval(() => {\n    if (batchTurn.current == 6) {\n      let testNum = document.querySelector('#testConsoleStatus').innerHTML.match(/(\\d+)/)[0];\n      document.querySelector('#testConsoleStatus').innerHTML = parseInt(testNum, 10) + 1 + ' SUCCESS';\n      clearInterval(timer);\n    }\n  }, 100);\n}\nexport { batchTurn, testSequence, getInLine, nextTurn, concludeTestingBatch, concludeAllTestsWhenDone };","map":{"version":3,"names":["testSequence","Map","turnNumber","tests","Set","batchTurn","current","getInLine","turn","myTurnNumber","nextAvailable","nextTurn","concludeTestingBatch","atomicTurn","timer","setInterval","clearInterval","concludeAllTestsWhenDone","testNum","document","querySelector","innerHTML","match","parseInt"],"sources":["C:/Users/rband/Desktop/SpreadsheetPanel/client/src/tests/sequenceHelpers.js"],"sourcesContent":["\r\n// ----------Possible Tests-=------------\r\n// TablePanel: BUILD_SHEET, SELECTION, TEXT_CHANGE, RESIZING\r\n// SpreadSheetPanel: KEY_INPUT\r\n// MenuPanel: MENU_INTERACTION\r\n// FormatPanel: BOLD, ITALIC, STRIKETHROUGH, FONT_FAMILY\r\n// (not implemented) FunctionPanel: FUNCTIONS\r\n// (not implemented) ChartPanel: BAR, LINE, PIE, DOT\r\n//\r\nlet testSequence = new Map([\r\n    ['TablePanel', {\r\n        turnNumber: 1,\r\n        tests: new Set(['BUILD_SHEET', 'SELECTION', 'TEXT_CHANGE', 'RESIZING'])\r\n    }],\r\n    ['SpreadSheetPanel', {\r\n        turnNumber: 5,\r\n        tests: new Set([/*'KEY_INPUT'*/])\r\n    }],\r\n    ['MenuPanel', {\r\n        turnNumber: 3,\r\n        tests: new Set([/*'MENU_INTERACTION'*/])\r\n    }],\r\n    ['FormatPanel', {\r\n        turnNumber: 2,\r\n        tests: new Set(['BOLD', 'ITALIC', 'STRIKETHROUGH', 'FONT_FAMILY', 'FONT_SIZE', 'FONT_COLOR', 'CELL_COLOR', 'BORDERS', 'HORIZONTAL_ALIGNMENT', 'VERTICAL_ALIGNMENT'])\r\n    }],\r\n    ['App', {\r\n        turnNumber: 4,\r\n        tests: new Set([/*'END_TO_END'*/])\r\n    }]\r\n]);\r\n\r\nlet batchTurn = { current: 1 };\r\n\r\nfunction getInLine(turn) {\r\n    let myTurnNumber = turn.nextAvailable++;\r\n    return myTurnNumber;\r\n}\r\n\r\nfunction nextTurn(turn) {\r\n    turn.current++;\r\n}\r\n\r\nfunction concludeTestingBatch(atomicTurn) {\r\n    let timer = setInterval(() => {\r\n        if (atomicTurn.current == atomicTurn.nextAvailable) { // if all turns have finished\r\n            nextTurn(batchTurn);\r\n            clearInterval(timer);\r\n        }\r\n    }, 100);\r\n}\r\n\r\nfunction concludeAllTestsWhenDone() {\r\n    let timer = setInterval(() => {\r\n        if (batchTurn.current == 6) {\r\n            let testNum = document.querySelector('#testConsoleStatus').innerHTML.match(/(\\d+)/)[0];\r\n            document.querySelector('#testConsoleStatus').innerHTML = parseInt(testNum, 10) + 1 + ' SUCCESS';\r\n            clearInterval(timer);\r\n        }\r\n    }, 100);\r\n}\r\n\r\nexport { batchTurn, testSequence, getInLine, nextTurn, concludeTestingBatch, concludeAllTestsWhenDone };"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,YAAY,GAAG,IAAIC,GAAG,CAAC,CACvB,CAAC,YAAY,EAAE;EACXC,UAAU,EAAE,CAAC;EACbC,KAAK,EAAE,IAAIC,GAAG,CAAC,CAAC,aAAa,EAAE,WAAW,EAAE,aAAa,EAAE,UAAU,CAAC;AAC1E,CAAC,CAAC,EACF,CAAC,kBAAkB,EAAE;EACjBF,UAAU,EAAE,CAAC;EACbC,KAAK,EAAE,IAAIC,GAAG,CAAC,CAAC,gBAAgB;AACpC,CAAC,CAAC,EACF,CAAC,WAAW,EAAE;EACVF,UAAU,EAAE,CAAC;EACbC,KAAK,EAAE,IAAIC,GAAG,CAAC,CAAC,uBAAuB;AAC3C,CAAC,CAAC,EACF,CAAC,aAAa,EAAE;EACZF,UAAU,EAAE,CAAC;EACbC,KAAK,EAAE,IAAIC,GAAG,CAAC,CAAC,MAAM,EAAE,QAAQ,EAAE,eAAe,EAAE,aAAa,EAAE,WAAW,EAAE,YAAY,EAAE,YAAY,EAAE,SAAS,EAAE,sBAAsB,EAAE,oBAAoB,CAAC;AACvK,CAAC,CAAC,EACF,CAAC,KAAK,EAAE;EACJF,UAAU,EAAE,CAAC;EACbC,KAAK,EAAE,IAAIC,GAAG,CAAC,CAAC,iBAAiB;AACrC,CAAC,CAAC,CACL,CAAC;AAEF,IAAIC,SAAS,GAAG;EAAEC,OAAO,EAAE;AAAE,CAAC;AAE9B,SAASC,SAAS,CAACC,IAAI,EAAE;EACrB,IAAIC,YAAY,GAAGD,IAAI,CAACE,aAAa,EAAE;EACvC,OAAOD,YAAY;AACvB;AAEA,SAASE,QAAQ,CAACH,IAAI,EAAE;EACpBA,IAAI,CAACF,OAAO,EAAE;AAClB;AAEA,SAASM,oBAAoB,CAACC,UAAU,EAAE;EACtC,IAAIC,KAAK,GAAGC,WAAW,CAAC,MAAM;IAC1B,IAAIF,UAAU,CAACP,OAAO,IAAIO,UAAU,CAACH,aAAa,EAAE;MAAE;MAClDC,QAAQ,CAACN,SAAS,CAAC;MACnBW,aAAa,CAACF,KAAK,CAAC;IACxB;EACJ,CAAC,EAAE,GAAG,CAAC;AACX;AAEA,SAASG,wBAAwB,GAAG;EAChC,IAAIH,KAAK,GAAGC,WAAW,CAAC,MAAM;IAC1B,IAAIV,SAAS,CAACC,OAAO,IAAI,CAAC,EAAE;MACxB,IAAIY,OAAO,GAAGC,QAAQ,CAACC,aAAa,CAAC,oBAAoB,CAAC,CAACC,SAAS,CAACC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;MACtFH,QAAQ,CAACC,aAAa,CAAC,oBAAoB,CAAC,CAACC,SAAS,GAAGE,QAAQ,CAACL,OAAO,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,UAAU;MAC/FF,aAAa,CAACF,KAAK,CAAC;IACxB;EACJ,CAAC,EAAE,GAAG,CAAC;AACX;AAEA,SAAST,SAAS,EAAEL,YAAY,EAAEO,SAAS,EAAEI,QAAQ,EAAEC,oBAAoB,EAAEK,wBAAwB"},"metadata":{},"sourceType":"module","externalDependencies":[]}