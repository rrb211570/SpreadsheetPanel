{"ast":null,"code":"import { store } from './../../../store/store.js';\nlet loadSheetAPI = async (id, rootURL) => {\n  const response = await fetch(rootURL + 'loadSheet/' + id, {\n    credentials: 'include'\n  });\n  const body = await response.json();\n  if (response.status !== 200) {\n    throw Error(body.message);\n  }\n  return body;\n};\nlet saveAPI = async (id, rootURL) => {\n  let exposedCollectedData = exposeCollectedData(store.getState().history.collectedData);\n  const response = await fetch(rootURL + 'saveSheet/' + id, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      exposedCollectedData: exposedCollectedData\n    }),\n    credentials: 'include'\n  });\n  const body = response.json();\n  if (response.status !== 200) {\n    throw Error(body.message);\n  }\n  return body;\n};\nfunction exposeCollectedData(data) {\n  let individualArr = [];\n  for (const [entryKey, value] of data.getIndividualEntries()) {\n    let individual = {\n      entryKey: entryKey\n    };\n    individual.styleMap = [...[...value.getStyleMap().entries()].map(styleEntry => {\n      return [styleEntry[0], styleEntry[1]];\n    })];\n    if (entryKey != 'sheet' && !/.col\\d+/.test(entryKey)) individual.row = value.getRow();else if (/.col\\d+/.test(entryKey)) {\n      individual.row = value.getCellRow();\n      individual.col = value.getCellCol();\n      individual.val = value.getVal();\n    }\n    individualArr.push(individual);\n  }\n  let groupArr = [];\n  for (const [groupName, styleMap] of data.getGroupEntries()) {\n    let group = {\n      groupName: groupName\n    };\n    group.styleMap = [...[...styleMap.entries()].map(styleEntry => {\n      return [styleEntry[0], styleEntry[1]];\n    })];\n    groupArr.push(group);\n  }\n  return {\n    individualData: individualArr,\n    groupData: groupArr\n  };\n}\nexport { loadSheetAPI, saveAPI };","map":{"version":3,"names":["store","loadSheetAPI","id","rootURL","response","fetch","credentials","body","json","status","Error","message","saveAPI","exposedCollectedData","exposeCollectedData","getState","history","collectedData","method","headers","JSON","stringify","data","individualArr","entryKey","value","getIndividualEntries","individual","styleMap","getStyleMap","entries","map","styleEntry","test","row","getRow","getCellRow","col","getCellCol","val","getVal","push","groupArr","groupName","getGroupEntries","group","individualData","groupData"],"sources":["C:/Users/rband/Desktop/SpreadsheetPanel/client/src/components/SpreadSheetPanel/helpers/API.js"],"sourcesContent":["import { store } from './../../../store/store.js'\r\n\r\nlet loadSheetAPI = async (id, rootURL) => {\r\n    const response = await fetch(rootURL + 'loadSheet/' + id, { credentials: 'include' });\r\n    const body = await response.json();\r\n\r\n    if (response.status !== 200) {\r\n        throw Error(body.message)\r\n    }\r\n    return body;\r\n}\r\nlet saveAPI = async (id, rootURL) => {\r\n    let exposedCollectedData = exposeCollectedData(store.getState().history.collectedData);\r\n    const response = await fetch(rootURL + 'saveSheet/' + id, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            exposedCollectedData: exposedCollectedData\r\n        }),\r\n        credentials: 'include'\r\n    });\r\n    const body = response.json();\r\n    if (response.status !== 200) {\r\n        throw Error(body.message)\r\n    }\r\n    return body;\r\n}\r\nfunction exposeCollectedData(data) {\r\n    let individualArr = [];\r\n    for (const [entryKey, value] of data.getIndividualEntries()) {\r\n        let individual = { entryKey: entryKey };\r\n        individual.styleMap = [...[...value.getStyleMap().entries()].map(styleEntry => {\r\n            return [styleEntry[0], styleEntry[1]];\r\n        })];\r\n        if (entryKey != 'sheet' && !/.col\\d+/.test(entryKey)) individual.row = value.getRow();\r\n        else if (/.col\\d+/.test(entryKey)) {\r\n            individual.row = value.getCellRow();\r\n            individual.col = value.getCellCol();\r\n            individual.val = value.getVal();\r\n        }\r\n        individualArr.push(individual);\r\n    }\r\n    let groupArr = [];\r\n    for (const [groupName, styleMap] of data.getGroupEntries()) {\r\n        let group = { groupName: groupName };\r\n        group.styleMap = [...[...styleMap.entries()].map(styleEntry => {\r\n            return [styleEntry[0], styleEntry[1]];\r\n        })];\r\n        groupArr.push(group);\r\n    }\r\n    return { individualData: individualArr, groupData: groupArr };\r\n}\r\n\r\nexport { loadSheetAPI, saveAPI };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}