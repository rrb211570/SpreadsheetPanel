{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rband\\\\Desktop\\\\SpreadsheetPanel\\\\client\\\\src\\\\components\\\\FormatPanel\\\\components\\\\Strikethrough\\\\Strikethrough.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { store } from './../../../../store/store.js';\nimport { useSelector } from 'react-redux';\nimport { getTextDecoration, setTextDecoration } from '../../../../store/reducers/selectionSlice.js';\nimport Data from \"../../../../data/data.js\";\nimport recordChange from \"../../../../data/modifiers/recordChange.js\";\nimport './Strikethrough.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Strikethrough(_ref) {\n  _s();\n  let {\n    selectionEntries\n  } = _ref;\n  const textDecoration = useSelector(getTextDecoration);\n  let toggleStrikethrough = e => {\n    let newTextDecoration;\n    let prevData = new Data();\n    let newData = new Data();\n    for (const cell of selectionEntries.values()) {\n      let [rowNum, colNum] = cell.split(',').map(num => parseInt(num, 10));\n      prevData.setIndividualEntry('.row' + rowNum + '.col' + colNum, new Map([['textDecoration', textDecoration]]), rowNum, colNum, null);\n      let cellNode = document.querySelector(`.row${rowNum}.col${colNum}>.cellValueDiv>.cellValue`);\n      if (textDecoration == 'line-through') {\n        newTextDecoration = 'none';\n        cellNode.style.textDecoration = newTextDecoration;\n        newData.setIndividualEntry('.row' + rowNum + '.col' + colNum, new Map([['textDecoration', newTextDecoration]]), rowNum, colNum, null);\n        document.querySelector('.strikethrough__btn').style.backgroundColor = 'white';\n      } else {\n        newTextDecoration = 'line-through';\n        cellNode.style.textDecoration = newTextDecoration;\n        newData.setIndividualEntry('.row' + rowNum + '.col' + colNum, new Map([['textDecoration', newTextDecoration]]), rowNum, colNum, null);\n        document.querySelector('.strikethrough__btn').style.backgroundColor = 'rgb(204, 255, 162)';\n      }\n    }\n    recordChange(prevData, newData);\n    store.dispatch(setTextDecoration({\n      textDecoration: newTextDecoration\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"strikethrough\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"strikethrough__btn\",\n      onClick: toggleStrikethrough,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"strikethrough__icon\",\n        children: \"S\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n_s(Strikethrough, \"u85FqvcVJcYQMEaeZbedhtlaIWI=\", false, function () {\n  return [useSelector];\n});\n_c = Strikethrough;\nexport default Strikethrough;\nvar _c;\n$RefreshReg$(_c, \"Strikethrough\");","map":{"version":3,"names":["React","store","useSelector","getTextDecoration","setTextDecoration","Data","recordChange","Strikethrough","selectionEntries","textDecoration","toggleStrikethrough","e","newTextDecoration","prevData","newData","cell","values","rowNum","colNum","split","map","num","parseInt","setIndividualEntry","Map","cellNode","document","querySelector","style","backgroundColor","dispatch"],"sources":["C:/Users/rband/Desktop/SpreadsheetPanel/client/src/components/FormatPanel/components/Strikethrough/Strikethrough.js"],"sourcesContent":["import React from \"react\";\r\nimport { store } from './../../../../store/store.js'\r\nimport { useSelector } from 'react-redux';\r\nimport { getTextDecoration, setTextDecoration } from '../../../../store/reducers/selectionSlice.js';\r\nimport Data from \"../../../../data/data.js\";\r\nimport recordChange from \"../../../../data/modifiers/recordChange.js\";\r\nimport './Strikethrough.css'\r\n\r\nfunction Strikethrough({ selectionEntries }) {\r\n    const textDecoration = useSelector(getTextDecoration);\r\n\r\n    let toggleStrikethrough = (e) => {\r\n        let newTextDecoration;\r\n        let prevData = new Data();\r\n        let newData = new Data();\r\n        for (const cell of selectionEntries.values()) {\r\n            let [rowNum, colNum] = cell.split(',').map((num) => parseInt(num, 10));\r\n            prevData.setIndividualEntry('.row' + rowNum + '.col' + colNum, new Map([['textDecoration', textDecoration]]), rowNum, colNum, null);\r\n            let cellNode = document.querySelector(`.row${rowNum}.col${colNum}>.cellValueDiv>.cellValue`);\r\n            if (textDecoration == 'line-through') {\r\n                newTextDecoration = 'none';\r\n                cellNode.style.textDecoration = newTextDecoration;\r\n                newData.setIndividualEntry('.row' + rowNum + '.col' + colNum, new Map([['textDecoration', newTextDecoration]]), rowNum, colNum, null);\r\n                document.querySelector('.strikethrough__btn').style.backgroundColor = 'white';\r\n            } else {\r\n                newTextDecoration = 'line-through';\r\n                cellNode.style.textDecoration = newTextDecoration;\r\n                newData.setIndividualEntry('.row' + rowNum + '.col' + colNum, new Map([['textDecoration', newTextDecoration]]), rowNum, colNum, null);\r\n                document.querySelector('.strikethrough__btn').style.backgroundColor = 'rgb(204, 255, 162)';\r\n            }\r\n        }\r\n        recordChange(prevData, newData);\r\n        store.dispatch(setTextDecoration({ textDecoration: newTextDecoration }));\r\n    }\r\n\r\n    return (\r\n        <div className='strikethrough'>\r\n            <button className='strikethrough__btn' onClick={toggleStrikethrough}>\r\n                <p id='strikethrough__icon'>S</p>\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Strikethrough;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}