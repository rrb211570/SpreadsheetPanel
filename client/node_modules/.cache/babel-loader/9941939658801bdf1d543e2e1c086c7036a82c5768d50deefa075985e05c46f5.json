{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rband\\\\Desktop\\\\SpreadsheetPanel\\\\client\\\\src\\\\components\\\\FormatPanel\\\\components\\\\FontSize\\\\FontSize.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { store } from './../../../../store/store.js';\nimport { useSelector } from 'react-redux';\nimport { getFontSize, setFontSize } from '../../../../store/reducers/selectionSlice.js';\nimport Data from \"../../../../data/data.js\";\nimport recordChange from \"../../../../data/modifiers/recordChange.js\";\nimport './FontSize.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet fontSizes = [6, 7, 8, 9, 10, 11, 12, 14, 18, 24, 36];\nlet options = [];\nfor (let i = 0; i < fontSizes.length; ++i) {\n  options.push( /*#__PURE__*/_jsxDEV(\"option\", {\n    value: fontSizes[i],\n    children: fontSizes[i]\n  }, i, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 18\n  }, this));\n}\nfunction FontSize(_ref) {\n  _s();\n  let {\n    selectionEntries\n  } = _ref;\n  const fontSize = useSelector(getFontSize);\n  let handleChange = e => {\n    updateFontSize(selectionEntries, fontSize, e.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fontSize\",\n    children: /*#__PURE__*/_jsxDEV(\"select\", {\n      className: \"fontSize__select\",\n      value: parseInt(fontSize, 10),\n      onChange: handleChange,\n      children: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n}\n_s(FontSize, \"Gbd4rYKel2mSE07nnG01mFhtQgA=\", false, function () {\n  return [useSelector];\n});\n_c = FontSize;\nlet updateFontSize = (selectionEntries, prevFontSize, newFontSize) => {\n  let prevData = new Data();\n  let newData = new Data();\n  for (const cell of selectionEntries.values()) {\n    let [rowNum, colNum] = cell.split(',').map(num => parseInt(num, 10));\n    prevData.setIndividualEntry('.row' + rowNum + '.col' + colNum, new Map([['fontSize', parseInt(prevFontSize, 10)]]), rowNum, colNum, null);\n    newData.setIndividualEntry('.row' + rowNum + '.col' + colNum, new Map([['fontSize', parseInt(newFontSize, 10)]]), rowNum, colNum, null);\n    document.querySelector(`.row${rowNum}.col${colNum}>.cellValueDiv>.cellValue`).style.fontSize = newFontSize + 'px';\n  }\n  recordChange(prevData, newData);\n  store.dispatch(setFontSize({\n    fontSize: newFontSize\n  }));\n};\nexport { FontSize, updateFontSize };\nvar _c;\n$RefreshReg$(_c, \"FontSize\");","map":{"version":3,"names":["React","useEffect","store","useSelector","getFontSize","setFontSize","Data","recordChange","fontSizes","options","i","length","push","FontSize","selectionEntries","fontSize","handleChange","e","updateFontSize","target","value","parseInt","prevFontSize","newFontSize","prevData","newData","cell","values","rowNum","colNum","split","map","num","setIndividualEntry","Map","document","querySelector","style","dispatch"],"sources":["C:/Users/rband/Desktop/SpreadsheetPanel/client/src/components/FormatPanel/components/FontSize/FontSize.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { store } from './../../../../store/store.js'\r\nimport { useSelector } from 'react-redux';\r\nimport { getFontSize, setFontSize } from '../../../../store/reducers/selectionSlice.js';\r\nimport Data from \"../../../../data/data.js\";\r\nimport recordChange from \"../../../../data/modifiers/recordChange.js\";\r\nimport './FontSize.css'\r\n\r\nlet fontSizes = [6, 7, 8, 9, 10, 11, 12, 14, 18, 24, 36];\r\nlet options = [];\r\nfor (let i = 0; i < fontSizes.length; ++i) {\r\n    options.push(<option key={i} value={fontSizes[i]}>{fontSizes[i]}</option>);\r\n}\r\n\r\nfunction FontSize({ selectionEntries }) {\r\n    const fontSize = useSelector(getFontSize);\r\n\r\n    let handleChange = (e) => {\r\n        updateFontSize(selectionEntries, fontSize, e.target.value)\r\n    }\r\n\r\n    return (\r\n        <div className='fontSize'>\r\n            <select className='fontSize__select' value={parseInt(fontSize, 10)} onChange={handleChange}>\r\n                {options}\r\n            </select>\r\n        </div>\r\n    );\r\n}\r\n\r\nlet updateFontSize = (selectionEntries, prevFontSize, newFontSize) => {\r\n    let prevData = new Data();\r\n    let newData = new Data();\r\n    for (const cell of selectionEntries.values()) {\r\n        let [rowNum, colNum] = cell.split(',').map((num) => parseInt(num, 10));\r\n        prevData.setIndividualEntry('.row' + rowNum + '.col' + colNum, new Map([['fontSize', parseInt(prevFontSize, 10)]]), rowNum, colNum, null);\r\n        newData.setIndividualEntry('.row' + rowNum + '.col' + colNum, new Map([['fontSize', parseInt(newFontSize, 10)]]), rowNum, colNum, null);\r\n        document.querySelector(`.row${rowNum}.col${colNum}>.cellValueDiv>.cellValue`).style.fontSize = newFontSize + 'px';\r\n    }\r\n    recordChange(prevData, newData);\r\n    store.dispatch(setFontSize({ fontSize: newFontSize }));\r\n}\r\n\r\nexport { FontSize, updateFontSize };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}