{"ast":null,"code":"import { updateTableDimensions, applyChange, applyGroupChange } from './applyChange.js';\nimport updateCollectedData from './updateCollectedData.js';\nimport { store } from './../../store/store.js';\nimport { trackEvent } from \"./../../store/reducers/keyboardEventsSlice.js\";\nimport { undo as undoAction, redo as redoAction } from './../../store/reducers/historySlice.js';\nconst UNDO = 'Undo';\nconst REDO = 'Redo';\nfunction undo() {\n  const storeState = store.getState();\n  const changeHistoryIndex = storeState.history.changeHistoryIndex;\n  const changeHistory = storeState.history.changeHistory;\n  const collectedData = storeState.history.collectedData;\n  const enableTest = storeState.keyboardEvents.enableTest;\n  const timeTravelCounter = storeState.keyboardEvents.timeTravelCounter;\n  if (changeHistoryIndex > 0) {\n    if (enableTest) store.dispatch(trackEvent({\n      outcome: UNDO,\n      timeTravelCounter: timeTravelCounter + 1\n    }));\n    for (const [entryKey, data] of changeHistory[changeHistoryIndex - 1].getIndividualEntries()) {\n      if (entryKey == 'table') {\n        console.log('table: ');\n        updateTableDimensions(data.getStyleMap());\n      } else if (!/\\.col\\d+/.test(entryKey)) {\n        let entry = document.getElementById(entryKey.match(/\\.row\\d+/));\n        applyChange(entry, data.getStyleMap());\n      } else {\n        let entry = document.querySelector(entryKey.match(/\\.row\\d+\\.col\\d+$/));\n        applyChange(entry, data.getStyleMap(), data.getVal());\n      }\n    }\n    for (const [group, styleMap] of changeHistory[changeHistoryIndex - 1].getGroupEntries()) {\n      console.log('group: ' + group);\n      applyGroupChange(group, styleMap);\n    }\n    let updatedCollectedData = updateCollectedData(changeHistory[changeHistoryIndex - 1], collectedData);\n    console.log('Undo\\nchangeHistoryIndex: ' + (changeHistoryIndex - 1));\n    store.dispatch(undoAction({\n      collectedData: updatedCollectedData\n    }));\n  } else if (enableTest) store.dispatch(trackEvent({\n    outcome: UNDO\n  }));\n}\nfunction redo() {\n  const storeState = store.getState();\n  const changeHistoryIndex = storeState.history.changeHistoryIndex;\n  const changeHistory = storeState.history.changeHistory;\n  const collectedData = storeState.history.collectedData;\n  const enableTest = storeState.keyboardEvents.enableTest;\n  const timeTravelCounter = storeState.keyboardEvents.timeTravelCounter;\n  if (changeHistoryIndex < changeHistory.length - 1) {\n    if (enableTest) store.dispatch(trackEvent({\n      outcome: REDO,\n      timeTravelCounter: timeTravelCounter + 1\n    }));\n    for (const [entryKey, data] of changeHistory[changeHistoryIndex + 1].getIndividualEntries()) {\n      if (entryKey == 'table') {\n        updateTableDimensions(data.getStyleMap(), updateTableDimensions);\n      } else if (!/\\.col\\d+/.test(entryKey)) {\n        let entry = document.getElementById(entryKey.match(/\\.row\\d+$/));\n        applyChange(entry, data.getStyleMap());\n      } else {\n        let entry = document.querySelector(entryKey.match(/\\.row\\d+\\.col\\d+$/));\n        applyChange(entry, data.getStyleMap(), data.getVal());\n      }\n    }\n    for (const [group, styleMap] of changeHistory[changeHistoryIndex + 1].getGroupEntries()) {\n      applyGroupChange(group, styleMap);\n    }\n    let updatedCollectedData = updateCollectedData(changeHistory[changeHistoryIndex + 1], collectedData);\n    console.log('Redo\\nchangeHistoryIndex: ' + (changeHistoryIndex + 1));\n    store.dispatch(redoAction({\n      collectedData: updatedCollectedData\n    }));\n  } else if (enableTest) store.dispatch(trackEvent({\n    outcome: REDO\n  }));\n}\nexport { undo, redo };","map":{"version":3,"names":["updateTableDimensions","applyChange","applyGroupChange","updateCollectedData","store","trackEvent","undo","undoAction","redo","redoAction","UNDO","REDO","storeState","getState","changeHistoryIndex","history","changeHistory","collectedData","enableTest","keyboardEvents","timeTravelCounter","dispatch","outcome","entryKey","data","getIndividualEntries","console","log","getStyleMap","test","entry","document","getElementById","match","querySelector","getVal","group","styleMap","getGroupEntries","updatedCollectedData","length"],"sources":["C:/Users/rband/Desktop/SpreadsheetPanel/client/src/data/modifiers/undoRedo.js"],"sourcesContent":["import { updateTableDimensions, applyChange, applyGroupChange } from './applyChange.js';\r\nimport updateCollectedData from './updateCollectedData.js';\r\nimport { store } from './../../store/store.js'\r\nimport { trackEvent } from \"./../../store/reducers/keyboardEventsSlice.js\";\r\nimport { undo as undoAction, redo as redoAction } from './../../store/reducers/historySlice.js'\r\n\r\nconst UNDO = 'Undo';\r\nconst REDO = 'Redo';\r\n\r\nfunction undo() {\r\n    const storeState = store.getState();\r\n    const changeHistoryIndex = storeState.history.changeHistoryIndex;\r\n    const changeHistory = storeState.history.changeHistory;\r\n    const collectedData = storeState.history.collectedData;\r\n    const enableTest = storeState.keyboardEvents.enableTest;\r\n    const timeTravelCounter = storeState.keyboardEvents.timeTravelCounter;\r\n    if (changeHistoryIndex > 0) {\r\n        if (enableTest) store.dispatch(trackEvent({ outcome: UNDO, timeTravelCounter: timeTravelCounter + 1 }));\r\n        for (const [entryKey, data] of changeHistory[changeHistoryIndex - 1].getIndividualEntries()) {\r\n            if (entryKey == 'table') {\r\n                console.log('table: ');\r\n                updateTableDimensions(data.getStyleMap());\r\n            }\r\n            else if (!/\\.col\\d+/.test(entryKey)) {\r\n                let entry = document.getElementById(entryKey.match(/\\.row\\d+/));\r\n                applyChange(entry, data.getStyleMap());\r\n            } else {\r\n                let entry = document.querySelector(entryKey.match(/\\.row\\d+\\.col\\d+$/));\r\n                applyChange(entry, data.getStyleMap(), data.getVal());\r\n            }\r\n        }\r\n        for (const [group, styleMap] of changeHistory[changeHistoryIndex - 1].getGroupEntries()) {\r\n            console.log('group: ' + group);\r\n            applyGroupChange(group, styleMap);\r\n        }\r\n        let updatedCollectedData = updateCollectedData(changeHistory[changeHistoryIndex - 1], collectedData);\r\n        console.log('Undo\\nchangeHistoryIndex: ' + (changeHistoryIndex - 1));\r\n        store.dispatch(undoAction({ collectedData: updatedCollectedData }));\r\n    } else if (enableTest) store.dispatch(trackEvent({ outcome: UNDO }));\r\n}\r\n\r\nfunction redo() {\r\n    const storeState = store.getState();\r\n    const changeHistoryIndex = storeState.history.changeHistoryIndex;\r\n    const changeHistory = storeState.history.changeHistory;\r\n    const collectedData = storeState.history.collectedData;\r\n    const enableTest = storeState.keyboardEvents.enableTest;\r\n    const timeTravelCounter = storeState.keyboardEvents.timeTravelCounter;\r\n    if (changeHistoryIndex < changeHistory.length - 1) {\r\n        if (enableTest) store.dispatch(trackEvent({ outcome: REDO, timeTravelCounter: timeTravelCounter + 1 }));\r\n        for (const [entryKey, data] of changeHistory[changeHistoryIndex + 1].getIndividualEntries()) {\r\n            if (entryKey == 'table') {\r\n                updateTableDimensions(data.getStyleMap(), updateTableDimensions);\r\n            } else if (!/\\.col\\d+/.test(entryKey)) {\r\n                let entry = document.getElementById(entryKey.match(/\\.row\\d+$/));\r\n                applyChange(entry, data.getStyleMap());\r\n            } else {\r\n                let entry = document.querySelector(entryKey.match(/\\.row\\d+\\.col\\d+$/));\r\n                applyChange(entry, data.getStyleMap(), data.getVal())\r\n            }\r\n        }\r\n        for (const [group, styleMap] of changeHistory[changeHistoryIndex + 1].getGroupEntries()) {\r\n            applyGroupChange(group, styleMap);\r\n        }\r\n        let updatedCollectedData = updateCollectedData(changeHistory[changeHistoryIndex + 1], collectedData);\r\n        console.log('Redo\\nchangeHistoryIndex: ' + (changeHistoryIndex + 1));\r\n        store.dispatch(redoAction({ collectedData: updatedCollectedData }));\r\n    } else if (enableTest) store.dispatch(trackEvent({ outcome: REDO }));\r\n}\r\nexport { undo, redo }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}