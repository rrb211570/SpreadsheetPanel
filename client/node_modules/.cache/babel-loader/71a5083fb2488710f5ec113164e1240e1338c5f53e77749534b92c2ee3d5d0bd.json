{"ast":null,"code":"// ----------Possible Tests-=------------\n// TablePanel: BUILD_SHEET, SELECTION, TEXT_CHANGE, RESIZING\n// SpreadSheetPanel: KEY_INPUT\n// MenuPanel: MENU_INTERACTION\n// FormatPanel: BOLD, ITALIC, STRIKETHROUGH, FONT_FAMILY\n// (not implemented) FunctionPanel: FUNCTIONS\n// (not implemented) ChartPanel: BAR, LINE, PIE, DOT\n//\nvar testSequence=new Map([['TablePanel',{turnNumber:1,tests:new Set(['BUILD_SHEET','SELECTION','TEXT_CHANGE','RESIZING'])}],['SpreadSheetPanel',{turnNumber:5,tests:new Set([/*'KEY_INPUT'*/])}],['MenuPanel',{turnNumber:3,tests:new Set([/*'MENU_INTERACTION'*/])}],['FormatPanel',{turnNumber:2,tests:new Set(['BOLD','ITALIC','STRIKETHROUGH','FONT_FAMILY','FONT_SIZE','FONT_COLOR','CELL_COLOR','BORDERS','HORIZONTAL_ALIGNMENT','VERTICAL_ALIGNMENT'])}],['App',{turnNumber:4,tests:new Set([/*'END_TO_END'*/])}]]);var batchTurn={current:1};function getInLine(turn){var myTurnNumber=turn.nextAvailable++;return myTurnNumber;}function nextTurn(turn){turn.current++;}function concludeTestingBatch(atomicTurn){var timer=setInterval(function(){if(atomicTurn.current==atomicTurn.nextAvailable){// if all turns have finished\nnextTurn(batchTurn);clearInterval(timer);}},100);}function concludeAllTestsWhenDone(){var timer=setInterval(function(){if(batchTurn.current==6){var testNum=document.querySelector('#testConsoleStatus').innerHTML.match(/(\\d+)/)[0];document.querySelector('#testConsoleStatus').innerHTML=parseInt(testNum,10)+1+' SUCCESS';clearInterval(timer);}},100);}export{batchTurn,testSequence,getInLine,nextTurn,concludeTestingBatch,concludeAllTestsWhenDone};","map":{"version":3,"names":["testSequence","Map","turnNumber","tests","Set","batchTurn","current","getInLine","turn","myTurnNumber","nextAvailable","nextTurn","concludeTestingBatch","atomicTurn","timer","setInterval","clearInterval","concludeAllTestsWhenDone","testNum","document","querySelector","innerHTML","match","parseInt"],"sources":["C:/Users/rband/Desktop/SpreadsheetPanel/client/src/tests/sequenceHelpers.js"],"sourcesContent":["\r\n// ----------Possible Tests-=------------\r\n// TablePanel: BUILD_SHEET, SELECTION, TEXT_CHANGE, RESIZING\r\n// SpreadSheetPanel: KEY_INPUT\r\n// MenuPanel: MENU_INTERACTION\r\n// FormatPanel: BOLD, ITALIC, STRIKETHROUGH, FONT_FAMILY\r\n// (not implemented) FunctionPanel: FUNCTIONS\r\n// (not implemented) ChartPanel: BAR, LINE, PIE, DOT\r\n//\r\nlet testSequence = new Map([\r\n    ['TablePanel', {\r\n        turnNumber: 1,\r\n        tests: new Set(['BUILD_SHEET', 'SELECTION', 'TEXT_CHANGE', 'RESIZING'])\r\n    }],\r\n    ['SpreadSheetPanel', {\r\n        turnNumber: 5,\r\n        tests: new Set([/*'KEY_INPUT'*/])\r\n    }],\r\n    ['MenuPanel', {\r\n        turnNumber: 3,\r\n        tests: new Set([/*'MENU_INTERACTION'*/])\r\n    }],\r\n    ['FormatPanel', {\r\n        turnNumber: 2,\r\n        tests: new Set(['BOLD', 'ITALIC', 'STRIKETHROUGH', 'FONT_FAMILY', 'FONT_SIZE', 'FONT_COLOR', 'CELL_COLOR', 'BORDERS', 'HORIZONTAL_ALIGNMENT', 'VERTICAL_ALIGNMENT'])\r\n    }],\r\n    ['App', {\r\n        turnNumber: 4,\r\n        tests: new Set([/*'END_TO_END'*/])\r\n    }]\r\n]);\r\n\r\nlet batchTurn = { current: 1 };\r\n\r\nfunction getInLine(turn) {\r\n    let myTurnNumber = turn.nextAvailable++;\r\n    return myTurnNumber;\r\n}\r\n\r\nfunction nextTurn(turn) {\r\n    turn.current++;\r\n}\r\n\r\nfunction concludeTestingBatch(atomicTurn) {\r\n    let timer = setInterval(() => {\r\n        if (atomicTurn.current == atomicTurn.nextAvailable) { // if all turns have finished\r\n            nextTurn(batchTurn);\r\n            clearInterval(timer);\r\n        }\r\n    }, 100);\r\n}\r\n\r\nfunction concludeAllTestsWhenDone() {\r\n    let timer = setInterval(() => {\r\n        if (batchTurn.current == 6) {\r\n            let testNum = document.querySelector('#testConsoleStatus').innerHTML.match(/(\\d+)/)[0];\r\n            document.querySelector('#testConsoleStatus').innerHTML = parseInt(testNum, 10) + 1 + ' SUCCESS';\r\n            clearInterval(timer);\r\n        }\r\n    }, 100);\r\n}\r\n\r\nexport { batchTurn, testSequence, getInLine, nextTurn, concludeTestingBatch, concludeAllTestsWhenDone };"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAIA,aAAY,CAAG,GAAIC,IAAG,CAAC,CACvB,CAAC,YAAY,CAAE,CACXC,UAAU,CAAE,CAAC,CACbC,KAAK,CAAE,GAAIC,IAAG,CAAC,CAAC,aAAa,CAAE,WAAW,CAAE,aAAa,CAAE,UAAU,CAAC,CAC1E,CAAC,CAAC,CACF,CAAC,kBAAkB,CAAE,CACjBF,UAAU,CAAE,CAAC,CACbC,KAAK,CAAE,GAAIC,IAAG,CAAC,CAAC,gBAAgB,CACpC,CAAC,CAAC,CACF,CAAC,WAAW,CAAE,CACVF,UAAU,CAAE,CAAC,CACbC,KAAK,CAAE,GAAIC,IAAG,CAAC,CAAC,uBAAuB,CAC3C,CAAC,CAAC,CACF,CAAC,aAAa,CAAE,CACZF,UAAU,CAAE,CAAC,CACbC,KAAK,CAAE,GAAIC,IAAG,CAAC,CAAC,MAAM,CAAE,QAAQ,CAAE,eAAe,CAAE,aAAa,CAAE,WAAW,CAAE,YAAY,CAAE,YAAY,CAAE,SAAS,CAAE,sBAAsB,CAAE,oBAAoB,CAAC,CACvK,CAAC,CAAC,CACF,CAAC,KAAK,CAAE,CACJF,UAAU,CAAE,CAAC,CACbC,KAAK,CAAE,GAAIC,IAAG,CAAC,CAAC,iBAAiB,CACrC,CAAC,CAAC,CACL,CAAC,CAEF,GAAIC,UAAS,CAAG,CAAEC,OAAO,CAAE,CAAE,CAAC,CAE9B,QAASC,UAAS,CAACC,IAAI,CAAE,CACrB,GAAIC,aAAY,CAAGD,IAAI,CAACE,aAAa,EAAE,CACvC,MAAOD,aAAY,CACvB,CAEA,QAASE,SAAQ,CAACH,IAAI,CAAE,CACpBA,IAAI,CAACF,OAAO,EAAE,CAClB,CAEA,QAASM,qBAAoB,CAACC,UAAU,CAAE,CACtC,GAAIC,MAAK,CAAGC,WAAW,CAAC,UAAM,CAC1B,GAAIF,UAAU,CAACP,OAAO,EAAIO,UAAU,CAACH,aAAa,CAAE,CAAE;AAClDC,QAAQ,CAACN,SAAS,CAAC,CACnBW,aAAa,CAACF,KAAK,CAAC,CACxB,CACJ,CAAC,CAAE,GAAG,CAAC,CACX,CAEA,QAASG,yBAAwB,EAAG,CAChC,GAAIH,MAAK,CAAGC,WAAW,CAAC,UAAM,CAC1B,GAAIV,SAAS,CAACC,OAAO,EAAI,CAAC,CAAE,CACxB,GAAIY,QAAO,CAAGC,QAAQ,CAACC,aAAa,CAAC,oBAAoB,CAAC,CAACC,SAAS,CAACC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CACtFH,QAAQ,CAACC,aAAa,CAAC,oBAAoB,CAAC,CAACC,SAAS,CAAGE,QAAQ,CAACL,OAAO,CAAE,EAAE,CAAC,CAAG,CAAC,CAAG,UAAU,CAC/FF,aAAa,CAACF,KAAK,CAAC,CACxB,CACJ,CAAC,CAAE,GAAG,CAAC,CACX,CAEA,OAAST,SAAS,CAAEL,YAAY,CAAEO,SAAS,CAAEI,QAAQ,CAAEC,oBAAoB,CAAEK,wBAAwB"},"metadata":{},"sourceType":"module","externalDependencies":[]}