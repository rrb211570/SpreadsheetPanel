{"ast":null,"code":"import _slicedToArray from\"C:/Users/rband/Desktop/SpreadsheetPanel/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{assert_store_unchanged,compareDOM,compareStore,logError,logSuccess}from'../../../../../tests/helper.js';import{getInLine,nextTurn}from'../../../../../tests/sequenceHelpers.js';import{store}from'./../../../../../store/store.js';var WAIT_IN_QUEUE=-1;var ARRANGE_AND_ACTION=0;var ASSERT=1;function textChangeTest(turn){var changes=[[4,5,'blah'],[1,2,'burger'],[3,7,'hello'],[8,2,'world'],[2,4,'apple']];try{if(changes.length>0)checkReactionOfTextChange(1,changes[0],turn,true,changes.length);for(var i=1;i<changes.length;++i)checkReactionOfTextChange(i+1,changes[i],turn,false,changes.length);}catch(e){console.log('Error: checkReactionOfTextChange param error: '+e);logError(null,null,null,null,e);}}function checkReactionOfTextChange(testCaseIndex,testDetails,turn,isFirstCall,totalTestCases){var _testDetails=_slicedToArray(testDetails,3),selectedRowNum=_testDetails[0],selectedColNum=_testDetails[1],newText=_testDetails[2];var cellInput=document.querySelector(\".row\".concat(selectedRowNum,\".col\").concat(selectedColNum,\" input\"));var myTurnNumber=getInLine(turn);var stage=WAIT_IN_QUEUE;var prevText;var prevState;var prevHistoryIndex;var textChangeExpected;var timer=setInterval(function(){try{switch(stage){case WAIT_IN_QUEUE:if(turn.current==myTurnNumber){if(isFirstCall)console.log('\\n--------TEXT CHANGE TEST--------------------');stage=ARRANGE_AND_ACTION;}break;case ARRANGE_AND_ACTION:var history=store.getState().history;// arrange\nprevText=cellInput.value;prevState=history.changeHistory[history.changeHistoryIndex];prevHistoryIndex=history.changeHistoryIndex;textChangeExpected=cellInput.value!=newText;// action\ncellInput.focus();cellInput.value=newText;if(textChangeExpected)cellInput.dispatchEvent(new Event('change'));document.activeElement.blur();stage=ASSERT;break;case ASSERT:var prevPropertyObj={textValue:prevText};var propertyObj={textValue:newText};compareDOM(selectedRowNum,selectedColNum,propertyObj);if(!textChangeExpected)assert_store_unchanged(prevHistoryIndex);else compareStore(selectedRowNum,selectedColNum,prevPropertyObj,propertyObj,prevState,prevHistoryIndex);console.log('textChange affects store and DOM correctly');if(testCaseIndex==totalTestCases)logSuccess('textChangeTest()',totalTestCases);nextTurn(turn);clearInterval(timer);break;}}catch(e){var errMsg='Err: checkReactionOfTextChange(): { testCaseIndex: '+testCaseIndex+' } : '+e;console.log(errMsg);logError(errMsg);clearInterval(timer);}},200);}export{textChangeTest,checkReactionOfTextChange};","map":{"version":3,"names":["assert_store_unchanged","compareDOM","compareStore","logError","logSuccess","getInLine","nextTurn","store","WAIT_IN_QUEUE","ARRANGE_AND_ACTION","ASSERT","textChangeTest","turn","changes","length","checkReactionOfTextChange","i","e","console","log","testCaseIndex","testDetails","isFirstCall","totalTestCases","selectedRowNum","selectedColNum","newText","cellInput","document","querySelector","myTurnNumber","stage","prevText","prevState","prevHistoryIndex","textChangeExpected","timer","setInterval","current","history","getState","value","changeHistory","changeHistoryIndex","focus","dispatchEvent","Event","activeElement","blur","prevPropertyObj","textValue","propertyObj","clearInterval","errMsg"],"sources":["C:/Users/rband/Desktop/SpreadsheetPanel/client/src/components/TablePanel/handlers/cellHandler/textChangeHandler/test.js"],"sourcesContent":["import { assert_store_unchanged, compareDOM, compareStore, logError, logSuccess } from '../../../../../tests/helper.js';\r\nimport { getInLine, nextTurn } from '../../../../../tests/sequenceHelpers.js'\r\nimport { store } from './../../../../../store/store.js'\r\n\r\nconst WAIT_IN_QUEUE = -1;\r\nconst ARRANGE_AND_ACTION = 0;\r\nconst ASSERT = 1;\r\n\r\nfunction textChangeTest(turn) {\r\n    let changes = [[4, 5, 'blah'], [1, 2, 'burger'], [3, 7, 'hello'], [8, 2, 'world'], [2, 4, 'apple']];\r\n    try {\r\n        if (changes.length > 0) checkReactionOfTextChange(1, changes[0], turn, true, changes.length);\r\n        for (let i = 1; i < changes.length; ++i) checkReactionOfTextChange(i + 1, changes[i], turn, false, changes.length);\r\n    } catch (e) {\r\n        console.log('Error: checkReactionOfTextChange param error: ' + e);\r\n        logError(null, null, null, null, e);\r\n    }\r\n}\r\n\r\nfunction checkReactionOfTextChange(testCaseIndex, testDetails, turn, isFirstCall, totalTestCases) {\r\n    let [selectedRowNum, selectedColNum, newText] = testDetails;\r\n    let cellInput = document.querySelector(`.row${selectedRowNum}.col${selectedColNum} input`);\r\n    let myTurnNumber = getInLine(turn);\r\n    let stage = WAIT_IN_QUEUE;\r\n    let prevText;\r\n    let prevState;\r\n    let prevHistoryIndex;\r\n    let textChangeExpected;\r\n    let timer = setInterval(() => {\r\n        try {\r\n            switch (stage) {\r\n                case WAIT_IN_QUEUE:\r\n                    if (turn.current == myTurnNumber) {\r\n                        if (isFirstCall) console.log('\\n--------TEXT CHANGE TEST--------------------');\r\n                        stage = ARRANGE_AND_ACTION;\r\n                    }\r\n                    break;\r\n                case ARRANGE_AND_ACTION:\r\n                    let history = store.getState().history;\r\n                    // arrange\r\n                    prevText = cellInput.value;\r\n                    prevState = history.changeHistory[history.changeHistoryIndex];\r\n                    prevHistoryIndex = history.changeHistoryIndex;\r\n                    textChangeExpected = cellInput.value != newText;\r\n\r\n                    // action\r\n                    cellInput.focus();\r\n                    cellInput.value = newText;\r\n                    if (textChangeExpected) cellInput.dispatchEvent(new Event('change'));\r\n                    document.activeElement.blur();\r\n                    stage = ASSERT;\r\n                    break;\r\n                case ASSERT:\r\n                    let prevPropertyObj = { textValue: prevText };\r\n                    let propertyObj = { textValue: newText };\r\n                    compareDOM(selectedRowNum, selectedColNum, propertyObj);\r\n                    if (!textChangeExpected) assert_store_unchanged(prevHistoryIndex);\r\n                    else compareStore(selectedRowNum, selectedColNum, prevPropertyObj, propertyObj, prevState, prevHistoryIndex);\r\n                    console.log('textChange affects store and DOM correctly');\r\n                    if (testCaseIndex == totalTestCases) logSuccess('textChangeTest()', totalTestCases);\r\n                    nextTurn(turn);\r\n                    clearInterval(timer);\r\n                    break;\r\n            }\r\n        } catch (e) {\r\n            let errMsg = 'Err: checkReactionOfTextChange(): { testCaseIndex: ' + testCaseIndex + ' } : ' + e;\r\n            console.log(errMsg);\r\n            logError(errMsg);\r\n            clearInterval(timer);\r\n        }\r\n    }, 200);\r\n}\r\n\r\nexport { textChangeTest, checkReactionOfTextChange };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}