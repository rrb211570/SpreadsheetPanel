{"ast":null,"code":"import { assert_store_unchanged, compareDOM, compareStore, logError, logSuccess } from '../../../../../tests/helper.js';\nimport { getInLine, nextTurn } from '../../../../../tests/sequenceHelpers.js';\nimport { store } from './../../../../../store/store.js';\nconst WAIT_IN_QUEUE = -1;\nconst ARRANGE_AND_ACTION = 0;\nconst ASSERT = 1;\nfunction textChangeTest(turn) {\n  let changes = [[4, 5, 'blah'], [1, 2, 'burger'], [3, 7, 'hello'], [8, 2, 'world'], [2, 4, 'apple']];\n  try {\n    if (changes.length > 0) checkReactionOfTextChange(1, changes[0], turn, true, changes.length);\n    for (let i = 1; i < changes.length; ++i) checkReactionOfTextChange(i + 1, changes[i], turn, false, changes.length);\n  } catch (e) {\n    console.log('Error: checkReactionOfTextChange param error: ' + e);\n    logError(null, null, null, null, e);\n  }\n}\nfunction checkReactionOfTextChange(testCaseIndex, testDetails, turn, isFirstCall, totalTestCases) {\n  let [selectedRowNum, selectedColNum, newText] = testDetails;\n  let cellInput = document.querySelector(`.row${selectedRowNum}.col${selectedColNum} input`);\n  let myTurnNumber = getInLine(turn);\n  let stage = WAIT_IN_QUEUE;\n  let prevText;\n  let prevState;\n  let prevHistoryIndex;\n  let textChangeExpected;\n  let timer = setInterval(() => {\n    try {\n      switch (stage) {\n        case WAIT_IN_QUEUE:\n          if (turn.current == myTurnNumber) {\n            if (isFirstCall) console.log('\\n--------TEXT CHANGE TEST--------------------');\n            stage = ARRANGE_AND_ACTION;\n          }\n          break;\n        case ARRANGE_AND_ACTION:\n          let history = store.getState().history;\n          // arrange\n          prevText = cellInput.value;\n          prevState = history.changeHistory[history.changeHistoryIndex];\n          prevHistoryIndex = history.changeHistoryIndex;\n          textChangeExpected = cellInput.value != newText;\n\n          // action\n          cellInput.focus();\n          cellInput.value = newText;\n          if (textChangeExpected) cellInput.dispatchEvent(new Event('change'));\n          document.activeElement.blur();\n          stage = ASSERT;\n          break;\n        case ASSERT:\n          let prevPropertyObj = {\n            textValue: prevText\n          };\n          let propertyObj = {\n            textValue: newText\n          };\n          compareDOM(selectedRowNum, selectedColNum, propertyObj);\n          if (!textChangeExpected) assert_store_unchanged(prevHistoryIndex);else compareStore(selectedRowNum, selectedColNum, prevPropertyObj, propertyObj, prevState, prevHistoryIndex);\n          console.log('textChange affects store and DOM correctly');\n          if (testCaseIndex == totalTestCases) logSuccess('textChangeTest()', totalTestCases);\n          nextTurn(turn);\n          clearInterval(timer);\n          break;\n      }\n    } catch (e) {\n      let errMsg = 'Err: checkReactionOfTextChange(): { testCaseIndex: ' + testCaseIndex + ' } : ' + e;\n      console.log(errMsg);\n      logError(errMsg);\n      clearInterval(timer);\n    }\n  }, 200);\n}\nexport { textChangeTest, checkReactionOfTextChange };","map":{"version":3,"names":["assert_store_unchanged","compareDOM","compareStore","logError","logSuccess","getInLine","nextTurn","store","WAIT_IN_QUEUE","ARRANGE_AND_ACTION","ASSERT","textChangeTest","turn","changes","length","checkReactionOfTextChange","i","e","console","log","testCaseIndex","testDetails","isFirstCall","totalTestCases","selectedRowNum","selectedColNum","newText","cellInput","document","querySelector","myTurnNumber","stage","prevText","prevState","prevHistoryIndex","textChangeExpected","timer","setInterval","current","history","getState","value","changeHistory","changeHistoryIndex","focus","dispatchEvent","Event","activeElement","blur","prevPropertyObj","textValue","propertyObj","clearInterval","errMsg"],"sources":["C:/Users/rband/Desktop/SpreadsheetPanel/client/src/components/TablePanel/handlers/cellHandler/textChangeHandler/test.js"],"sourcesContent":["import { assert_store_unchanged, compareDOM, compareStore, logError, logSuccess } from '../../../../../tests/helper.js';\r\nimport { getInLine, nextTurn } from '../../../../../tests/sequenceHelpers.js'\r\nimport { store } from './../../../../../store/store.js'\r\n\r\nconst WAIT_IN_QUEUE = -1;\r\nconst ARRANGE_AND_ACTION = 0;\r\nconst ASSERT = 1;\r\n\r\nfunction textChangeTest(turn) {\r\n    let changes = [[4, 5, 'blah'], [1, 2, 'burger'], [3, 7, 'hello'], [8, 2, 'world'], [2, 4, 'apple']];\r\n    try {\r\n        if (changes.length > 0) checkReactionOfTextChange(1, changes[0], turn, true, changes.length);\r\n        for (let i = 1; i < changes.length; ++i) checkReactionOfTextChange(i + 1, changes[i], turn, false, changes.length);\r\n    } catch (e) {\r\n        console.log('Error: checkReactionOfTextChange param error: ' + e);\r\n        logError(null, null, null, null, e);\r\n    }\r\n}\r\n\r\nfunction checkReactionOfTextChange(testCaseIndex, testDetails, turn, isFirstCall, totalTestCases) {\r\n    let [selectedRowNum, selectedColNum, newText] = testDetails;\r\n    let cellInput = document.querySelector(`.row${selectedRowNum}.col${selectedColNum} input`);\r\n    let myTurnNumber = getInLine(turn);\r\n    let stage = WAIT_IN_QUEUE;\r\n    let prevText;\r\n    let prevState;\r\n    let prevHistoryIndex;\r\n    let textChangeExpected;\r\n    let timer = setInterval(() => {\r\n        try {\r\n            switch (stage) {\r\n                case WAIT_IN_QUEUE:\r\n                    if (turn.current == myTurnNumber) {\r\n                        if (isFirstCall) console.log('\\n--------TEXT CHANGE TEST--------------------');\r\n                        stage = ARRANGE_AND_ACTION;\r\n                    }\r\n                    break;\r\n                case ARRANGE_AND_ACTION:\r\n                    let history = store.getState().history;\r\n                    // arrange\r\n                    prevText = cellInput.value;\r\n                    prevState = history.changeHistory[history.changeHistoryIndex];\r\n                    prevHistoryIndex = history.changeHistoryIndex;\r\n                    textChangeExpected = cellInput.value != newText;\r\n\r\n                    // action\r\n                    cellInput.focus();\r\n                    cellInput.value = newText;\r\n                    if (textChangeExpected) cellInput.dispatchEvent(new Event('change'));\r\n                    document.activeElement.blur();\r\n                    stage = ASSERT;\r\n                    break;\r\n                case ASSERT:\r\n                    let prevPropertyObj = { textValue: prevText };\r\n                    let propertyObj = { textValue: newText };\r\n                    compareDOM(selectedRowNum, selectedColNum, propertyObj);\r\n                    if (!textChangeExpected) assert_store_unchanged(prevHistoryIndex);\r\n                    else compareStore(selectedRowNum, selectedColNum, prevPropertyObj, propertyObj, prevState, prevHistoryIndex);\r\n                    console.log('textChange affects store and DOM correctly');\r\n                    if (testCaseIndex == totalTestCases) logSuccess('textChangeTest()', totalTestCases);\r\n                    nextTurn(turn);\r\n                    clearInterval(timer);\r\n                    break;\r\n            }\r\n        } catch (e) {\r\n            let errMsg = 'Err: checkReactionOfTextChange(): { testCaseIndex: ' + testCaseIndex + ' } : ' + e;\r\n            console.log(errMsg);\r\n            logError(errMsg);\r\n            clearInterval(timer);\r\n        }\r\n    }, 200);\r\n}\r\n\r\nexport { textChangeTest, checkReactionOfTextChange };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}