{"ast":null,"code":"import { batchTurn, nextTurn, concludeTestingBatch } from './../../../tests/sequenceHelpers.js';\nimport { boldTest } from '../components/Bold/test.js';\nimport { italicTest } from '../components/Italic/test.js';\nimport { strikethroughTest } from '../components/Strikethrough/test.js';\nimport { fontFamilyTest } from '../components/FontFamily/test.js';\nimport { fontSizeTest } from '../components/FontSize/test.js';\nimport { fontColorTest } from '../components/FontColor/test.js';\nimport { cellColorTest } from '../components/CellColor/test.js';\nimport { bordersTest } from '../components/Borders/test.js';\nimport { horizontalAlignmentTest } from '../components/HorizontalAlignment/test.js';\nimport { verticalAlignmentTest } from '../components/VerticalAlignment/test.js';\nconst t = {\n  FONT_FAMILY: 'FONT_FAMILY',\n  FONT_SIZE: 'FONT_SIZE',\n  BOLD: 'BOLD',\n  ITALIC: 'ITALIC',\n  STRIKETHROUGH: 'STRIKETHROUGH',\n  FONT_COLOR: 'FONT_COLOR',\n  CELL_COLOR: 'CELL_COLOR',\n  BORDERS: 'BORDERS',\n  HORIZONTAL_ALIGNMENT: 'HORIZONTAL_ALIGNMENT',\n  VERTICAL_ALIGNMENT: 'VERTICAL_ALIGNMENT'\n};\nfunction unitTest(testsToRun) {\n  if (testsToRun.size == 0) {\n    nextTurn(batchTurn);\n    return;\n  }\n  let atomicTurn = {\n    current: 1,\n    nextAvailable: 1\n  };\n  for (const test of testsToRun.values()) {\n    switch (test) {\n      case t.FONT_FAMILY:\n        fontFamilyTest(atomicTurn);\n        break;\n      case t.FONT_SIZE:\n        fontSizeTest(atomicTurn);\n        break;\n      case t.BOLD:\n        boldTest(atomicTurn);\n        break;\n      case t.ITALIC:\n        italicTest(atomicTurn);\n        break;\n      case t.STRIKETHROUGH:\n        strikethroughTest(atomicTurn);\n        break;\n      case t.FONT_COLOR:\n        fontColorTest(atomicTurn);\n        break;\n      case t.CELL_COLOR:\n        cellColorTest(atomicTurn);\n        break;\n      case t.BORDERS:\n        bordersTest(atomicTurn);\n        break;\n      case t.HORIZONTAL_ALIGNMENT:\n        horizontalAlignmentTest(atomicTurn);\n        break;\n      case t.VERTICAL_ALIGNMENT:\n        verticalAlignmentTest(atomicTurn);\n        break;\n      default:\n        break;\n    }\n  }\n  concludeTestingBatch(atomicTurn);\n}\nexport default unitTest;","map":{"version":3,"names":["batchTurn","nextTurn","concludeTestingBatch","boldTest","italicTest","strikethroughTest","fontFamilyTest","fontSizeTest","fontColorTest","cellColorTest","bordersTest","horizontalAlignmentTest","verticalAlignmentTest","t","FONT_FAMILY","FONT_SIZE","BOLD","ITALIC","STRIKETHROUGH","FONT_COLOR","CELL_COLOR","BORDERS","HORIZONTAL_ALIGNMENT","VERTICAL_ALIGNMENT","unitTest","testsToRun","size","atomicTurn","current","nextAvailable","test","values"],"sources":["C:/Users/rband/Desktop/SpreadsheetPanel/client/src/components/FormatPanel/tests/unitTest.js"],"sourcesContent":["import { batchTurn, nextTurn, concludeTestingBatch } from './../../../tests/sequenceHelpers.js'\r\nimport { boldTest } from '../components/Bold/test.js';\r\nimport { italicTest } from '../components/Italic/test.js';\r\nimport { strikethroughTest } from '../components/Strikethrough/test.js';\r\nimport { fontFamilyTest } from '../components/FontFamily/test.js';\r\nimport { fontSizeTest } from '../components/FontSize/test.js';\r\nimport { fontColorTest } from '../components/FontColor/test.js';\r\nimport { cellColorTest } from '../components/CellColor/test.js';\r\nimport { bordersTest } from '../components/Borders/test.js';\r\nimport { horizontalAlignmentTest } from '../components/HorizontalAlignment/test.js';\r\nimport { verticalAlignmentTest } from '../components/VerticalAlignment/test.js';\r\n\r\nconst t = {\r\n    FONT_FAMILY: 'FONT_FAMILY',\r\n    FONT_SIZE: 'FONT_SIZE',\r\n    BOLD: 'BOLD',\r\n    ITALIC: 'ITALIC',\r\n    STRIKETHROUGH: 'STRIKETHROUGH',\r\n    FONT_COLOR: 'FONT_COLOR',\r\n    CELL_COLOR: 'CELL_COLOR',\r\n    BORDERS: 'BORDERS',\r\n    HORIZONTAL_ALIGNMENT: 'HORIZONTAL_ALIGNMENT',\r\n    VERTICAL_ALIGNMENT: 'VERTICAL_ALIGNMENT',\r\n};\r\n\r\nfunction unitTest(testsToRun) {\r\n    if (testsToRun.size == 0) {\r\n        nextTurn(batchTurn);\r\n        return;\r\n    }\r\n    let atomicTurn = {\r\n        current: 1,\r\n        nextAvailable: 1\r\n    };\r\n    for (const test of testsToRun.values()) {\r\n        switch (test) {\r\n            case t.FONT_FAMILY:\r\n                fontFamilyTest(atomicTurn);\r\n                break;\r\n            case t.FONT_SIZE:\r\n                fontSizeTest(atomicTurn);\r\n                break;\r\n            case t.BOLD:\r\n                boldTest(atomicTurn);\r\n                break;\r\n            case t.ITALIC:\r\n                italicTest(atomicTurn);\r\n                break;\r\n            case t.STRIKETHROUGH:\r\n                strikethroughTest(atomicTurn);\r\n                break;\r\n            case t.FONT_COLOR:\r\n                fontColorTest(atomicTurn);\r\n                break;\r\n            case t.CELL_COLOR:\r\n                cellColorTest(atomicTurn);\r\n                break;\r\n            case t.BORDERS:\r\n                bordersTest(atomicTurn);\r\n                break;\r\n            case t.HORIZONTAL_ALIGNMENT:\r\n                horizontalAlignmentTest(atomicTurn);\r\n                break;\r\n            case t.VERTICAL_ALIGNMENT:\r\n                verticalAlignmentTest(atomicTurn);\r\n                break;\r\n            default: break;\r\n        }\r\n    }\r\n    concludeTestingBatch(atomicTurn);\r\n}\r\n\r\nexport default unitTest;"],"mappings":"AAAA,SAASA,SAAS,EAAEC,QAAQ,EAAEC,oBAAoB,QAAQ,qCAAqC;AAC/F,SAASC,QAAQ,QAAQ,4BAA4B;AACrD,SAASC,UAAU,QAAQ,8BAA8B;AACzD,SAASC,iBAAiB,QAAQ,qCAAqC;AACvE,SAASC,cAAc,QAAQ,kCAAkC;AACjE,SAASC,YAAY,QAAQ,gCAAgC;AAC7D,SAASC,aAAa,QAAQ,iCAAiC;AAC/D,SAASC,aAAa,QAAQ,iCAAiC;AAC/D,SAASC,WAAW,QAAQ,+BAA+B;AAC3D,SAASC,uBAAuB,QAAQ,2CAA2C;AACnF,SAASC,qBAAqB,QAAQ,yCAAyC;AAE/E,MAAMC,CAAC,GAAG;EACNC,WAAW,EAAE,aAAa;EAC1BC,SAAS,EAAE,WAAW;EACtBC,IAAI,EAAE,MAAM;EACZC,MAAM,EAAE,QAAQ;EAChBC,aAAa,EAAE,eAAe;EAC9BC,UAAU,EAAE,YAAY;EACxBC,UAAU,EAAE,YAAY;EACxBC,OAAO,EAAE,SAAS;EAClBC,oBAAoB,EAAE,sBAAsB;EAC5CC,kBAAkB,EAAE;AACxB,CAAC;AAED,SAASC,QAAQ,CAACC,UAAU,EAAE;EAC1B,IAAIA,UAAU,CAACC,IAAI,IAAI,CAAC,EAAE;IACtBzB,QAAQ,CAACD,SAAS,CAAC;IACnB;EACJ;EACA,IAAI2B,UAAU,GAAG;IACbC,OAAO,EAAE,CAAC;IACVC,aAAa,EAAE;EACnB,CAAC;EACD,KAAK,MAAMC,IAAI,IAAIL,UAAU,CAACM,MAAM,EAAE,EAAE;IACpC,QAAQD,IAAI;MACR,KAAKjB,CAAC,CAACC,WAAW;QACdR,cAAc,CAACqB,UAAU,CAAC;QAC1B;MACJ,KAAKd,CAAC,CAACE,SAAS;QACZR,YAAY,CAACoB,UAAU,CAAC;QACxB;MACJ,KAAKd,CAAC,CAACG,IAAI;QACPb,QAAQ,CAACwB,UAAU,CAAC;QACpB;MACJ,KAAKd,CAAC,CAACI,MAAM;QACTb,UAAU,CAACuB,UAAU,CAAC;QACtB;MACJ,KAAKd,CAAC,CAACK,aAAa;QAChBb,iBAAiB,CAACsB,UAAU,CAAC;QAC7B;MACJ,KAAKd,CAAC,CAACM,UAAU;QACbX,aAAa,CAACmB,UAAU,CAAC;QACzB;MACJ,KAAKd,CAAC,CAACO,UAAU;QACbX,aAAa,CAACkB,UAAU,CAAC;QACzB;MACJ,KAAKd,CAAC,CAACQ,OAAO;QACVX,WAAW,CAACiB,UAAU,CAAC;QACvB;MACJ,KAAKd,CAAC,CAACS,oBAAoB;QACvBX,uBAAuB,CAACgB,UAAU,CAAC;QACnC;MACJ,KAAKd,CAAC,CAACU,kBAAkB;QACrBX,qBAAqB,CAACe,UAAU,CAAC;QACjC;MACJ;QAAS;IAAM;EAEvB;EACAzB,oBAAoB,CAACyB,UAAU,CAAC;AACpC;AAEA,eAAeH,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}